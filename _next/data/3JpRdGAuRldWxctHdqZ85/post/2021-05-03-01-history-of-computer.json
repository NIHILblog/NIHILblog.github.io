{"pageProps":{"post":{"frontMatter":{"id":5,"title":"개발을 위한 프로그래밍 지식 1편 - 컴퓨터의 역사","description":"이번 글은 개발을 위한 프로그래밍 지식 1편으로, 이번 글에서는 간단하게 컴퓨터의 역사에 대해서 알아보려고 합니다. 컴퓨터의 역사를 알아보는 이유는 프로그램과 프로그래밍 언어와 밀접한 관계가 있기 때문입니다. 오늘날의 인류는 컴퓨터와 떼려야 뗄 수 없는 관계에 있고 개발자가 되려면 더더욱 그럴 겁니다. 그러니 프로그래밍 언어의 이야기를 하기에 앞서 컴퓨터에 대한 이야기를 한 번 해보도록 합시다. 우리는 보통 컴퓨터라고 하면 게임을 하거나 웹 서핑을 할 수 있는 일반적이고 보편적인 PC를 생각할 겁니다. 저도 그렇고 여러분들도 아마 그럴 겁니다. 그런데, 컴퓨터는 사실 계산장치입니다. 컴퓨터라고 하는 단어도 계산하다라는 의미의 라틴어인 Computare에서 왔다고 하기도 합니다. 그렇게 멀리가지 않아도 영단어인 Compute도 계산하다 라는 의미를 가졌습니다.","coverImage":"https://drive.google.com/uc?export=view&id=1M7oXWODFp4F4hG8TOjzIr7y_Fh8e4uxi","tags":["프로그램","프로그래밍","컴퓨터","컴퓨터의 역사","에니악","에드삭","에드박","유니박"],"categories":["프로그래밍"],"createdAt":1619998200000,"updatedAt":1635571680000,"keywords":[],"drawDate":1619998200000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      strong: \"strong\",\n      h1: \"h1\",\n      h2: \"h2\",\n      img: \"img\",\n      h3: \"h3\"\n    }, _provideComponents(), props.components), {ProgrammingGuideMessage, P, Strong, Gray, Line} = _components;\n    if (!Gray) _missingMdxReference(\"Gray\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!ProgrammingGuideMessage) _missingMdxReference(\"ProgrammingGuideMessage\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(ProgrammingGuideMessage, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글은 \", _jsx(_components.strong, {\n          children: \"개발을 위한 프로그래밍 지식 1편\"\n        }), \"으로, 이번 글에서는 간단하게 \", _jsx(_components.strong, {\n          children: \"컴퓨터의 역사\"\n        }), \"에 대해서 알아보려고 합니다. 컴퓨터의 역사를 알아보는 이유는 프로그램과 프로그래밍 언어와 밀접한 관계가 있기 때문입니다. 오늘날의 인류는 컴퓨터와 떼려야 뗄 수 없는 관계에 있고 개발자가 되려면 더더욱 그럴 겁니다. 그러니 프로그래밍 언어의 이야기를 하기에 앞서 컴퓨터에 대한 이야기를 한 번 해보도록 합시다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"다만, 시작하기에 앞서 미리 전해둘 것은 대략적으로 알아보는 것이기 때문에 심도 있게 들어가는 것은 아니라는 것입니다.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"컴퓨터의-역사\",\n        children: \"컴퓨터의 역사\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"우리는 보통 컴퓨터라고 하면 게임을 하거나 웹 서핑을 할 수 있는 일반적이고 보편적인 PC를 생각할 겁니다. 저도 그렇고 여러분들도 아마 그럴 겁니다. 그런데, 컴퓨터는 사실 계산장치입니다. 컴퓨터라고 하는 단어도 \", _jsx(_components.strong, {\n          children: \"계산하다\"\n        }), \"라는 의미의 라틴어인 \", _jsx(_components.strong, {\n          children: \"Computare\"\n        }), \"에서 왔다고 하기도 합니다. 그렇게 멀리가지 않아도 영단어인 \", _jsx(_components.strong, {\n          children: \"Compute\"\n        }), \"도 계산하다 라는 의미를 가졌습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"어원에서 알 수 있듯이 \", _jsx(_components.strong, {\n          children: \"컴퓨터는 연산을 돕는 도구\"\n        }), \"로부터 그 발상이 시작됐다고 할 수 있겠습니다. 말 그대로 \", _jsx(_components.strong, {\n          children: \"컴퓨터는 인간이 하기 어려운 계산을 편하게 하기 위한 기계\"\n        }), \"인 것입니다. 오늘날처럼 거창한 기능이 탑재된 것은 비교적 역사가 짧습니다. 그 이전에는 컴퓨터는 순수하게 계산을 위한 도구였습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"16세기-이전의-컴퓨터\",\n        children: \"16세기 이전의 컴퓨터\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"오늘날의 컴퓨터의 이미지가 너무 강렬해서 주판을 컴퓨터라고 하면 미친놈 소리를 듣겠죠? 그런데 진짜로 \", _jsx(_components.strong, {\n          children: \"컴퓨터의 이전에 인간의 계산을 돕는 도구는 바로 주판\"\n        }), \"이었습니다. 오늘날의 \", _jsx(_components.strong, {\n          children: \"GUI\"\n        }), \"까지는 아니지만 직관적으로 수량을 표현할 수 있어서 계산을 편하게 만들어주는 주판은 고대의 메소포타미아 문명에서 처음 사용되었다고 전해집니다. 이 주판의 존재로 인해서 사람은 계산을 엄청 편하게 할 수 있었습니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Soroban.JPG/300px-Soroban.JPG\",\n        alt: \"주판 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 주판도 \", _jsx(_components.strong, {\n          children: \"하나 하나 계산하는 게 불편\"\n        }), \"해서 \", _jsx(_components.strong, {\n          children: \"하나의 도구로 계산을 편하게 하기 위해\"\n        }), \" 고안되었겠죠. 인간은 언제나 불편하면 편리함을 추구하려고 하는 특성이 있습니다. 인류의 문명이 발전해온 이유와 앞으로도 발전할 수 있는 이유는 바로 이 편리함을 추구하기 때문입니다. 아무튼, 주판은 \", _jsx(_components.strong, {\n          children: \"Compute\"\n        }), \"에 걸맞는 기능을 가진 녀석이죠.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"하지만 이 이후, 16세기까지는 별다른 계산을 돕는 도구는 나타나지 않았습니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"17세기-기계식-계산기의-등장\",\n        children: \"17세기, 기계식 계산기의 등장\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Blaise_pascal.jpg/220px-Blaise_pascal.jpg\",\n        alt: \"블레즈 파스칼 / 출처 위키백과\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Arts_et_Metiers_Pascaline_dsc03869.jpg/330px-Arts_et_Metiers_Pascaline_dsc03869.jpg\",\n        alt: \"파스칼라인 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1642년, 프랑스의 \", _jsx(_components.strong, {\n          children: \"블레즈 파스칼\"\n        }), \"은 10진수의 \", _jsx(_components.strong, {\n          children: \"덧셈과 뺄셈\"\n        }), \"을 수행할 수 있는 기계식 계산기를 만들어냈습니다. 이 계산기는 자신의 아버지가 좀 더 편한 환경에서 업무를 봤으면 하는 배경에서 만들게 되었다고 전해집니다. 이 계산기의 이름은 \", _jsx(_components.strong, {\n          children: \"파스칼라인\"\n        }), \"이었습니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Christoph_Bernhard_Francke_-_Bildnis_des_Philosophen_Leibniz_%28ca._1695%29.jpg/259px-Christoph_Bernhard_Francke_-_Bildnis_des_Philosophen_Leibniz_%28ca._1695%29.jpg\",\n        alt: \"고트프리트 빌헬름 라이프니츠 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1672년에는 \", _jsx(_components.strong, {\n          children: \"고트프리트 빌헬름 라이프니츠\"\n        }), \"라는 사람이 파스칼이 만든 기계식 계산기를 개선하여 \", _jsx(_components.strong, {\n          children: \"나눗셈과 곱셈\"\n        }), \"을 가능하게 만들었습니다. \", _jsx(_components.strong, {\n          children: \"이진법\"\n        }), \"이라는 것도 라이프니츠가 만들어냈습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이진법은 0과 1만으로 모든 숫자를 표현하는 방법입니다. 이 이진법은 오늘날에도 널리 사용되고 있습니다. 특히나 기계적인 부분에 말이죠.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"19세기-찰스-배비지와-해석-기관\",\n        children: \"19세기, 찰스 배비지와 해석 기관\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/Charles_Babbage_-_1860.jpg/244px-Charles_Babbage_-_1860.jpg\",\n        alt: \"찰스 배비지 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"영국의 수학자이자 철학자였던 찰스 배비지\"\n        }), \"는 굉장히 선구적인 눈을 갖고 있었습니다. 1822년에 그는 로그함수, 다항함수, 삼각함수를 계산할 수 있는 기계식 계산기를 고안했습니다. \", _jsx(_components.strong, {\n          children: \"차분 기관\"\n        }), \"이라고 불렀던 이 기계는 당시 기술로 만들기엔 돈이 너무 많이 들어서 1855년에야 만들어졌다고 합니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/050114_2529_difference.jpg/300px-050114_2529_difference.jpg\",\n        alt: \"차분 기관 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1835년에는 차분 기관이 만들어지기도 전인 그 시기에 차분 기관을 좀 더 업그레이드시킨 해석 기관을 고안하기도 했습니다. 찰스 배비지의 무서운 점은 이 해석 기관에 있습니다. 이 해석 기관은 수를 \", _jsx(_components.strong, {\n          children: \"저장\"\n        }), \"하고, 저장된 수를 \", _jsx(_components.strong, {\n          children: \"계산\"\n        }), \"할 수 있고, 기계를 \", _jsx(_components.strong, {\n          children: \"제어\"\n        }), \"할 수 있는 장치와 \", _jsx(_components.strong, {\n          children: \"입출력\"\n        }), \"까지 가능했는데, 정작 만들어지지는 못했습니다만 현대에 사용되는 컴퓨터에 전부 포함되어 있는 기능이었습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"학자들은 이 해석 기관을 \", _jsx(_components.strong, {\n          children: \"최초의 프로그래밍이 가능한 컴퓨터\"\n        }), \"로 인정하고 있다고 합니다. 찰스 배비지의 선구안이 돋보이는 순간이죠. 단순 이론 뿐이지만 이 이론은 시대를 넘어섰다고 할만합니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"전쟁이-가져온-컴퓨터의-발전\",\n        children: \"전쟁이 가져온 컴퓨터의 발전\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"전쟁을 할 때마다 인류는 발전해왔습니다. 다양한 기술들이 전쟁에 사용되기 위해 만들어지곤 하죠. 컴퓨터 또한 그렇게 발전하기 시작했습니다. 이 시기에는 다양한 연도에 다앙한 발전이 이루어져서 정확한 순서는 의미가 없습니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"튜링-머신\",\n        children: \"튜링 머신\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Alan_Turing_Aged_16.jpg/235px-Alan_Turing_Aged_16.jpg\",\n        alt: \"앨런 튜링 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"튜링 기계라고도 하는 이 개념은 1936년에 영국의 수학자인 \", _jsx(_components.strong, {\n          children: \"앨런 튜링\"\n        }), \"이 고안해냈습니다. 알고리즘과 계산에 대한 혁신적인 이론을 만들어냈죠. 튜링 머신은 실제로 존재하는 기계는 아니었고 그저 이론이었습니다. 이 이론이 지금의 컴퓨터와 상당히 비슷하다는 점을 생각해볼때 앨런 튜링이라는 이 사람도 대단한 사람입니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"훗날 이 이론은 실현됩니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"콘라트-추제의-z-시리즈\",\n        children: \"콘라트 추제의 Z 시리즈\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Konrad_Zuse_%281992%29.jpg/220px-Konrad_Zuse_%281992%29.jpg\",\n        alt: \"콘라트 추제 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"마징가Z 마냥 이름에 Z가 들어가는 컴퓨터가 있었습니다. 독일의 \", _jsx(_components.strong, {\n          children: \"콘라트 추제\"\n        }), \"라는 사람이 개발한 Z1과 Z3이라는 컴퓨터는 현대의 컴퓨터와 상당히 유사하다고 합니다. 특히나 Z3은 1941년에 만들어졌지만 워낙 마이너했기 때문에 알려져 있지 않았고, 그 존재가 나중에나 드러나게 되었습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Z3은 앨런 튜링이 고안했던 튜링 기계의 실현이라고 할 수 있을 정도로 상당한 기능을 가졌던 컴퓨터라고 합니다. 실제로 본 적 없어서 모르겠지만요.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"콜로서스\",\n        children: \"콜로서스\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"역사에 가려졌던 컴퓨터는 하나가 더 있었습니다. 바로 콜로서스라는 이름의 컴퓨터인데 이 컴퓨터가 알려져있지 않았던 이유는 국가 기밀이었기 때문입니다. 그래서 한참 나중에야 알려지게 되었습니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"현재는 콜로서스가 \", _jsx(_components.strong, {\n          children: \"최초의 프로그래밍이 가능했던 전자 컴퓨터\"\n        }), \"라고 알려져 있습니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"에니악\",\n        children: \"에니악\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1946년에 존 에커트와 존 모클리에 의해 개발된 에니악은 상당한 크기를 자랑하는 컴퓨터였습니다. 에니악은 \", _jsx(_components.strong, {\n          children: \"Electronic Numerical Integrator And Computer\"\n        }), \"의 약자로 \", _jsx(_components.strong, {\n          children: \"ENIAC\"\n        }), \"이라고 표현합니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/4/4e/Eniac.jpg\",\n        alt: \"에니악 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"에니악은 어마어마한 연산이 가능했지만 그 기능과는 별개로 어마어마한 단점이 있었습니다. 상당하게 거대했고 프로그램을 바꿀 때엔 배선을 바꿔야했습니다. 부품의 교체가 필요했다는 것이죠. 이게 또 겁나게 많아서 어마어마한 시간을 잡아먹었다고 합니다. 게다가 어마어마하게 무거웠습니다. \", _jsx(_components.strong, {\n          children: \"컴퓨터 하나가 방 전체를 차지하는 것에 더불어 그 무게가 30톤\"\n        }), \"이라면 믿겠습니까? 이렇게 비효율적인 에니악이었지만 기능 자체는 훌륭했고 전쟁에 쓰이게 됩니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"위 두 컴퓨터가 알려져 있었더라면 에니악은 최초의 컴퓨터라는 수식어를 아주 잠깐이라도 가지지 못했을 겁니다. 이 말을 반대로 말하면 최근까지는 최초의 컴퓨터라고 알려져 있었다는 것이죠.\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"에니악은 기능은 훌륭했지만 단점은 많았기에 훗날 \", _jsx(Strong, {\n          children: \"존 폰 노이만\"\n        }), \"이라는 천재 과학자이 의해 개선됩니다. \", _jsx(Gray, {\n          children: \"(라고 알려지게 됩니다.)\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"에드삭과-에드박\",\n        children: \"에드삭과 에드박\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/5/5e/JohnvonNeumann-LosAlamos.gif\",\n        alt: \"존 폰 노이만 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"에니악의 단점은 프로그램을 바꿀 때에는 \", _jsx(_components.strong, {\n          children: \"아주 긴 작업을 해야 했기 때문에 컴퓨터를 종료했어야 했다\"\n        }), \"는 점이었습니다. 헝가리 출신으로 미국에서 수학자로 활동하고 있었던 \", _jsx(_components.strong, {\n          children: \"존 폰 노이만\"\n        }), \"은 이런 에니악의 단점을 커버하기 위한 어떤 이론을 제안했습니다. 바로 \", _jsx(_components.strong, {\n          children: \"프로그램 내장 방식의 컴퓨터\"\n        }), \"였죠.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"어떠한 기억 장치를 마련해두고 이 안에 프로그램과 명령을 기억하는 것이었습니다. 상당히 효율적인 방식이었죠. 존 에커트와 존 모클리는 이 이론을 그대로 적용한 **에드박(EDVAC)**을 선보였습니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"라고 하면 얕은 지식이고, 진실은 다릅니다. 존 에커트와 존 모클리는 이미 \", _jsx(_components.strong, {\n          children: \"에니악을 만들었을 때부터 그 단점을 파악\"\n        }), \"하고 있었고 \", _jsx(_components.strong, {\n          children: \"그들 자신들이 이를 개선한 것이 에드박\"\n        }), \"입니다. 세상에 폰 노이만 구조라고 알려진 프로그램 내장 방식은 사실상 두 사람의 아이디어인 것입니다. 이렇게 된 계기는 간단합니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"에드박이 나오기 이전에, 허먼 골드스타인이라는 사람에게 연락을 받은 존 폰 노이만은 에드박에 대한 내용을 정리해서 골드스타인에게 전달했습니다. 하지만 골드스타인은 마치 존 폰 노이만이 프로그램 내장 방식을 제안한 것처럼 배포해버린 겁니다. 그래서 지금까지 폰 노이만 구조라고 불리죠.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"아무튼 존 폰 노이만의 보고서에 대한 내용이 영국의 케임브리지 대학에까지 전달이 되어 그 곳에서 **에드삭(EDSAC)**이라는 컴퓨터가 개발되었습니다. \", _jsx(_components.strong, {\n          children: \"에드박 보다 먼저\"\n        }), \"말이죠. 참 신기한 일이 아닐 수가 없습니다. 에드삭은 모리스 월크스라는 사람에 의해 만들어졌고 대학에서 바로 사용할 수 있는 소형 컴퓨터였다고 합니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"근데 제가 보기엔.. 에드삭과 에드박은 에니악의 크기와 비교해서 별반 차이는 없는 것 같습니다. 뭐 아무튼 결과적으론 존 폰 노이만도 컴퓨터의 역사에 큰 이바지를 한 셈이죠.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"유니박\",\n        children: \"유니박\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/5/55/Museum_of_Science%2C_Boston%2C_MA_-_IMG_3163.JPG\",\n        alt: \"유니박 / 출처 위키백과\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"에니악을 개발했던 존 에커트와 존 모클리는 회사를 하나 차리는데, EMCC라는 이름의 회사였습니다. 이들은 **바이낙(BINAC)**이라는 컴퓨터를 개발해서 판매하기 시작했습니다. \", _jsx(_components.strong, {\n          children: \"최초의 상업용 컴퓨터\"\n        }), \"입니다. 그 기능은 좀 구렸는지 오작동이 있었나봅니다. 아무튼, 현대적 의미의 컴퓨터의 시작을 알렸던 그들은 상업용 컴퓨터의 시작도 알린 셈입니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"EMCC는 1950년에 레밍턴 랜드라는 회사에 인수되고 두 사람은 1951년에 **유니박(UNIVAC)**이라는 컴퓨터를 만들게 됩니다. 에니악보다 훨씬 작은 사이즈에 작은 부품이 들어갔지만 그 기능은 에니악의 20배에 달했고 1952년부터 본격적인 판매가 시작됩니다. 군부터 시작해서 민간 기업에까지 판매를 하게 되죠.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"유니박은 총 46대가 생산되었고 당시 가격이 \", _jsx(_components.strong, {\n          children: \"150만 달러\"\n        }), \"로까지 점프하면서 상당한 위용을 자랑했다고 합니다.\"]\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsx(_components.p, {\n        children: \"제가 아는 한, 컴퓨터의 역사적인 행보는 여기까지입니다. 이 이후의 컴퓨터들은 우리가 아는 현대의 컴퓨터들이죠. 이번 글에서는 간단하게 컴퓨터의 역사에 대해 들여다봤습니다. 다음 글에서는 이 컴퓨터라는 것 위에서 돌아가는 프로그램과 프로그래밍 언어에 대해 알아봅시다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-05-03-01-history-of-computer"},"prev":{"frontMatter":{"id":4,"title":"웹 개발을 위한 CSS 가이드 모음","description":"이 글은 웹 개발을 위한 CSS 가이드 시리즈를 모아두는 것을 목적으로 하는 글입니다. CSS 가이드는 HTML 가이드에 이어서 웹 개발에 입문하는 분들을 위해 만들어진 두번째 가이드 시리즈 모음 입니다. 웹 개발을 위한 CSS 가이드는 CSS를 통해서 HTML의 스타일을 추가하고 자유롭게 디자인할 수 있도록 도와주고 원하는 웹사이트를 만들 수 있도록 도와주는 시리즈 입니다.","coverImage":"https://drive.google.com/uc?export=view&id=13t9uNUn9GTevjbvP_oP67W8g7ud1jPm3","tags":["가이드","CSS","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","CSS 공부하기","CSS 초보"],"categories":["가이드","CSS"],"createdAt":1619949180000,"updatedAt":1619949180000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"slug":"2021-05-02-03-complete-css-guide","fullPath":"/post/2021-05-02-03-complete-css-guide","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<Message color='yellow'>\r\n  <p>웹 개발을 위한 CSS 가이드는 HTML에 대한 기초적인 지식을 필요로 합니다. <A type='blog' href='/post/2021-05-02-01-complete-html-guide'>이 링크</A>를 통해서 학습하시고 이 가이드를 학습하기를 권장드립니다.</p>\r\n</Message>\r\n\r\n이 글은 **웹 개발을 위한 CSS 가이드** 시리즈를 모아두는 것을 목적으로 하는 글입니다. CSS 가이드는 HTML 가이드에 이어서 웹 개발에 입문하는 분들을 위해 만들어진 두번째 가이드 시리즈 모음 입니다. 웹 개발을 위한 CSS 가이드는 CSS를 통해서 HTML의 스타일을 추가하고 자유롭게 디자인할 수 있도록 도와주고 원하는 웹사이트를 만들 수 있도록 도와주는 시리즈 입니다.\r\n\r\n순수한 강의 목적인 것만은 아니며 스스로 복습하는 느낌으로 글을 작성하고 있습니다. 글이 작성되면 이 페이지에도 업데이트가 됩니다. 현재는 글들을 옮기는 중이기 때문에 아직은 준비되어 있지 않습니다.\r\n","date":{"year":"2021","month":"05","yearMonth":"2021-05"}},"next":{"frontMatter":{"id":6,"title":"개발을 위한 프로그래밍 지식 2편 - 프로그램과 프로그래밍 언어","description":"이번 글은 개발을 위한 프로그래밍 지식 2편입니다. 저번 글에서는 컴퓨터에 대한 역사를 알아봤습니다. 이번 글에서는 프로그램과 프로그래밍 언어에 대해 알아보려고 합니다. 저번 글처럼 긴 글이 될 것 같지는 않습니다. 컴퓨터의 등장으로 인해서 인류는 복잡한 계산을 기계에게 시켜 편해질 수 있었습니다. 기계들은 인간보다 빠르게 어려운 계산도 해내며 지치지도 않고 투정을 부리지도 않습니다. 그저 인간이 의도한대로 움직이는 게 컴퓨터의 역할이죠. 하지만 말이죠 컴퓨터는 단순히 계산을 목적으로 하는 기계에서 좀 더 다양한 기능을 갖게 되었습니다. 컴퓨터는 어떻게 변해온 것일까요.","coverImage":"https://drive.google.com/uc?export=view&id=1vvpHXhWnbcGDNVEfdtWfbBvql0epGxG1","tags":["프로그래밍","컴퓨터","프로그래밍 언어","프로그램"],"categories":["프로그래밍"],"createdAt":1620002700000,"updatedAt":1635571680000,"keywords":[],"drawDate":1620002700000,"display":true,"type":"post"},"slug":"2021-05-03-02-program-and-programming","fullPath":"/post/2021-05-03-02-program-and-programming","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd, ProgrammingGuideMessage\r\n} from '@/components/Post';\r\n\r\n<ProgrammingGuideMessage />\r\n\r\n이번 글은 개발을 위한 프로그래밍 지식 2편입니다. 저번 글에서는 컴퓨터에 대한 역사를 알아봤습니다. 이번 글에서는 프로그램과 프로그래밍 언어에 대해 알아보려고 합니다. 저번 글처럼 긴 글이 될 것 같지는 않습니다.\r\n\r\n# 프로그램\r\n**컴퓨터의 등장**으로 인해서 **인류는 복잡한 계산을 기계에게 시켜** 편해질 수 있었습니다. 기계들은 인간보다 빠르게 어려운 계산도 해내며 지치지도 않고 투정을 부리지도 않습니다. 그저 인간이 의도한대로 움직이는 게 컴퓨터의 역할이죠. 컴퓨터는 단순히 계산을 목적으로 하는 기계에서 좀 더 다양한 기능을 갖게 되었습니다. 오늘날의 컴퓨터는 영상도 재생하고 심지어 그 영상을 만들 수도 있죠.\r\n\r\n지금 하고자 하는 말은 컴퓨터 안에 어떠한 것들이 있길래 이 컴퓨터들이 임무를 수행할 수 있냐는 것입니다. **기계는 스스로 생각을 할 수가 없습니다.** 반드시 누군가 뭘 해야 하는지 알려줘야 합니다. 그래서 컴퓨터에는 컴퓨터가 수행해야 할 목록들이 입력되어 있습니다. 입력된 내용에 따라 임무를 수행하죠.\r\n\r\n**프로그램**이란 바로 그러한 목록을 말합니다. 프로그램은 특정한 알고리즘을 갖고 있으며, 그 알고리즘에 따라 움직입니다. 사용자가 무엇을 하면 프로그램은 무엇을 해야하는지에 대한 명령들의 모음이 프로그램이라고 할 수 있습니다.\r\n\r\n<P>말이 어려운데 키보드 <Kbd>A</Kbd>를 <Strong>누를 경우에 컴퓨터는 어떠한 동작을 하게끔</Strong> 되어 있는 것. 이 프로그램입니다.</P>\r\n\r\n![OS도 프로그램이다.](https://drive.google.com/uc?export=view&id=1EddEJ4oXMRa5-AYBDi-Y_O-Ts0lPcri4)\r\n\r\n예를 더 들어보면, **컴퓨터의 OS**는 하나의 프로그램입니다. 어마어마하게 큰 프로그램이죠. **명령 프롬프트**나 **웹 브라우저**들도 프로그램입니다. 프로그램 안에 프로그램이 있는 셈이죠. 이렇게 **사용자의 입력을 받으면 특정한 반응을 하게 되어있는** 명령의 집합이 프로그램입니다.\r\n\r\n컴퓨터에는 OS라는 프로그램이 있어서 사용자의 편의를 봐줄 수가 있는 것이죠. 메모를 해야 할 때면 메모장이 도와주고, 이미지를 봐야 할 때면 이미지 뷰어가 도와주는 겁니다.\r\n\r\n## 프로그래밍과 프로그래머\r\n프로그램을 만드는 행위를 **프로그래밍**이라고 합니다. 프로그램은 간단하거나 복잡한 어떠한 알고리즘을 적용해서 만들게 됩니다. 이런 일을 하는 사람들을 **프로그래머**라고 부르고 더 포괄적인 의미로는 개발자라고 부릅니다. 프로그래머들은 어떠한 무언가에 대해서 구조적으로 접근하고 그 무언가의 여러가지 측면을 생각할 수 있어야 합니다.\r\n\r\n프로그래머가 프로그래밍을 통해 만드는 프로그램도 결국 사용자의 명령을 받아 그 명령에 따른 어떠한 반응을 하게끔 설정한 명령들의 집합체입니다. 하지만 굳이 명령어들의 집합체일 필요는 없고 그냥 명령어가 하나만 있고, 그 명령어를 실행하는 도구를 만들더라도 그것은 프로그램입니다.\r\n\r\n우리는 개발을 위해 공부를 하고 있으니까 정확히는 프로그래머가 되는 것이 목적입니다.\r\n\r\n## 프로그래밍 언어\r\n![다양한 프로그래밍 언어가 있다.](https://drive.google.com/uc?export=view&id=1WEGirmiDkBI1VDqlG3KxNmgKb4Of7Dq9)\r\n\r\n프로그래머들이 **컴퓨터와 대화를 하기 위해** 존재하는 것이 **프로그래밍 언어**입니다. 프로그래밍 언어는 **컴퓨터가 이해할 수 있고 사람도 이해할 수 있는 언어**이고, 일종의 약속입니다. 프로그래머들은 프로그래밍 언어를 통해서 프로그래밍을 이루어냅니다. 프로그래밍은 코드를 작성한다는 의미에서 **코딩**이라고도 부릅니다.\r\n\r\n대화라는 표현 보다는 **명령**이라고 표현하는 게 더 적당할 것 같네요. 프로그래머는 프로그램을 통해 컴퓨터에게 명령을 내리는 사람인 것이고, **프로그래밍 언어는 명령을 내리기 위해 존재**하는 컴퓨터가 이해가 가능한 언어인 것입니다.\r\n\r\n프로그래밍 언어는 아주 다양하게 많습니다. 많이 쓰이는 인기가 많은 언어도 있고 인기가 없는 언어도 있습니다. 프로그래밍의 세계는 트렌드가 존재하고 프로그래머들은 이 트렌드를 따라가는 게 보통입니다. 그래서 언어의 인기는 영구적이지 않고 상황에 따라 변합니다.\r\n\r\n널리 알려져 있는 프로그래밍 언어는 다음과 같습니다. 사실은 더 많은데 유명하고 당장 생각나는 것만 넣어봤습니다.\r\n\r\n* 자바\r\n* C / C++ / C#\r\n* 파이썬\r\n* 자바스크립트\r\n* 코틀린\r\n* Go\r\n\r\n# 프로그램의 목적\r\n그렇다면 프로그램이 존재하는 이유는 무엇일까요. 간단합니다. **인간의 반복 작업을 최소화하고 편리함을 얻기 위함**입니다. 어려운 일, 복잡한 일은 컴퓨터에게 맡기고 인간은 다른 일에 몰두할 수 있게 만드는 겁니다. 그래서 세상에는 정말 다양한 프로그램들이 많이 존재합니다. 사람들이 어떤 불편함을 겪고있는지를 고려해서 특정한 사람들을 위한 프로그램을 제작하는 사람들도 있을 정도입니다. 프로그래머들은 이런 선구안을 가진다면 더 뛰어난 프로그래머가 될 수도 있습니다.\r\n\r\n계산기로써의 측면이 강했던 과거의 컴퓨터들이 이러한 과정으로 인해 탄생했던 것입니다. 현재도 다양한 프로그램이 탄생했다가 사라졌다가를 반복하고 있습니다.\r\n\r\n# 소프트웨어\r\n소프트웨어는 같은 걸로 취급되는 경우가 많은데 사실은 **소프트웨어가 더 상위의 개념**입니다. 소프트웨어는 프로그램과 데이터로 구성됩니다. 소프트웨어에서 프로그램은 명령에 따라 동작하는 부분이고, 데이터는 프로그램에 사용되는 파일이나 프로그램의 동작에 의해 출력된 파일등을 말합니다.\r\n\r\n데이터인 동시에 프로그램인 경우도 있는데 바로 프로그래머가 작성한 코드 파일입니다. 이는 파일 자체가 프로그램의 기능을 할 수 있기 때문에 데이터이기도 하고 프로그램이기도 합니다. 참 복잡한 이야기입니다.\r\n\r\n<Line />\r\n\r\n프로그램에 대한 이야기는 이정도면 충분한 것 같습니다. 사실은 더 깊게 들어갈 수도 있는데 그것은 나중에 기회가 되면 다뤄보도록 하겠습니다. 이번 글에서는 프로그램과 프로그래밍 언어에 대해서 알아봤습니다. 다음 글에서는 **프로그래밍 언어의 역사**에 대해서 알아볼까 합니다. 프로그래밍의 역사가 작성되면 웹에 대한 내용을 작성할 예정입니다.\r\n","date":{"year":"2021","month":"05","yearMonth":"2021-05"}}},"__N_SSG":true}