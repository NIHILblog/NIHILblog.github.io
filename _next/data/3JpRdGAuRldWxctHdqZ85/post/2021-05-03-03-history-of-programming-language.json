{"pageProps":{"post":{"frontMatter":{"id":7,"title":"개발을 위한 프로그래밍 지식 3편 - 프로그래밍 언어의 역사","description":"이번 글은 개발을 위한 프로그래밍 지식 3편입니다. 프로그래밍 언어 자체에 대해서는 저번 글에서 이미 이야기를 했으니까 이번 글에서는 프로그래밍 언어의 역사에 대해 알아봅시다. 저번 글은 프로그램과 프로그래밍 언어 이 링크를 참고하시면 됩니다. 그럼 바로 본론으로 들어갑시다! 20세기 중반에 컴퓨터가 등장함에 따라 프로그래밍도 같이 시작되었다고 할 수 있습니다. 초창기 컴퓨터라고 할 수 있는 에니악과 그 비슷한 시기의 컴퓨터들은 오로지 계산을 위해서 존재했고 원하는 결과를 얻기 위해서는 긴 작업을 필요로 했습니다. 에니악의 경우에는 프로그래밍 언어가 아닌 천공 카드와 배선판을 이용해 프로그램을 실행했습니다. 이는 매우 불편한 작업이었고 심지어는 프로그램을 바꾸려면 배선판을 전부 손봐야했습니다. 이러한 문제점을 개선한 것이 바로 에드박과 에드삭 같은 컴퓨터들이었고, 실질적인 프로그래밍의 영역은 이 때부터 시작됩니다.","coverImage":"https://drive.google.com/uc?export=view&id=16eyya_udXhOZIl0QgT20we5lanvlasvh","tags":["프로그래밍","컴퓨터","프로그래밍 언어","프로그램"],"categories":["프로그래밍"],"createdAt":1620012600000,"updatedAt":1635571680000,"keywords":[],"drawDate":1620012600000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h1: \"h1\",\n      strong: \"strong\",\n      h2: \"h2\",\n      img: \"img\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\"\n    }, _provideComponents(), props.components), {ProgrammingGuideMessage, P, Strong, Gray, NoteTop, Line, NoteBottom} = _components;\n    if (!Gray) _missingMdxReference(\"Gray\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!NoteBottom) _missingMdxReference(\"NoteBottom\", true);\n    if (!NoteTop) _missingMdxReference(\"NoteTop\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!ProgrammingGuideMessage) _missingMdxReference(\"ProgrammingGuideMessage\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(ProgrammingGuideMessage, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글은 개발을 위한 프로그래밍 지식 3편입니다. 프로그래밍 언어 자체에 대해서는 저번 글에서 이미 이야기를 했으니까 이번 글에서는 프로그래밍 언어의 역사에 대해 알아봅시다. 저번 글은 \", _jsx(_components.a, {\n          href: \"/post/2021-05-03-02-program-and-programming\",\n          children: \"프로그램과 프로그래밍 언어\"\n        }), \" 이 링크를 참고하시면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그럼 바로 본론으로 들어갑시다!\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"프로그래밍-언어가-등장하기-이전\",\n        children: \"프로그래밍 언어가 등장하기 이전\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"20세기 중반에 \", _jsx(_components.strong, {\n          children: \"컴퓨터가 등장함에 따라 프로그래밍도 같이 시작\"\n        }), \"되었다고 할 수 있습니다. 초창기 컴퓨터라고 할 수 있는 에니악과 그 비슷한 시기의 컴퓨터들은 오로지 계산을 위해서 존재했고 원하는 결과를 얻기 위해서는 긴 작업을 필요로 했습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"에니악\"\n        }), \"의 경우에는 프로그래밍 언어가 아닌 천공 카드와 배선판을 이용해 프로그램을 실행했습니다. 이는 매우 불편한 작업이었고 심지어는 프로그램을 바꾸려면 배선판을 전부 손봐야했습니다. 이러한 문제점을 개선한 것이 바로 에드박과 에드삭 같은 컴퓨터들이었고, 실질적인 프로그래밍의 영역은 이 때부터 시작됩니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"전쟁과-프로그래밍\",\n        children: \"전쟁과 프로그래밍\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"사실 제가 혼자 공부해본 바에 따르면 이 이전에도 프로그래밍 언어는 존재했고 \", _jsx(_components.strong, {\n          children: \"컴퓨터가 개발되기 이전\"\n        }), \"에도 \", _jsx(_components.strong, {\n          children: \"프로그램은 존재\"\n        }), \"했으나 그건 중요하지 않습니다. 중요한건 프로그래밍 언어들이 등장하기 시작했을 무렵부터 세계에 변화가 시작되었다는 것이죠.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"처음 프로그래밍 언어가 등장했을 시기는 전쟁이 활발하거나 군사력 관련해서 나라들이 서로 경쟁을 하던 때였습니다. 그렇기에 \", _jsx(_components.strong, {\n          children: \"컴퓨터는 군사용, 군사와 관련된 과학 연구\"\n        }), \"에 쓰였습니다. \", _jsx(_components.strong, {\n          children: \"에니악만 해도 군사용\"\n        }), \"으로 쓰였기 때문에 전쟁이 끝난 얼마 뒤의 시대도 이는 별반 다르지 않았습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"지금 생각해보면 \", _jsx(_components.strong, {\n          children: \"인류의 발전은 전쟁으로 인해 촉진\"\n        }), \"되었습니다. 일상에서도 사용되는 기술들은 대부분 전쟁을 할 때에 전쟁을 목적으로 만들어졌던 것을 생각해보면 이는 상당히 흥미로운 측면입니다. 프로그래밍 언어도 그러했습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"기계어machine-code\",\n        children: \"기계어(Machine Code)\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1eHAiuQJ785ki6lduCD4FwD-V9XEFqs3G\",\n        alt: \"기계어의 예\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"컴퓨터를 사용하기 위해서는 컴퓨터가 알아먹을 수 있는 체계를 필요로 했고 이 때 처음으로 \", _jsx(Strong, {\n          children: \"기계어(Machine Code)\"\n        }), \"라는 프로그래밍 언어가 나타나게 됩니다. 기계어는 \", _jsx(Strong, {\n          children: \"0과 1이라는 비트 단위의 두 숫자\"\n        }), _jsx(Gray, {\n          children: \"(엄밀히는 숫자는 아닙니다.)\"\n        }), \"를 이용한 언어였습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"어셈블리어assembly-language\",\n        children: \"어셈블리어(Assembly language)\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=11vQlybEp2O-cNn685TOQ4mqhB5n7psfb\",\n        alt: \"우측이 어셈블리어다. 정말 괴랄한 모양을 갖고 있다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이 기계어는 0과 1만으로 모든 내용을 채우니까 그 가독성이 참 개떡같았을 겁니다. 그 당시의 사람들도 이 이진수 모스부호를 사용하는 게 불편하다는 것을 알고 있었고 이를 개선한 것이 바로 **어셈블리어(Assembly language)**였습니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"전쟁이 끝난 뒤에는 어셈블리어로 프로그래밍을 했는데 이 어셈블리어는 \", _jsx(_components.strong, {\n          children: \"복잡한 기계어를 조금 더 사람이 알아볼 수 있게 만든 프로그래밍 언어\"\n        }), \"였습니다. 컴퓨터는 여전히 숫자만을 알아먹었습니다. 그렇기 때문에 어셈블리어로 프로그래밍을 해도, 이를 \", _jsx(_components.strong, {\n          children: \"기계어로 바꿔주는 과정\"\n        }), \"이 필요했습니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [_jsx(Strong, {\n          children: \"어셈블리어를 기계어로 바꾸는 과정을 컴파일\"\n        }), _jsx(NoteTop, {\n          number: \"1\"\n        }), \"이라고 합니다. 어셈블리어는 프로그래밍을 조금 더 편하게 만들어주는 요소였던 것이지 기계어를 대체하는 것은 아니었던 것이죠. 어셈블리어는 기계어에 1:1로 대응이 가능하게끔 만들어져 있습니다. 또한 기계어와 어셈블리어는 모두 저급 언어\", _jsx(NoteTop, {\n          number: \"2\"\n        }), \"라고 불립니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 이후의 모든 프로그래밍 언어들은 어떤 과정을 거치든 \", _jsx(_components.strong, {\n          children: \"기계어로 컴파일하는 것이 최종 목적\"\n        }), \"입니다. 즉, 기계어는 컴퓨터가 알아먹을 수 있는 유일한 수단이라는 것입니다. 지금도 기계어는 여러 프로그램의 내부적인 순환에 쓰인다는 겁니다. 프로그래밍 언어는 결국 어떤 언어가 보기 좋은가? 어떻게 효율적으로 프로그래밍이 가능한가? 를 기준으로 발전합니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"포트란fortran\",\n        children: \"포트란(FORTRAN)\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1hCVaLgMX3kihV0FD3saIm5vUGYcJXBky\",\n        alt: \"포트란의 대략적인 모습\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"어셈블리어는 기계어를 보기 좋게 만든 것이지만 그래도 어려웠던 것은 달라지지 않기 때문에 여전히 불편했습니다. 1954년 정도에 **포트란(FORTRAN)**이라는 프로그래밍 언어가 등장합니다. 이는 최초로 만들어진 \", _jsx(_components.strong, {\n          children: \"고급 언어\"\n        }), \"였습니다. 고급 언어는 저급 언어와는 반대로 컴퓨터보다는 인간의 언어와 좀 더 비슷하다는 의미로 사용됩니다. 고급 언어들은 컴파일이라는 작업을 필요로 합니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"포트란은 \", _jsx(_components.strong, {\n          children: \"FORmula TRANslator\"\n        }), \"의 약자였는데, 철저하게 과학 기술 계산을 위한 용도로 개발된 언어였습니다. 그렇기 때문에 수식에 특화되어있었고 수식에 한해서는 상당한 기능을 자랑합니다. 컴퓨터가 등장한 초창기 시대까지만 해도 \", _jsx(_components.strong, {\n          children: \"컴퓨터의 용도는 군사 기술과 연관이 깊었습니다.\"\n        }), \" 포트란도 그런 부분을 위해 개발이 되었다고 이해하면 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이때 만들어진 포트란은 \", _jsx(_components.strong, {\n          children: \"지금도 쓰입니다.\"\n        }), \" 과학이나 수학과 관련된 수식에 대해서는 어마어마한 기능을 자랑하기 때문이죠. 물론 저는 문외한이라 어디서 쓰는지는 잘 모르겠습니다만은 확실한건 포트란은 계속해서 버전을 올려왔고 지금도 쓰고 있다는 겁니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"많은 양의 계산을 할 때에 특화\"\n        }), \"되어있는 언어이기 때문에 \", _jsx(_components.strong, {\n          children: \"지금도 현역\"\n        }), \"으로 쓰이지만, 포트란의 문법은 계속 발전하고 있어서 위 이미지와 다를 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"민간으로-뻗어나가는-프로그래밍-언어\",\n        children: \"민간으로 뻗어나가는 프로그래밍 언어\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이때부터는 단순히 전쟁이나 군사와 관련된 용도뿐만 아니라 여러 기업에서도 사용될 수 있는 프로그래밍 언어가 등장하기 시작합니다. 이제 민간으로 뻗어나가기 시작한 것이죠. 단순 수학, 과학적인 계산을 넘어서 여러 비즈니스에 쓰일 수 있는 프로그래밍 언어들이 나타나기 시작하죠.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"코볼cobol\",\n        children: \"코볼(COBOL)\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=11_T2-5KV0La7LHop-RLb1YqL-eOgMPz_\",\n        alt: \"코볼의 모습\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1959년 정도에 코볼이라는 언어가 그 시작이었습니다. **코볼(COBOL)**은 \", _jsx(_components.strong, {\n          children: \"COmmon Business-Oriented Language\"\n        }), \"의 약자로 코볼의 등장은 이제는 프로그래밍이 복잡한 군사용이나 과학계산 같은 게 아니라 \", _jsx(_components.strong, {\n          children: \"기업들의 입장에서 회계를 위해 사용을 하면 편해지지 않을까\"\n        }), \"라는 발상으로 이루어집니다. 사실상 보다 \", _jsx(_components.strong, {\n          children: \"포괄적인 데이터 처리를 위해서 개발된 게 코볼\"\n        }), \"입니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"포트란은 고차원적인 과학 계산\"\n        }), \"을 위한 것이기 때문에 단순히 \", _jsx(_components.strong, {\n          children: \"숫자를 더하고 빼고 곱하고 나누는 등의 간단한 계산에는 적합하지가 않았\"\n        }), \"습니다. 그래서 그것을 기업에서 쓰기엔 문제가 좀 있었기 때문에 데이터를 실제로 처리하기도 하는 코볼이 개발되었습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"당시 많은 데이터를 처리하거나 회계 등의 계산을 필요로 했을 때 기업들이 사용한 컴퓨터는 \", _jsx(_components.strong, {\n          children: \"메인프레임이라고 부르는 대형 컴퓨터\"\n        }), \"였는데, 이 컴퓨터에 코볼이 쓰였습니다. 유지보수가 상당해서 21세기 초반까지 사용되기도 했습니다. \", _jsx(_components.strong, {\n          children: \"업계 1위\"\n        }), \"의 언어였습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그런데 문제는 코볼의 내부적인 요인으로 인해서 \", _jsx(_components.strong, {\n          children: \"큰 버그\"\n        }), \"가 발생하게 됩니다. 그게 바로 \", _jsx(_components.strong, {\n          children: \"Y2K 문제\"\n        }), \"입니다. 20세기 후반의 기업들은 연도를 표기할 때에 앞의 두자리는 제외하고 뒤의 두 자리만 사용하는 게 관행이었습니다. 그러니까 \", _jsx(_components.strong, {\n          children: \"1974라면 74\"\n        }), \"만 사용하고, 저장을 했죠. 그럼 어떤 문제가 생길까요? \", _jsx(_components.strong, {\n          children: \"1999년에서 2000으로 넘어갈 때\"\n        }), \"에 문제가 발생하게 됩니다. 99가 00이 되니까요.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"아니나 다를까 어마어마한 문제들이 발생하게 됩니다. 그리고 이런 대란으로 인해서 기업들은 표기 방식을 바꿔야했고, 그동안 회의적이었던 언어의 교체에 대한 이야기들이 다시금 나오기 시작합니다. 여러 이야기의 끝에 선택된 것은 바로 **자바(JAVA)**였습니다. 빠르면 2000년, 적어도 늦게는 2010년 이후에는 자바가 업계의 1위를 차지하게 됩니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"자바는 \", _jsx(_components.strong, {\n          children: \"1995년\"\n        }), \"에 처음 개발되었습니다. 즉 이 이야기는 좀 나중의 일이라는 것이죠.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"c-언어\",\n        children: \"C 언어\"\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-c\",\n        children: _jsxs(_components.code, {\n          className: \"language-c code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token macro property\",\n              children: [_jsx(_components.span, {\n                className: \"token directive-hash\",\n                children: \"#\"\n              }), _jsx(_components.span, {\n                className: \"token directive keyword\",\n                children: \"include\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token string\",\n                children: \"<stdio.h>\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"int\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"main\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"int\"\n            }), \" argc\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"char\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"*\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"*\"\n            }), \" argv\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"printf\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"Hello world\\\\n\\\"\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1972년에 벨 연구소에서 데니스 리치라는 사람이 개발한 언어가 바로 \", _jsx(_components.strong, {\n          children: \"C 언어\"\n        }), \"였습니다. 지금도 상당히 많이 쓰이고 있는 언어의 이름이죠. 이 C언어에 대한 이야기를 하기 위해서는 그 전에 다른 이야기들을 먼저 해야합니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"유닉스의-등장\",\n        children: \"유닉스의 등장\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1960년대 말에 \", _jsx(_components.strong, {\n          children: \"멀틱스\"\n        }), \"라는 운영체제 개발에 참여하고 있던 \", _jsx(_components.strong, {\n          children: \"켄 톰슨\"\n        }), \"은 멀틱스를 이용해서 어떤 게임을 즐기고 있었습니다. 그런데 멀틱스를 더 이상 쓰지 않는 상황에 도달했고 이 사람은 자신이 만든 이 게임을 하기 위해서 작은 컴퓨터를 하나 구비했고 게임을 돌리기 위한 운영체제를 만들어야 했습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그렇게 만들어진 운영체제의 이름은 바로 \", _jsx(_components.strong, {\n          children: \"유닉스\"\n        }), \"입니다. \", _jsx(_components.strong, {\n          children: \"멀틱스는 메인프레임용\"\n        }), \"으로 개발이 되었고 \", _jsx(_components.strong, {\n          children: \"유닉스는 개인 컴퓨터\"\n        }), \"의 시작점이나 마찬가지인 의미를 갖습니다. 처음의 유닉스는 어셈블리어로 만들어졌습니다. 고급 언어로 만들어서 컴파일을 하는 건 효율이 없었기 때문이라고 합니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"훗날 코볼이 자바에게 자리를 빼앗길 때, 유닉스는 메인 프레임의 자리를 빼앗는 경지에 이르게 됩니다. 아무튼, 어셈블리어로 만들어진 유닉스는 나중에 \", _jsx(_components.strong, {\n          children: \"C 언어로 다시 프로그래밍되어 탄생\"\n        }), \"합니다. 이렇게 만들어진 유닉스는 최종적으로 벨 연구소의 산물이 되었습니다. C 언어는 유닉스를 위한 프로그래밍 언어였습니다. 지금이야 널리 쓰이지만 말이죠.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"유닉스와 C 언어는 무료로 공개되었고 대학 등에서 널리 사용이 되었습니다. 사실상 유닉스와 C 언어로 인해서 일반인들도 컴퓨터를 더 많이 접하게 되었습니다. 또한 이후의 \", _jsx(_components.strong, {\n          children: \"운영체제들은 C 언어로 개발되는 상황\"\n        }), \"에 놓이게 됩니다. 이 C 언어가 상당히 효과적이라는 것을 알 수 있는 부분입니다. 지금도 많이들 사용하고 있으니까요.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"여러 대학에서는 유닉스와 C 언어를 가르쳐서 많은 기술자들을 만들어냅니다.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"c\",\n        children: \"C++\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1FVX6_TmRIaNdGi2blJgk18Lh6xI8KSO2\",\n        alt: \"C++의 로고\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"1985년에는 C 언어에 객체지향을 첨가한 **C++**가 등장합니다. C 언어에 이어서 익숙한 이름이 등장을 하죠. **비아르네 스트로우스트루프(Bjarne Stroustrup)**라는 사람이 개발했고 C 언어를 발전시켰기 때문에 더 강력했습니다. 하지만 처음 나왔을 때엔 인기가 별로 없었습니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"객체지향이라는 개념 자체는 과거에도 있었지만 인기가 없어서 잘 쓰이지 않았습니다. 그래서 C++도 그닥 큰 인상을 주지 못했던 것이 있는 듯합니다. 시대가 흐르면서 프로그래밍의 세계는 점점 복잡해져갔습니다. 기술이 발전해가니까 발상이 새롭게 생겨나는 건 당연하기 때문입니다. 유지보수에 대한 문제들이 점점 나타나기 시작했고 \", _jsx(_components.strong, {\n          children: \"1990년대에 들어서 C++은 빛을 보기 시작\"\n        }), \"합니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"프로그래밍의 세계에서 유지보수가 편한 프로그래밍 언어가 선택되는 것은 자연스러운 현상입니다. 그렇기 때문에 객체지향 프로그래밍이 빛을 보게 된 것입니다. 왜 그런 것인가에 대해서는 앞으로 여러분이 프로그래밍을 더 공부하다보면 알게 될 겁니다. 뭐 아무튼 C++는 컴퓨터의 주류 운영체제가 \", _jsx(_components.strong, {\n          children: \"윈도우\"\n        }), \"가 되기 시작했을 무렵부터 더욱 더 빛을 발하기 시작했습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"90년대 당시에 윈도우가 개발되면서 \", _jsx(_components.strong, {\n          children: \"GUI\"\n        }), \"가 더욱 활발하게 개발이 시작되었고 이 개발에 어려움이 있었지만 윈도우를 만든 언어가 C 언어였기 때문에 \", _jsx(_components.strong, {\n          children: \"C 언어와 호환이 되는 C++은 좋은 대안\"\n        }), \"이 될 수 있었습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"지금도 소프트웨어의 개발에 있어서는 C와 C++이 압도적입니다. 최근 2021년 6월에 공개되었던 \", _jsx(_components.strong, {\n          children: \"윈도우 11도 여전히 C와 C++로\"\n        }), \" 개발이 되었으니까요.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"자바java\",\n        children: \"자바(JAVA)\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1qScgOsAQ07Dv_OaS47p9bsuAkuFmNv7r\",\n        alt: \"자바의 로고\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"1995년에 개발된 자바는 C++가 복잡하다는 이유로 개발이 되었습니다. 자바를 만든 사람은 **썬 마이크로시스템즈(이하 썬)**의 \", _jsx(_components.strong, {\n          children: \"제임스 고슬링\"\n        }), \"이라는 사람입니다. 자바는 프로그래밍 언어였지만 PC에서 쓸 목적으로 개발된 것은 아니었습니다. 가전제품에 들어갈 프로그램에 쓸 언어였는데, 원래는 C++을 넣으려고 했습니다. 하지만 복잡하다는 이유로 자바가 탄생하게 되었습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그런데 어쩌다보니 코볼을 대체하는 프로그래밍 언어의 위치에 올랐고 정보를 처리하는 언어 중에서 1순위는 단연 자바가 되었습니다. 자바는 지금도 다양하게 사용되고 있습니다. 본래 웹에 쓰일 용도는 아니었지만 웹 프레임워크도 존재하고 윈도우에서 돌아가는 여러가지 소프트웨어도 만들 수 있습니다. 심지어는 게임도 만들 수 있죠. 물론 게임 개발은 위의 두 언어도 가능합니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"자바는 상당히 인기가 있었는데 그 인기 때문이었는지 \", _jsx(_components.strong, {\n          children: \"오라클\"\n        }), \"이 2010년에 \", _jsx(_components.strong, {\n          children: \"썬을 인수\"\n        }), \"하게 됩니다. 그래서 자바도 자연스럽게 오라클의 손으로 넘어가죠. 그 이전에는 \", _jsx(_components.strong, {\n          children: \"윈도우를 만든 마이크로소프트\"\n        }), \"에서도 자바에 관심을 보였습니다. \", _jsx(_components.strong, {\n          children: \"썬에서 개발한 JVM\"\n        }), \"에 자신들의 독자적인 기능을 넣다가 소송을 당하기까지 하죠. 그러다가 마이크로소프트에서 탄생한 게 **C#**입니다. 자바와 C++에 큰 영향을 받았죠.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"자바스크립트\",\n        children: \"자바스크립트\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1WU_pZpMVRLE5-VVE6l0CluqTdbcgicBq\",\n        alt: \"자바스크립트의 로고 (가운데)\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"자바와 마찬가지로 1995년에 최초로 개발된 자바스크립트는 원래 \", _jsx(_components.strong, {\n          children: \"라이브스크립트라는 이름\"\n        }), \"으로 개발이 되었습니다. 그런데 자바가 잘 나가니까 그 인기에 숟가락을 좀 얹으려고 자바스크립트라는 이름으로 바꾸게 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"자바스크립트는 본래 \", _jsx(_components.strong, {\n          children: \"웹 서버\"\n        }), \"에서 사용될 언어였습니다. 웹서버를 처음으로 만든 기업은 \", _jsx(_components.strong, {\n          children: \"넷스케이프\"\n        }), \"라는 곳입니다. 그 곳에서 자바스크립트를 사용하려고 했는데.. 그닥 효율은 좋지 않았는지 사용되지 않았고 웹 브라우저에 내장되는 신세로 전락하고 맙니다. 그런데 이것이 신의 한수였죠.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"당시 \", _jsx(_components.strong, {\n          children: \"플래시\"\n        }), \"라는 기술이 있었습니다. 애니메이션을 통해서 웹을 구성할 수 있었죠. 플래시는 웹에서 동적인 제어를 하는 유일한 시스템이었습니다. 하지만 \", _jsx(_components.strong, {\n          children: \"보안상의 문제\"\n        }), \"로 플래시는 몇년 전에 나가리되었습니다. 그 자리를 자바스크립트가 차지하게 되었죠. 자바스크립트는 현재 상당히 거대해졌습니다. 웹을 이루는 세가지의 요소인 HTML, CSS, JS로 불림과 동시에 자바스크립트는 단순히 웹에서 돌아가기만 하는 언어는 아니게 되었으니 말입니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"지금은 \", _jsx(_components.strong, {\n          children: \"자바스크립트로 PC 프로그램을 프로그래밍\"\n        }), \"할 수도 있게 되었습니다. 사실상 자바스크립트의 기술이 강력해짐에 따라 웹의 환경이 점점 발전하고 있죠. 웹에서 노래를 듣고 이미지를 편집하거나 영상을 제작하기도 합니다. 웹 프로그래밍에서 가장 중요한 기술이기도 합니다. 인기가 없었지만 이제는 인기가 아주 많은 언어가 되었고 웹 프로그래밍의 세계가 급변하기 때문에 정말 다양한 오픈소스들이 나타나고 있습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"자바스크립트의 장점은 오픈소스라는 점이고 관련 기술이 빠르게 등장한다는 것입니다. 하지만 단점은 마찬가지로 기술이 빠르게 등장하기 때문에 트렌드가 급변한다는 것이죠. 뭐 그럼에도 자바스크립트는 아직 잘 살아있습니다. 웹 프로그래밍을 할 때에 백엔드를 자바로 할지언정 프론트는 자바스크립트를 택하는 경우가 많습니다.\"\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"여기까지가 대략적인 프로그래밍 언어의 역사의 흐름입니다. 이외에도 \", _jsx(_components.strong, {\n          children: \"다른 자잘한 언어들은 많습니다.\"\n        }), \" 당장에 \", _jsx(_components.strong, {\n          children: \"파이썬\"\n        }), \" 같은 것들이 있죠. 하지만 프로그래밍 언어 세계에서의 큼지막한 맥들은 바로 위의 저것들입니다. 기계어부터 시작된 프로그래밍 언어들이 지금까지 다양한 언어를 만들어온 셈이죠. 앞으로도 프로그래밍 언어는 발전할 것이고 다양한 언어들이 생겨날 겁니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"자바스크립트는 사실 그다지 큰 맥을 차지하지는 않았는데 저기에 들어가 있는 이유는 요즘은 컴퓨터와 웹은 떼려야 뗄 수 없는 관계에 있고 웹이 발달함에 따라 자바스크립트가 큰 위상을 얻었기 때문입니다. 현대에 이르러서는 웹 프로그래밍도 어마어마한 위치를 갖기 때문이죠. 아무튼, 이번 글은 여기까지 입니다. 다음 글은 드디어 웹에 대한 이야기입니다.\"\n      }), \"\\n\", _jsx(NoteBottom, {\n        number: \"1\",\n        first: true,\n        children: \"보통은 컴파일이라고 부르지만 어셈블리어를 기계어로 바꾸는 과정은 너무나도 단순해서 이것을 담당하는 소프트웨어를 어셈블러라고 부른다.\"\n      }), \"\\n\", \"\\r\\n\", \"\\n\", _jsx(NoteBottom, {\n        number: \"2\",\n        children: \"형편이 없다거나 수준이 낮다는 의미가 아니라 Low Level 언어라는 의미로 기계어에 가까운 언어들을 말한다. 반대어는 고급 언어로 인간들이 이해할 수 있는 좀 더 간편한 언어들을 의미한다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-05-03-03-history-of-programming-language"},"prev":{"frontMatter":{"id":6,"title":"개발을 위한 프로그래밍 지식 2편 - 프로그램과 프로그래밍 언어","description":"이번 글은 개발을 위한 프로그래밍 지식 2편입니다. 저번 글에서는 컴퓨터에 대한 역사를 알아봤습니다. 이번 글에서는 프로그램과 프로그래밍 언어에 대해 알아보려고 합니다. 저번 글처럼 긴 글이 될 것 같지는 않습니다. 컴퓨터의 등장으로 인해서 인류는 복잡한 계산을 기계에게 시켜 편해질 수 있었습니다. 기계들은 인간보다 빠르게 어려운 계산도 해내며 지치지도 않고 투정을 부리지도 않습니다. 그저 인간이 의도한대로 움직이는 게 컴퓨터의 역할이죠. 하지만 말이죠 컴퓨터는 단순히 계산을 목적으로 하는 기계에서 좀 더 다양한 기능을 갖게 되었습니다. 컴퓨터는 어떻게 변해온 것일까요.","coverImage":"https://drive.google.com/uc?export=view&id=1vvpHXhWnbcGDNVEfdtWfbBvql0epGxG1","tags":["프로그래밍","컴퓨터","프로그래밍 언어","프로그램"],"categories":["프로그래밍"],"createdAt":1620002700000,"updatedAt":1635571680000,"keywords":[],"drawDate":1620002700000,"display":true,"type":"post"},"slug":"2021-05-03-02-program-and-programming","fullPath":"/post/2021-05-03-02-program-and-programming","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd, ProgrammingGuideMessage\r\n} from '@/components/Post';\r\n\r\n<ProgrammingGuideMessage />\r\n\r\n이번 글은 개발을 위한 프로그래밍 지식 2편입니다. 저번 글에서는 컴퓨터에 대한 역사를 알아봤습니다. 이번 글에서는 프로그램과 프로그래밍 언어에 대해 알아보려고 합니다. 저번 글처럼 긴 글이 될 것 같지는 않습니다.\r\n\r\n# 프로그램\r\n**컴퓨터의 등장**으로 인해서 **인류는 복잡한 계산을 기계에게 시켜** 편해질 수 있었습니다. 기계들은 인간보다 빠르게 어려운 계산도 해내며 지치지도 않고 투정을 부리지도 않습니다. 그저 인간이 의도한대로 움직이는 게 컴퓨터의 역할이죠. 컴퓨터는 단순히 계산을 목적으로 하는 기계에서 좀 더 다양한 기능을 갖게 되었습니다. 오늘날의 컴퓨터는 영상도 재생하고 심지어 그 영상을 만들 수도 있죠.\r\n\r\n지금 하고자 하는 말은 컴퓨터 안에 어떠한 것들이 있길래 이 컴퓨터들이 임무를 수행할 수 있냐는 것입니다. **기계는 스스로 생각을 할 수가 없습니다.** 반드시 누군가 뭘 해야 하는지 알려줘야 합니다. 그래서 컴퓨터에는 컴퓨터가 수행해야 할 목록들이 입력되어 있습니다. 입력된 내용에 따라 임무를 수행하죠.\r\n\r\n**프로그램**이란 바로 그러한 목록을 말합니다. 프로그램은 특정한 알고리즘을 갖고 있으며, 그 알고리즘에 따라 움직입니다. 사용자가 무엇을 하면 프로그램은 무엇을 해야하는지에 대한 명령들의 모음이 프로그램이라고 할 수 있습니다.\r\n\r\n<P>말이 어려운데 키보드 <Kbd>A</Kbd>를 <Strong>누를 경우에 컴퓨터는 어떠한 동작을 하게끔</Strong> 되어 있는 것. 이 프로그램입니다.</P>\r\n\r\n![OS도 프로그램이다.](https://drive.google.com/uc?export=view&id=1EddEJ4oXMRa5-AYBDi-Y_O-Ts0lPcri4)\r\n\r\n예를 더 들어보면, **컴퓨터의 OS**는 하나의 프로그램입니다. 어마어마하게 큰 프로그램이죠. **명령 프롬프트**나 **웹 브라우저**들도 프로그램입니다. 프로그램 안에 프로그램이 있는 셈이죠. 이렇게 **사용자의 입력을 받으면 특정한 반응을 하게 되어있는** 명령의 집합이 프로그램입니다.\r\n\r\n컴퓨터에는 OS라는 프로그램이 있어서 사용자의 편의를 봐줄 수가 있는 것이죠. 메모를 해야 할 때면 메모장이 도와주고, 이미지를 봐야 할 때면 이미지 뷰어가 도와주는 겁니다.\r\n\r\n## 프로그래밍과 프로그래머\r\n프로그램을 만드는 행위를 **프로그래밍**이라고 합니다. 프로그램은 간단하거나 복잡한 어떠한 알고리즘을 적용해서 만들게 됩니다. 이런 일을 하는 사람들을 **프로그래머**라고 부르고 더 포괄적인 의미로는 개발자라고 부릅니다. 프로그래머들은 어떠한 무언가에 대해서 구조적으로 접근하고 그 무언가의 여러가지 측면을 생각할 수 있어야 합니다.\r\n\r\n프로그래머가 프로그래밍을 통해 만드는 프로그램도 결국 사용자의 명령을 받아 그 명령에 따른 어떠한 반응을 하게끔 설정한 명령들의 집합체입니다. 하지만 굳이 명령어들의 집합체일 필요는 없고 그냥 명령어가 하나만 있고, 그 명령어를 실행하는 도구를 만들더라도 그것은 프로그램입니다.\r\n\r\n우리는 개발을 위해 공부를 하고 있으니까 정확히는 프로그래머가 되는 것이 목적입니다.\r\n\r\n## 프로그래밍 언어\r\n![다양한 프로그래밍 언어가 있다.](https://drive.google.com/uc?export=view&id=1WEGirmiDkBI1VDqlG3KxNmgKb4Of7Dq9)\r\n\r\n프로그래머들이 **컴퓨터와 대화를 하기 위해** 존재하는 것이 **프로그래밍 언어**입니다. 프로그래밍 언어는 **컴퓨터가 이해할 수 있고 사람도 이해할 수 있는 언어**이고, 일종의 약속입니다. 프로그래머들은 프로그래밍 언어를 통해서 프로그래밍을 이루어냅니다. 프로그래밍은 코드를 작성한다는 의미에서 **코딩**이라고도 부릅니다.\r\n\r\n대화라는 표현 보다는 **명령**이라고 표현하는 게 더 적당할 것 같네요. 프로그래머는 프로그램을 통해 컴퓨터에게 명령을 내리는 사람인 것이고, **프로그래밍 언어는 명령을 내리기 위해 존재**하는 컴퓨터가 이해가 가능한 언어인 것입니다.\r\n\r\n프로그래밍 언어는 아주 다양하게 많습니다. 많이 쓰이는 인기가 많은 언어도 있고 인기가 없는 언어도 있습니다. 프로그래밍의 세계는 트렌드가 존재하고 프로그래머들은 이 트렌드를 따라가는 게 보통입니다. 그래서 언어의 인기는 영구적이지 않고 상황에 따라 변합니다.\r\n\r\n널리 알려져 있는 프로그래밍 언어는 다음과 같습니다. 사실은 더 많은데 유명하고 당장 생각나는 것만 넣어봤습니다.\r\n\r\n* 자바\r\n* C / C++ / C#\r\n* 파이썬\r\n* 자바스크립트\r\n* 코틀린\r\n* Go\r\n\r\n# 프로그램의 목적\r\n그렇다면 프로그램이 존재하는 이유는 무엇일까요. 간단합니다. **인간의 반복 작업을 최소화하고 편리함을 얻기 위함**입니다. 어려운 일, 복잡한 일은 컴퓨터에게 맡기고 인간은 다른 일에 몰두할 수 있게 만드는 겁니다. 그래서 세상에는 정말 다양한 프로그램들이 많이 존재합니다. 사람들이 어떤 불편함을 겪고있는지를 고려해서 특정한 사람들을 위한 프로그램을 제작하는 사람들도 있을 정도입니다. 프로그래머들은 이런 선구안을 가진다면 더 뛰어난 프로그래머가 될 수도 있습니다.\r\n\r\n계산기로써의 측면이 강했던 과거의 컴퓨터들이 이러한 과정으로 인해 탄생했던 것입니다. 현재도 다양한 프로그램이 탄생했다가 사라졌다가를 반복하고 있습니다.\r\n\r\n# 소프트웨어\r\n소프트웨어는 같은 걸로 취급되는 경우가 많은데 사실은 **소프트웨어가 더 상위의 개념**입니다. 소프트웨어는 프로그램과 데이터로 구성됩니다. 소프트웨어에서 프로그램은 명령에 따라 동작하는 부분이고, 데이터는 프로그램에 사용되는 파일이나 프로그램의 동작에 의해 출력된 파일등을 말합니다.\r\n\r\n데이터인 동시에 프로그램인 경우도 있는데 바로 프로그래머가 작성한 코드 파일입니다. 이는 파일 자체가 프로그램의 기능을 할 수 있기 때문에 데이터이기도 하고 프로그램이기도 합니다. 참 복잡한 이야기입니다.\r\n\r\n<Line />\r\n\r\n프로그램에 대한 이야기는 이정도면 충분한 것 같습니다. 사실은 더 깊게 들어갈 수도 있는데 그것은 나중에 기회가 되면 다뤄보도록 하겠습니다. 이번 글에서는 프로그램과 프로그래밍 언어에 대해서 알아봤습니다. 다음 글에서는 **프로그래밍 언어의 역사**에 대해서 알아볼까 합니다. 프로그래밍의 역사가 작성되면 웹에 대한 내용을 작성할 예정입니다.\r\n","date":{"year":"2021","month":"05","yearMonth":"2021-05"}},"next":{"frontMatter":{"id":8,"title":"개발을 위한 프로그래밍 지식 4편 - 인터넷과 웹의 등장","description":"이 글은 개발을 위한 프로그래밍 지식 시리즈의 4번째 글입니다. 이번 글에서는 인터넷의 역사에 대해서 알아봅시다. 인터넷의 등장은 인류의 욕망과 관련이 있고 컴퓨터의 등장하고나서 살짝 뒤에서 등장하게 됩니다. 인터넷의 역사에 기여한 사람들은 서너명 정도가 되고 그들의 존재로 인해 인류는 인터넷이라는 네트워크 속에서 빠른 발전을 이룰 수가 있었습니다. 그럼 바로 본론으로 들어갑시다. 인터넷의 이야기를 하기에 앞서서 인류의 특성에 대해 살짝 생각해보고 넘어갈 필요가 있습니다. 인간은 다른 동물과는 다릅니다. 언제나 무리를 지어 생활을 했고 지구를 점령한 후에도 인류는 그 특성을 버리지 못하고 있습니다. 인간은 뭔가를 만들면 그것을 남에게 보여주고 싶어하고 평가받고 싶어합니다.","coverImage":"https://drive.google.com/uc?export=view&id=17XURxlvJ0fRGOeGkjgmsJX1892q-m-Pe","tags":["웹","웹 프로그래밍","프로그래밍","프로그램","인터넷","네트워크"],"categories":["프로그래밍"],"createdAt":1620088800000,"updatedAt":1635571680000,"keywords":[],"drawDate":1620088800000,"display":true,"type":"post"},"slug":"2021-05-04-01-origin-of-internet","fullPath":"/post/2021-05-04-01-origin-of-internet","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd, ProgrammingGuideMessage\r\n} from '@/components/Post';\r\n\r\n<ProgrammingGuideMessage />\r\n\r\n이 글은 **개발을 위한 프로그래밍 지식 시리즈**의 4번째 글입니다. 이번 글에서는 인터넷의 역사에 대해서 알아봅시다. 인터넷의 등장은 **인류의 욕망**과 관련이 있고 컴퓨터의 등장하고나서 살짝 뒤에서 등장하게 됩니다. **인터넷의 역사에 기여한 사람들은 서너명 정도**가 되고 그들의 존재로 인해 인류는 인터넷이라는 네트워크 속에서 빠른 발전을 이룰 수가 있었습니다.\r\n\r\n그럼 바로 본론으로 들어갑시다.\r\n\r\n# 인류와 소통\r\n인터넷의 이야기를 하기에 앞서서 **인류의 특성**에 대해 살짝 생각해보고 넘어갈 필요가 있습니다. 인간은 다른 동물과는 다릅니다. 언제나 무리를 지어 생활을 했고 지구를 점령한 후에도 인류는 그 특성을 버리지 못하고 있습니다. 인간은 뭔가를 만들면 그것을 남에게 **보여주고** 싶어하고 **평가**받고 싶어합니다.\r\n\r\n인간은 보통 혼자 있는 것보다는 **누군가와 함께 있는 것을 더 선호**합니다. 인간은 소통을 하고 싶어하는 사회적인 동물입니다. 이러한 특성들이 인터넷이라는 과학적인 진보마저 불러왔습니다. 물론 진보 자체는 불편함을 해결하고 편해지기 위해서지만요. 인간은 소통을 필요로 하는 존재입니다. 이러나 저러나 인터넷이 세계를 이어주고 국가를 뛰어넘어 소통을 하게 만들어줬다는 것은 달라지지 않죠.\r\n\r\n인터넷 역시도 **통신**을 위한 수단이었고 오늘 날에는 전화와 필적한 빈도를 자랑하는 통신 수단이 바로 인터넷입니다.\r\n\r\n# 인터넷의 역사\r\n**인터넷**은 단거리는 물론 장거리 통신이 가능한 소통 방법입니다. 인터넷은 1973년에 **빈튼 서프**라는 사람과 **밥 간**이라는 사람이 만들어낸 **TCP**와 **IP**라는 통신 프로토콜을 통해서 정보를 주고받을 수 있는 **컴퓨터 네트워크**입니다. 인터넷이라는 이름도 그들이 지었습니다. 이것들의 상세한 개념에 대해서는 언젠가 따로 공부를 해보시면 될 것 같습니다.\r\n\r\n**네트워크**라는 것은 **통신망**이라는 의미 입니다. 이 통신망의 안에 있다면 **통신이 가능**하다 라고 생각하면 됩니다. 인터넷은 인류에게 없어서는 안되는 중요한 요소가 되어버렸습니다. 이 인터넷이 그간 어떻게 발전해왔는지 간략하게 들여다보도록 합시다.\r\n\r\n## 최초의 컴퓨터 네트워크 아파넷(ARPANET)\r\n아파넷은 미국 국방부 산하 조직인 **고등 연구국(Advanced Research Projects Agency)**에서 개발된 컴퓨터 네트워크였습니다. 이 조직은 현재 **DARPA**라는 이름으로 존재하고 있습니다. 이들이 만든 네트워크인 아파넷은 미군의 정보를 어떻게 관리할까 라는 발상에서부터 시작되었고 정보를 안전하게 보관하기 위해서 네트워크를 만들게 되었습니다. 이 프로젝트에 참가했던 **로런스 래리 로버츠**라는 사람은 인터넷의 아버지라고 불릴 정도로 위업을 세운 셈입니다.\r\n\r\n1983년 즈음에는 패킷 송출 방법을 NCP에서 TCP/IP로 변경합니다. 이 시기에 **이메일**이라는 개념이 최초로 등장하게 됩니다. 이 이후에는 아파넷은 **민간에 공개**해버리고 국방부에선 **밀넷(MILNET)**이라는 또 다른 네트워크를 만들어 사용하기에 이릅니다. 이들이 공개한 아파넷이 바로 현재 우리가 사용하는 인터넷 환경의 근간이 됩니다.\r\n\r\n이때까지만 해도 인터넷이라는 것은 어려운 개념이었습니다. 적어도 일반인들은 이것을 제대로 다룰 수가 없었습니다. 오늘날 인터넷이라는 이미지를 만들게 되는 것은 바로 이 때쯤에 등장합니다.\r\n\r\n## WWW의 등장\r\n1989년. **팀 버너스리**라는 사람은 **WWW**라는 것을 고안합니다. 줄여서 **웹**이라고 부르며 **월드 와이드 웹(World Wide Web)**을 줄여서 WWW라고 부르기도 합니다. 웹은 네트워크 상의 커다란 공간입니다. 인터넷 내부에 존재하는 것이라고 보면 됩니다. 웹이 인터넷인 것은 아닙니다. 이 둘은 확실히 다른 것이고 인터넷이 연결되어 있어야 웹도 의미가 있습니다.\r\n\r\n웹은 **1990년 2월 20일**에 본격적으로 보급화되기 시작합니다. 웹이라는 이름은 **수많은 페이지들이 거미줄처럼 얽혀있다**는 비유에서 지어졌습니다. 이 뿐만이 아니라 **HTTP**라는 개념도 웹 페이지의 주소를 의미하는 **URL**이라는 것도 전부 팀 버너스리라는 사람이 만들었습니다. 이 사람이 아니었다면 우리는 아마 아직도 불편하게 어렵게 인터넷을 활용했을 겁니다.\r\n\r\n다시 한 번 말하지만 **웹은 인터넷을 이용한 시스템**이지 인터넷 그 자체가 아닙니다. **인터넷은 네트워크**고 네트워크는 통신망입니다. **웹은 정확히 무엇인가**하면 **HTTP라는 프로토콜**로 주고 받을 수 있는 **HTML 페이지가 가득한 공간**이다 라고 할 수 있습니다. 웹 브라우저가 바로 HTTP 통신을 엿볼 수 있는 도구인 것이고 그렇기 때문에 웹 페이지를 볼 수 있는 것입니다.\r\n\r\n오늘날 인터넷을 하는 행위가 웹을 들여다본다 라는 것으로 쓰이는 이유에는 아마 마이크로소프트가 만든 윈도우에 인터넷 익스플로러라는 브라우저가 큰 기여를 했을 겁니다. 사실 일반인들은 몰라도 됩니다. 그 둘이 다른다는 것을요. 하지만 우리는 알아야합니다. **웹과 인터넷은 별개이고 인터넷의 내부에 웹이 존재한다는 것**을 말입니다.\r\n\r\n아무튼, **웹의 존재로 인해 인터넷은 더욱 빨리 보급화** 될 수 있었습니다. 인터넷은 점점 더 발전하면서 웹 이외에도 다른 기술들이 개발되고 있죠. 특히나 **웹의 탄생은 웹 프로그래밍을 가능**케 했습니다.\r\n\r\n팀 버너스리는 웹 이외에도 **HTML**이라는 문서 규격을 제안했고, 이것은 점점 발전해서 **CSS**라는 것을 탄생시켰고 이후에는 **자바스크립트**와도 연동이 가능해져 동적인 프로그래밍이 이루어졌습니다. 웹 프로그래밍은 현재 강력한 위상을 지니고 있습니다.\r\n\r\n### 웹의 존재의의\r\n인터넷은 다양한 것들을 주고 받는 네트워크들의 집약체였고 월드 와이드 웹은 그런 **데이터들 중에서도 가시적인 문서나 파일**들을 효율적으로 관리하거나 열람하기 위해서 탄생했습니다. 팀 버너스리가 웹을 고안하게 된 계기도 **이리 저리 흩어져 있는 정보를 한데모아 체계적으로 관리**할 수 있게 하기 위함이었습니다. 그리고는 그것이 이루어지자 무료로 만들어 기술을 오픈소스로 만들었습니다.\r\n\r\n웹으로 인해 우리는 인터넷 공간에 있는 문서나 파일을 편하게 볼 수 있게 되었고 이를 주고 받을 수 있게 되었습니다. 오늘날의 웹은 정보의 바다가 되었습니다. 이게 전부 팀 버너스리가 선구적인 발상을 해냈기 때문입니다.\r\n\r\n### 웹의 특징\r\n웹의 특징이라면 당연하게도 **문서와 문서가 서로 연결 되어있다**는 것입니다. 링크라는 것을 통해서 서로 다른 웹 페이지를 연결하는 게 가능합니다. 인터넷을 정보의 바다로 불리게 만들어준 기능이기도 합니다. 이는 상당히 혁신적이었다고 할 수 있겠습니다.\r\n\r\n---\r\n\r\n대략적인 인터넷의 역사는 이정도입니다. 사실 우리는 전문지식 수준의 지식은 아직은 알 필요가 없습니다. 여러분이 웹 개발자로서 충분히 성장을 하면 그때 공부를 해도 늦지 않을 정도의 내용입니다. 중요한 것은 이제 우리는 컴퓨터의 역사나 프로그래밍의 대략적인 흐름을 알았고 오늘은 웹이 탄생하게 된 계기를 알게 되었다는 것입니다.\r\n\r\n이제 웹의 흐름에 대해서만 알아본다면 우리가 웹 개발을 하는데에 있어서 큰 문제는 없을 겁니다. 이번 글은 여기까지입니다. 다음 글은 언급한대로 웹의 흐름, 즉 웹의 역사에 대해서 알아볼까 합니다.\r\n","date":{"year":"2021","month":"05","yearMonth":"2021-05"}}},"__N_SSG":true}