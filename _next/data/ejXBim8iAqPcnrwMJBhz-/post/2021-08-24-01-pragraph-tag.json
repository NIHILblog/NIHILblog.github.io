{"pageProps":{"post":{"frontMatter":{"id":24,"title":"웹 개발을 위한 HTML 가이드 11편 - 문단 태그(p)","description":"웹 개발을 위한 HTML 가이드 11편 시작합니다. 저번 글에서는 제목 태그에 대해 알아봤습니다. 이번 글에서 알아볼 내용은 문단 태그입니다. 제목이 있다면 문단이 있다고 저번 글에서 이야기를 했었죠. 하지 않았어도 이건 당연합니다! 제목 태그를 알아봤으니 이제는 문단 태그에 대해서 알아볼 시간입니다. HTML에서 문단을 나타내는 태그는 바로 p태그입니다. Pragraph의 약자로 말 그대로 문단을 만들어줍니다. 블럭 태그의 특징을 띄고 대부분의 경우에는 제목 태그와 함께 쓰이는 편입니다.","coverImage":"https://drive.google.com/uc?export=view&id=1oMyFPKOLlRAXvAECYaUwZ_2l1Ub4hM4p","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","p","문단 태그"],"categories":["가이드","HTML"],"createdAt":1629782700000,"updatedAt":1636817700000,"keywords":[],"drawDate":1629782700000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      a: \"a\",\n      strong: \"strong\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      img: \"img\",\n      h2: \"h2\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, P, Strong, Name, A, Line} = _components;\n    if (!A) _missingMdxReference(\"A\", true);\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!Name) _missingMdxReference(\"Name\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsx(_components.h1, {\n        id: \"개요\",\n        children: \"개요\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"/post/2021-07-19-01-heading-tags\",\n          children: \"저번 글\"\n        }), \"에서는 제목 태그에 대해 알아봤습니다. 이번 글에서 알아볼 내용은 문단 태그입니다. 제목이 있다면 문단이 있다고 저번 글에서 이야기를 했었죠. 하지 않았어도 이건 당연합니다! 제목 태그를 알아봤으니 이제는 문단 태그에 대해서 알아볼 시간입니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"웹 개발을 위한 HTML 가이드 11편 시작합니다.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"문단을-나타내는-p태그\",\n        children: \"문단을 나타내는 p태그\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"HTML에서 \", _jsx(_components.strong, {\n          children: \"문단을 나타내는 태그\"\n        }), \"는 바로 \", _jsx(_components.code, {\n          children: \"p태그\"\n        }), \"입니다. \", _jsx(_components.strong, {\n          children: \"Pragraph\"\n        }), \"의 약자로 말 그대로 문단을 만들어줍니다. \", _jsx(_components.code, {\n          children: \"p태그\"\n        }), \"는 블럭 태그의 특징을 띄고 대부분의 경우에는 제목 태그와 함께 쓰이는 편입니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"자, 그럼 메모장을 열고 HTML의 기본 구조를 작성한 뒤에 다음과 같은 코드를 넣어보고 \", _jsx(_components.strong, {\n          children: \"html파일로 저장\"\n        }), \"한 뒤에 실행해봅시다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsx(_components.code, {\n          className: \"language-html code-highlight\",\n          children: _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"이것은 문단 태그입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })\n        })\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=10Zlv6hDTbnt--eI1nb5NZfJq7HcEJ_Ph\",\n        alt: \"문단 태그의 모습.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그러면 아래의 이미지처럼 글자가 나타난 것을 볼 수 있죠. 제목과는 다르게 굵지도 않고 크기가 크지도 않습니다. 이게 바로 본문에 해당하는 태그입니다. 이런 블로그 같은 곳에는 \", _jsx(_components.code, {\n          children: \"p태그\"\n        }), \"가 특히나 많이 사용됩니다. 가령 뉴스기사 페이지 같은 곳에서 많이 쓰는 셈이죠. \", _jsx(_components.code, {\n          children: \"p태그\"\n        }), \"에 대한 사용 방법은 이게 전부입니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그런데 이렇게 끝나면 참 아쉽죠. 몇가지를 더 알아보도록 합시다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  태그 안에서 아무리\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  엔터를 쳐서 여러줄을 적더라도\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  줄바꿈은 일어나지 않습니다.\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"위처럼 적으면 어떻게 될까요? 적힌 내용처럼 \", _jsx(_components.strong, {\n          children: \"줄바꿈이 되지 않습니다.\"\n        }), \" 한 번 확인해볼까요?\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1CLay0oXiLdURobpRqFQBkJv041g3Z-ET\",\n        alt: \"HTML에서 줄바꿈을 하기 위해서는 개행 태그가 필요하다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이렇게 아무 일도 일어나지 않았습니다. \", _jsx(_components.strong, {\n          children: \"HTML에서 줄바꿈을 하기 위해\"\n        }), \"서는 새로운 태그를 알아야 합니다. 바로 \", _jsx(_components.strong, {\n          children: \"개행 태그\"\n        }), \"입니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"개행을-나타내는-br태그\",\n        children: \"개행을 나타내는 br태그\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"개행 태그는 \", _jsx(_components.code, {\n          children: \"p태그\"\n        }), \"와 함께 사용되기도 하고 따로 사용되기도 합니다. 줄바꿈이 필요할 때에 혹은 빈 줄이 필요할 때에 사용하는 태그입니다. 바로 \", _jsx(_components.code, {\n          children: \"br태그\"\n        }), \"라고 하는 태그인데 이는 \", _jsx(_components.strong, {\n          children: \"Line break\"\n        }), \"를 의미합니다. 그래서 개행 태그인 것이죠.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"아래와 같이 사용합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  아이유 - 라일락\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"br\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  아이유 - 코인\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"br\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"br\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"br\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"아이유 - 에필로그\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1u0HkwHrok_Dw6Na1zMl247zWvXN569Ag\",\n        alt: \"br태그를 함께 이용할 때가 많다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"여러번 사용하면 빈줄 여러개가 생깁니다. HTML은 이렇게 직관적인 기능을 갖고 있기 때문에 연습만 잘 한다면 익히는데에 별 문제는 없을 것이라고 생각합니다. \", _jsx(_components.code, {\n          children: \"br태그\"\n        }), \"는 닫는 태그가 없습니다. 홀로 닫는 태그이기 때문에 혼자서 닫아주시면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"실전-연습\",\n        children: \"실전 연습\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"그럼 이제 마지막으로 실습을 한 번 해보고 글을 마치도록 합시다. 바로 \", _jsx(Strong, {\n          children: \"제목 태그\"\n        }), \"와 함께 사용해서 간단한 문서 페이지를 만들어 보는겁니다. 우리가 저번 글에서 \", _jsx(Name, {\n          children: \"index.html\"\n        }), \"에 추가했던 내용이 제목들이었죠. 이번 글에서는 여기에 본문을 추가해보는 것을 목적으로 코딩을 해보도록 합시다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h1\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"웹 개발의 3요소\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h1\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"HTML\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"CSS\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"JavsScript\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이런 모양일텐데, 각 \", _jsx(_components.code, {\n          children: \"h2\"\n        }), \"태그의 아래에 설명을 적어보도록 합시다. 아래처럼 간단하게 입력하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h1\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"웹 개발의 3요소\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h1\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"HTML\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"HTML은 웹의 뼈대를 만들어주는 기능을 하는 마크업 언어입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"CSS\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"CSS는 HTML로 만든 뼈대에 피부를 만들어주고 화장을 시켜주는 스타일 시트 언어입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"JavsScript\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"자바스크립트는 HTML과 CSS를 동적으로 제어할 수 있는 웹의 뇌와 같은 언어입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이렇게 코딩을 하고 저장해봅시다. 그리고 실행을 하면..!\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=12iiserJEHdTyDG-cK-2rybaFxk4mOzdg\",\n        alt: \"프로젝트 두번째 과정.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이처럼 간단한 문서가 만들어졌습니다. 여러분은 \", _jsx(_components.strong, {\n          children: \"웹다운 웹\"\n        }), \"을 처음으로 만들어 본 것입니다. 다시 한 번 지금까지의 내용을 설명을 하자면 \", _jsx(_components.code, {\n          children: \"h1\"\n        }), \"태그는 한 페이지에 하나만 존재하는 게 표준으로 권장되고 있다고 했습니다. 그래서 하나를 넣었고 그 아래 \", _jsx(_components.code, {\n          children: \"h2\"\n        }), \"태그들은 많아도 상관 없고 셋 다 같은 레벨의 목차이기 때문에 사용했습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이렇게 HTML은 문서의 측면이 강하게 다가옵니다. 물론 이건 우리가 초기 단계의 HTML을 배우고 있기 때문이고, 간단한 것만 알아보고 있기 때문입니다. 훗날 디자인을 입히고 \", _jsx(_components.strong, {\n          children: \"자바스크립트를 사용할 때\"\n        }), \"가 되면 비로소 \", _jsx(_components.strong, {\n          children: \"웹 어플리케이션\"\n        }), \", \", _jsx(_components.strong, {\n          children: \"웹 프로그램\"\n        }), \"이 되는 셈입니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"여러분이 잘 따라오셨다면 \", _jsx(Name, {\n          children: \"index.html\"\n        }), \"의 내용은 아래의 코드와 같을 겁니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token doctype\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<!\"\n              }), _jsx(_components.span, {\n                className: \"token doctype-tag\",\n                children: \"DOCTYPE\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token name\",\n                children: \"html\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"html\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"lang\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"ko\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"head\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"meta\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"charset\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"UTF-8\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"title\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"웹 개발의 3요소\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"title\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"head\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"body\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h1\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"웹 개발의 3요소\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h1\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"HTML\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"HTML은 웹의 뼈대를 만들어주는 기능을 하는 마크업 언어입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"CSS\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"CSS는 HTML로 만든 뼈대에 피부를 만들어주고 화장을 시켜주는 스타일 시트 언어입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"JavsScript\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"자바스크립트는 HTML과 CSS를 동적으로 제어할 수 있는 웹의 뇌와 같은 언어입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"body\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"html\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"오늘 만들어본 파일은 보관을 해두시기 바랍니다. 지금 당장 저장을 합시다! 다음 글에서도 계속 사용할 것이기 때문이죠. 저 같은 경우는 프로그래밍을 위한 폴더를 만들어놨고 그 안에 프로젝트별로 카테고리를 만들어서 그 카테고리의 안에 프로젝트 폴더들을 넣어둡니다. 이 블로그로 예를 들어보자면 \", _jsx(_components.strong, {\n          children: \"web-coding/Blog/nihilog-code\"\n        }), \" 이런 구조를 하고 있습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"어떤 구조로 프로젝트 폴더를 관리하든 그건 자유롭게 하시고 중요한 것은 보관을 해두는 겁니다. 앞으로 이 파일을 계속해서 발전시켜서 다양한 기능을 하게끔 만들어 볼 겁니다. HTML 가이드에서 사용하고 있는 이 파일은 깃허브에 올려두었습니다. 아래의 링크를 참고하시면 됩니다.\"\n      }), \"\\n\", _jsxs(P, {\n        children: [_jsx(A, {\n          type: \"normal\",\n          href: \"https://github.com/nihil-programming-guide/web-tuto\",\n          children: \"web-tuto\"\n        }), \" 이 링크에서 HTML 폴더로 들어가시면 진행도 별로 폴더가 있습니다. 링크 태그를 추가해놓은 것은 미리 만들어놨으니까 무시하시고 2번을 보시면 됩니다.\"]\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글에서는 \", _jsx(_components.strong, {\n          children: \"문단 태그\"\n        }), \"에 대해 알아봤고 \", _jsx(_components.strong, {\n          children: \"개행 태그\"\n        }), \"에 대해서도 알아봤습니다. 앞으로도 계속 쓰일 것이기 때문에 여러번 연습을 해보시면 좋을 겁니다. 다음 글은... HTML 가이드가 아닙니다. 다음 글에서는 정비 타임으로 \", _jsx(_components.strong, {\n          children: \"텍스트 에디터\"\n        }), \"를 만져보는 시간을 가질 겁니다. 언제까지고 이 불편한 메모장을 갖고 있을 수는 없거든요.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"다음 글에서는 위에서 말했던 것처럼 \", _jsx(Strong, {\n          children: _jsx(A, {\n            type: \"normal\",\n            href: \"https://code.visualstudio.com/\",\n            children: \"VSCode\"\n          })\n        }), \"에 대해서 알아볼 예정입니다. 그럼 이번 글도 고생많으셨습니다. 다음 글에서 봅시다!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-08-24-01-pragraph-tag"},"prev":{"frontMatter":{"id":23,"title":"웹 개발을 위한 HTML 가이드 10편 - 제목 태그(h1~h6)","description":"문서는 어떠한 것을 설명하는 목적이 다분하기 때문에 제목이 있고 본문이 있고 그 외의 부분들로 나누어지는 것이 보통입니다. 웹에서도 마찬가지입니다. HTML로는 생각할 수 있는 모든 형태의 레이아웃을 구성할 수 있지만 뉴스 사이트라든지 블로그 같은 곳엔 제목이 있고 본문이 있습니다. HTML은 문서의 측면도 가지고 있기 때문에 제목과 본문이 있습니다. 이 제목은 문서에서 중요한 부분을 차지합니다. 어떠한 문서에서 중요한 내용을 콕 찝은 것이 바로 제목이죠. HTML에도 제목을 나타내는 태그가 있습니다. 이번 글에서 알아볼 내용은 바로 제목에 대한 태그입니다. 서론은 여기까지하고 바로 본론으로 들어갑시다. 웹 개발을 위한 HTML 가이드 10편 지금 시작합니다.","coverImage":"https://drive.google.com/uc?export=view&id=161s3KuZEX9ADxEfikJcJpP6MSs3IIpHG","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","제목태그","h태그"],"categories":["가이드","HTML"],"createdAt":1626661680000,"updatedAt":1636817700000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"slug":"2021-07-19-01-heading-tags","fullPath":"/post/2021-07-19-01-heading-tags","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage/>\r\n\r\n# 개요\r\n문서는 어떠한 것을 설명하는 목적이 다분하기 때문에 제목이 있고 본문이 있고 그 외의 부분들로 나누어지는 것이 보통입니다. 웹에서도 마찬가지입니다. HTML로는 생각할 수 있는 모든 형태의 레이아웃을 구성할 수 있지만 뉴스 사이트라든지 블로그 같은 곳엔 제목이 있고 본문이 있습니다.\r\n\r\n<P>HTML은 문서의 측면도 가지고 있기 때문에 제목과 본문이 있습니다. 이 제목은 <Strong>문서에서 중요한 부분을 차지</Strong>합니다. <Mark>어떠한 문서에서 중요한 내용을 콕 찝은 것이 바로 제목이죠.</Mark> HTML에도 제목을 나타내는 태그가 있습니다. 이번 글에서 알아볼 내용은 바로 제목에 대한 태그입니다. 서론은 여기까지하고 바로 본론으로 들어갑시다. 웹 개발을 위한 HTML 가이드 10편 지금 시작합니다.</P>\r\n\r\n# 제목 태그\r\nHTML의 제목 태그에는 **여섯가지의 단계**가 있습니다. 각 태그의 이름은 **제목**을 의미하는 영단어 **Heading**의 약자인 h와 숫자 1 ~ 6을 합친 `h1` ~ `h6`입니다. 숫자가 클수록 큰 제목입니다.\r\n\r\n```html\r\n<h1>제목 1</h1>\r\n<h2>제목 2</h2>\r\n<h3>제목 3</h3>\r\n<h4>제목 4</h4>\r\n<h5>제목 5</h5>\r\n<h6>제목 6</h6>\r\n```\r\n\r\n<P>자 그럼 이제 코딩을 시작해봅시다. 우리가 예전에 저장해뒀던 <Name>index.html</Name>파일을 꺼낼 때가 왔습니다. 메모장으로 이 파일을 불러와서 <Code>body</Code>태그 안에 위의 코드를 작성하면 되겠죠. 복붙을 해도 좋겠지만 직접 타이핑을 하는 것이 학습에 도움이 됩니다. <Bold>현재 이 가이드는 HTML의 기본적인 구조는 알고 있다는 전제하에 진행하는 중입니다. 기본적인 구조를 모른다면 이전의 가이드를 열람하고 오셔야 합니다.</Bold></P>\r\n\r\n<P>이렇게 적으면 아래와 같은 상황이 되었을 겁니다. 이제 저장을 하면 되는데, 그냥 <Kbd>CTRL + S</Kbd>를 누르면 됩니다. 그러면 저장이 되죠. 우리가 파일 이름을 <Name>index.html</Name><NoteTop number='1'/>이라고 한 건 이유가 있습니다. 그 이유는 나중에 다뤄보도록 하겠습니다. 각주 타고 링크 들어가서 읽어봐도 됩니다.</P>\r\n\r\n아무튼, 저장을 했으니까 저장한 파일을 실행해봅시다. 실행을 하면, 다음과 같이 나타납니다. **제목 1이 가장 크고 제목 6이 가장 작습니다.** 이것은 어디까지나 기본 디자인일 뿐이고 우리가 CSS를 통해서 언제든지, 어떠한 모양으로든 바꿔줄 수 있습니다.\r\n\r\n![저장한 파일을 실행한 브라우저의 모습.](https://drive.google.com/uc?export=view&id=1z-Z-ha1IfVua0Rq1eKA0y6C4pgfzXuMN)\r\n\r\n이렇게 떠야 정상입니다. 그렇지 않다면 뭔가.. 잘못된 겁니다. 아무튼, 이렇게 제목으로만 이루어진 웹 페이지가 만들어졌습니다. 하지만 전혀 쓸모가 없는 웹 페이지죠. 우리는 앞으로 다양한 태그를 배우면서 이 웹페이지를 꾸며볼 겁니다.\r\n\r\n## 주의사항\r\n제목 태그에 대한 기본적인 건 마쳤습니다. 제목은 이 태그로 나타내고, 제목 아래의 중제목 소제목 같은 개념은 `h1`태그보다 작은 태그를 적절하게 잘 사용하면 되겠죠. 그런데 중요한 내용이 남아있습니다. 제목 태그를 사용하면서 주의해야 할 사항입니다.\r\n\r\n**하나의 웹 페이지에서 가장 큰 제목 태그가 두 번 이상 사용되면 안된다**는 점입니다. 이게 무슨 말이냐면 `h1`태그를 두번 이상 사용하면 안된다는 것입니다. 가장 큰 제목인데 그게 두개가 되어버리면 검색 엔진이 혼동을 할 수 있기 때문입니다.\r\n\r\n이러한 부분이 웹 표준으로 권장되고 있기 때문에 HTML을 배우는 우리는 **웹 표준**에 맞게 공부하는 게 중요합니다. 상세한 이유에 대해서는 자세하게 알아봐도 지금은 너무 어려울겁니다. 나중에 시간이 되면 그때 알아보도록 하고 가장 큰 제목은 한 페이지에 한 번만 사용한다. 라는 점을 기억하시기 바랍니다.\r\n\r\n# 실전 연습\r\n주의사항을 적용해서 **실습**을 해보도록 합시다. 우리는 웹 개발에 대한 기초를 배우는 중입니다. 그래서 그 기초를 간단하게 설명해주는 웹 페이지를 우리의 손으로 직접 만들어보면 좋을 것 같다는 생각이 들었습니다. 우리는 앞으로 우리가 만든 <Name>index.html</Name>파일을 계속해서 발전시켜 나아갈 겁니다.\r\n\r\n우선 우리 프로젝트의 주제를 `h1`태그로 표현해봅시다. 물론 위에서 작성한 것들은 지워도 무방합니다.\r\n\r\n```html file=index.html\r\n<h1>웹 개발의 3요소</h1>\r\n```\r\n\r\n우리는 **HTML**과 **CSS**, **JS**를 전부 다루게 될 겁니다. `h2`태그로 각각의 요소를 부제목으로 표현해봅시다. `h2`태그를 사용하는 이유는 `h1`태그보다 아래에 있어야 할 내용들이기 때문이고 `h1`태그는 이미 사용했으니까 사용할 수 없기 때문입니다.\r\n\r\n```html file=index.html\r\n<h1>웹 개발의 3요소</h1>\r\n<h2>HTML</h2>\r\n<h2>CSS</h2>\r\n<h2>JavsScript</h2>\r\n```\r\n\r\n내용만 적으면 이 페이지가 뭘 의미하는지 알 수가 없으니까 제목도 정해줍시다. `head`태그 안에 `title`태그가 있다는 것을 잊지 않았겠죠? 바꿔봅시다.\r\n\r\n```html\r\n<title>웹 개발의 3요소</title>\r\n```\r\n\r\n이렇게 하면 최종적으로 아래와 같은 모양이 되었을 겁니다. 주석은 다 없애도 됩니다.\r\n\r\n```html file=index.html\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <title>웹 개발의 3요소</title>\r\n</head>\r\n\r\n<body>\r\n  <h1>웹 개발의 3요소</h1>\r\n  <h2>HTML</h2>\r\n  <h2>CSS</h2>\r\n  <h2>JavsScript</h2>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n![프로젝트 첫번째 과정.](https://drive.google.com/uc?export=view&id=1H1Cmo7li0fzQ28qdbsUy01MaYcCCzgOS)\r\n\r\n<P>이 코드는 <A href='https://github.com/nihil-programming-guide/web-tuto/blob/master/HTML/01-first-html/index.html' type='normal'>web-tuto</A> 깃허브에 올려두었습니다. 아직은 정말 별 거 없지만 점점 뭔가가 추가되는 것을 경험하면서 웹은 이렇게 만들어진다 라는 것을 함께 익혀가게 될 겁니다. 우리는 지금 원하는 웹 페이지를 만들었다는 것 자체에 큰 의의가 있습니다.</P>\r\n\r\n<Line />\r\n\r\n이제 마칠 때가 된 거 같습니다. 이번 글에서는 간단하게 제목 태그에 대해서 알아봤습니다. 나중에야 알게 되겠지만 제목 태그는 중요합니다. 잘 기억해두시고 여러번 타이핑하면서 연습해봅시다. 저번 글에서는 `div`태그와 `span`태그도 배웠었죠. 제목 태그와 함께 연습해보면 좋을 듯합니다.\r\n\r\n다음 글에서는 **문단을 만들어내는 태그**에 대해서 알아봅시다. 이번글은 여기까지입니다. 다음 글에서 봅시다.\r\n\r\n<NoteBottom number='1' first={true}><Strong>어떠한 폴더(경로)</Strong>의 <Strong>기본 파일</Strong>이 될 파일의 이름은 <Strong>index</Strong>라고 짓는다. <Name>index.html</Name>이라는 파일은 해당 폴더의 기본 웹 페이지가 된다. 자세한 설명은 <A type='blog' href='/post/2021-09-04-01-filename-index'>이 링크</A>를 참고하자.</NoteBottom>\r\n","date":{"year":"2021","month":"07","yearMonth":"2021-07"}},"next":{"frontMatter":{"id":25,"title":"웹 개발을 위한 HTML 가이드 번외 - index.html에 대해","description":"이번 글에서는 알아둬서 나쁠 것 없는 주제를 다뤄보려고 합니다. 원래는 비주얼 스튜디오 코드에 대해서 글을 작성하려고 했는데 기존에 작성한 글에서 분리하는 게 나을 것 같은 내용이 있어서 이렇게 작성해보려고 합니다. 이번 글의 주제는 웹의 주소와 파일 이름에 대한 것입니다. 다소 어려운 이야기가 될 수 있습니다. 지금 당장 이해가 안간다면 그냥 다음글로 넘어가셔도 전혀 문제가 없는 내용입니다. 최대한 이해가 되게끔 글을 작성할 것인데 혹시라도 이해가 안된다면 전혀 문제가 안되기 때문에 정말로 다음글로 넘어가시면 됩니다. 그럼 웹 개발을 위한 HTML 가이드 번외편 시작하도록 합시다.","coverImage":"https://drive.google.com/uc?export=view&id=12o03yThbqbZVTDivEj25z-ldfCIOmIp_","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보"],"categories":["가이드","HTML"],"createdAt":1630764660000,"updatedAt":1633117320000,"keywords":[],"drawDate":1630764660000,"display":true,"type":"post"},"slug":"2021-09-04-01-filename-index","fullPath":"/post/2021-09-04-01-filename-index","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n# 개요\r\n이번 글에서는 알아둬서 나쁠 것 없는 주제를 다뤄보려고 합니다. 원래는 비주얼 스튜디오 코드에 대해서 글을 작성하려고 했는데 기존에 작성한 글에서 분리하는 게 나을 것 같은 내용이 있어서 이렇게 작성해보려고 합니다. 이번 글의 주제는 **웹의 주소와 파일 이름**에 대한 것입니다.\r\n\r\n**다소 어려운 이야기**가 될 수 있습니다. 지금 당장 이해가 안간다면 그냥 **다음글로 넘어가셔도** 전혀 문제가 없는 내용입니다. 최대한 이해가 되게끔 글을 작성할 것인데 혹시라도 이해가 안된다면 전혀 문제가 안되기 때문에 정말로 다음글로 넘어가시면 됩니다. 그럼 **웹 개발을 위한 HTML 가이드** 번외편 시작하도록 합시다.\r\n\r\n# 컴퓨터와 웹\r\n우리는 웹이 어떻게 돌아가는지에 대해서는 알아보지 않았죠. 웹에 존재하는 모든 페이지들은 사실 **어떤 컴퓨터들**이 **웹 서버를 이용해서 호스팅**하고 있는 **html**파일의 내용입니다. 그리고 파일을 호스팅하는 컴퓨터를 **호스트 컴퓨터**라고 부릅니다. 웹 서버는 인터넷상에 존재하는 공간이고 컴퓨터가 서버를 열어서 파일을 공유한다면 그 컴퓨터가 바로 호스트 컴퓨터가 됩니다.\r\n\r\n인터넷은 **컴퓨터와 컴퓨터가 서로 연결**될 수 있는 **네트워크**라고 했습니다. 여러분의 컴퓨터에 있는 파일을 누군가가 보기 위해서는 여러분의 컴퓨터와 **다른 컴퓨터가 연결되어** 있어야 합니다. 그것을 가능하게 해주는 게 바로 웹 서버입니다. 웹 서버를 열어서 파일을 올려두면 여러분의 컴퓨터에 다른 사람이 접근할 수가 있게 됩니다. 즉 호스트 컴퓨터는 인터넷이라는 수단을 통해서 파일을 공유할 수 있게 된 것이죠.\r\n\r\nhtml파일 뿐만 아니라 **모든 파일**을 이렇게 공유할 수가 있습니다. 웹 페이지에 존재하는 이미지 또한 호스트 컴퓨터에 존재하는 어떤 폴더 안에 위치한 이미지 파일입니다. 그냥 쉽게 생각하면 모든 페이지와 모든 영상, 이미지, 음원들은 **전부가 호스트 컴퓨터가 호스팅하고 있는 파일**이라고 생각하면 됩니다.\r\n\r\n이 이야기를 왜 하느냐! 바로 **index.html**이라는 파일 이름과 관련이 있기 때문입니다.\r\n\r\n# 컴퓨터와 아이피(IP)\r\n모든 컴퓨터는 **아이피**라는 것을 가집니다. 아이피는 고유한 식별 번호같은 겁니다. **사람으로 생각해보면 주민등록번호**라고 생각하시면 됩니다. 아이피는 **Internet Protocol**의 약자로 컴퓨터와 컴퓨터가 **네트워크에서 소통할 때에 필요한 번호**입니다. 호스트 컴퓨터들도 아이피를 당연히 갖고 있습니다.\r\n\r\n<P>모든 웹 사이트의 웹 페이지들은 웹 서버에 존재하는 파일이기 때문에 호스트 컴퓨터에 접근해야만 합니다. 그러기 위해 모든 웹 페이지의 주소, 즉 <Strong>URL</Strong>에는 아이피가 포함되어있습니다. 그런데 우리가 보는 것은 <Strong>www.naver.com</Strong>과 같은 형태죠. 이런 주소들은 아이피의 별명이라고 생각하면 됩니다. <Strong>도메인</Strong>이라고 부릅니다. 우선 네이버를 예시로 들어볼까 합니다.</P>\r\n\r\n```text\r\nhttps://www.naver.com\r\nhttps://0.0.0.0:0\r\n```\r\n\r\n호스트 컴퓨터로 접근하는 아이피의 구조는 보통 아랫줄과 같습니다. 아이피는 **0부터 255**까지 총 네가지의 숫자로 이루어져 있습니다. 숫자와 숫자는 점으로 구분합니다. 아이피의 마지막 숫자의 바로 뒤에는 **콜론(:)**이 오고 그 뒤에 **포트(Port)**에 해당하는 숫자가 오게 됩니다. 호스트 컴퓨터는 이렇게 아이피와 포트가 존재합니다.\r\n\r\n네이버의 경우도 원래는 아랫줄과 같은 모양인데 윗줄처럼 **도메인으로 숨겨둔 상태**입니다. 왜냐면 영어를 입력하는 게 더 기억에도 남고 쉽기 때문이죠. 모든 사이트들은 이렇게 도메인으로 숨겨둔 겁니다.\r\n\r\n일반적으로 웹에서 암묵적으로 쓰는 포트는 **80**입니다. 80 포트는 표기를 생략할 수 있습니다. 호스트 컴퓨터가 돌리고 있는 서버가 **https**를 사용하는 서버라면 포트는 **443**입니다. 443도 생략이 가능합니다. 하지만 다른 포트들은 생략이 불가능합니다. 아무튼간에 중요한건 아이피와 포트를 도메인이라는 것으로 숨겨두었다는 겁니다.\r\n\r\n# 호스트 컴퓨터와 파일\r\n호스트 컴퓨터가 모든 종류의 파일을 공유할 수 있다는 말은 컴퓨터 안의 모든 파일을 공유한다는 것은 아닙니다. 물론 그런 경우도 있지만 **서버가 호스팅하고 있는 폴더와 그 아래의** 하위 폴더, 하위 파일들을 공유할 수 있습니다. 이 때, 서버가 호스팅하고 있는 폴더는 우리처럼 개발환경이 갖춰진 **프로젝트 폴더**입니다.\r\n\r\n<P><Strong>https://www.naver.com</Strong>라는 주소는 네이버의 프로젝트 폴더를 가리키고 있는 것과 같죠. 아까는 아이피의 별명이라고 했는데 하나의 컴퓨터에서 <Strong>여러개의 서버를 만들고 배포할 수 있기 때문</Strong>에 정확히는 <Strong>하나의 서버가 여러개의 도메인을 가질 수</Strong> 있는 겁니다.</P>\r\n\r\n# index라는 이름의 의미\r\n지금까지 이 이야기들을 한 이유는 **index**라는 이름을 설명하기 위해서는 여기까지의 설명이 필요했기 때문입니다. 대부분의 경우 index라는 이름은 **각 폴더의 기본 파일**을 의미합니다. **index.html**이라면 그 폴더의 **기본 페이지**를 의미하는 것이고 **index.js**라면 그 폴더의 **기본 스크립트 파일**을 의미하는 겁니다.\r\n\r\n<P>이 내용은 나중에 다룰 절대경로와 상대경로에 대한 것과도 관련이 있는데, 웹상에서 프로젝트의 루트 폴더 즉 프로젝트의 최상위 폴더의 경로는 <Strong>/</Strong>로 표현합니다. <Strong>https://www.naver.com</Strong>라는 주소는 사실 <Strong>/</Strong>가 빠져 있는 것이고, <Strong>/</Strong>는 <Strong>/index.html</Strong>로 표현할 수 있습니다. <Strong>index.html</Strong>이라는 이름은 생략이 가능합니다. 다른 이름은 생략이 불가능하고 확장자만 생략이 가능한데, <Strong>index.html</Strong>이라는 파일 이름 만큼은 생략이 가능합니다.</P>\r\n\r\n<P>즉 우리가 항상 들어가는 네이버 홈페이지의 주소는 이렇게도 쓸 수 있습니다. <Strong>https://www.naver.com/index.html</Strong>로 말이죠. 이건 모든 폴더에 해당될 수 있는 것이라서 모든 주소는 아래의 두가지 경우 중 하나입니다.</P>\r\n\r\n```text\r\nhttps://주소/폴더이름/index.html\r\nhttps://주소/폴더이름.html\r\n```\r\n\r\n위의 두 주소는 완전히 똑같은 기능을 합니다. 이건 여러분이 웹 개발을 할 것이라면 **언젠가는 알아야 하는 내용**입니다. 좀 빨리 알아본 것이라고 생각하고 이해가 잘 안되면 나중에 다시 읽어보시면 됩니다. 이번 글은 간단하게 **index.html**이라는 이름에 대해서 알아봤습니다. 이건 나중에 **자바스크립트를 건드릴 때에도 똑같이 적용**됩니다!\r\n\r\n이번 글은 여기까지 입니다. 나중에는 더 심화적인 내용으로 **로컬 주소와 웹 주소**, 그리고 **상대경로와 절대경로**를 다룰 때가 올텐데 그건 나중일이니 일단은 접어두도록 하겠습니다. 다음 글은 정말로 **비주얼 스튜디오 코드**에 대해 알아보도록 합시다.\r\n","date":{"year":"2021","month":"09","yearMonth":"2021-09"}}},"__N_SSG":true}