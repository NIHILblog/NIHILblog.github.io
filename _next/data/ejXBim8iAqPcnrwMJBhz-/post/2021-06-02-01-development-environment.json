{"pageProps":{"post":{"frontMatter":{"id":17,"title":"웹 개발을 위한 HTML 가이드 5편 - 개발환경 구축하기","description":"우리는 저번 글들을 통해서 HTML에 대해 알게되었고 문법을 알아보았습니다. 태그라는 것은 무엇이며 태그의 특징은 무엇이고, 태그끼리의 관계는 또 어떤지도 알아봤습니다. 기본적인 사전 지식은 다 알아본 셈이고, 이게부터는 코딩을 본격적으로 시작해야 할 때가 왔죠. 하지만 코딩을 본격적으로 시작하기에 앞서 알고 넘어가야 할 것이 있습니다. 그게 무엇인가 하면 이번 글의 주제인 개발환경입니다. 개발환경은 개발자가 개발을 하기 위해 갖춰야 하는 기본적인 조건입니다. 프로젝트들이 모여있는 폴더부터 시작해서 편집기까지 모두를 아울러 부르는 말이 개발환경입니다.","coverImage":"https://drive.google.com/uc?export=view&id=1oelPfGNt3b0n6NqE4uFu2gbvz_01ifVq","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","개발환경"],"categories":["가이드","HTML"],"createdAt":1622592540000,"updatedAt":1622688600000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h1: \"h1\",\n      strong: \"strong\",\n      h2: \"h2\",\n      img: \"img\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, P, Strong, Mark, Line} = _components;\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!Mark) _missingMdxReference(\"Mark\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsx(_components.p, {\n        children: \"우리는 저번 글들을 통해서 HTML에 대해 알게되었고 문법을 알아보았습니다. 태그라는 것은 무엇이며 태그의 특징은 무엇이고, 태그끼리의 관계는 또 어떤지도 알아봤습니다. 기본적인 사전 지식은 다 알아본 셈이고, 이게부터는 코딩을 본격적으로 시작해야 할 때가 왔죠.\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"하지만 코딩을 본격적으로 시작하기에 앞서 알고 넘어가야 할 것이 있습니다. 그게 무엇인가 하면 이번 글의 주제인 \", _jsx(Strong, {\n          children: \"개발환경\"\n        }), \"입니다. \", _jsx(Mark, {\n          children: \"개발환경은 개발자가 개발을 하기 위해 갖춰야 하는 기본적인 조건입니다.\"\n        }), \" 프로젝트들이 모여있는 폴더부터 시작해서 편집기까지 모두를 아울러 부르는 말이 개발환경입니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"바로 본론으로 넘어가보도록 합시다. 웹 개발을 위한 HTML 가이드 5편 시작합니다.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"개발환경-구축하기\",\n        children: \"개발환경 구축하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"개발환경을 구축하기 전에 기본적으로 해야하는 설정들이 있습니다. 일단은 그 설정들을 먼저 살펴보도록 합시다. 그 후에는 우리가 개발을 할 때에 사용할 폴더를 만들겁니다. 마지막으로 메모장을 준비해주면 우리의 첫번째 개발환경은 완성된 겁니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"왜 메모장을 사용하느냐에 대해서는 저는 이렇게 답합니다. 편한 것이 왜 편한지 알려면 불편함을 먼저 경험해야 합니다. 우리는 불편한 방식을 먼저 사용함으로써 편한 것이 왜 편한 것인지를 깨닫는 과정을 겪어볼 겁니다. 이건 중요한 것일 수도 있습니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"최종적으로 사용할 편집기는 \", _jsx(_components.strong, {\n          children: \"VS Code\"\n        }), \"지만 메모장부터 건드려보도록 합시다. \", _jsx(_components.strong, {\n          children: \"VS Code\"\n        }), \"에 대한 이야기는 나중에 다른 글을 통해서 하게 될 것 같습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"개발을-위한-폴더설정\",\n        children: \"개발을 위한 폴더설정\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"아, 이 블로그의 모든 글은 윈도우를 기반으로 설명합니다. 제가 맥을 다룰 수 없기 때문에 맥 관련으론 설명할 수 없는 점 양해 부탁드립니다. 우리가 우선적으로 해야 하는 설정은 파일의 확장자가 보이게끔 폴더 설정을 건드리는 겁니다.\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1NjHID_LQczRaiQ2dcjvDbjx7BYS-mkIm\",\n        alt: \"폴더 및 검색 옵션 변경을 클릭한다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"윈도우 탐색기를 열어봅시다. 상단의 메뉴바에서 파일을 클릭하고 \", _jsx(_components.strong, {\n          children: \"폴더 및 검색 옵션 변경\"\n        }), \"을 클릭합니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=12ZY-B1duURh3aQJIOtZhtm2blPxDyHjW\",\n        alt: \"보기 탭을 클릭한다.\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=10Ee5C4agtsUCuXkVsMHKhZjwacypsFaS\",\n        alt: \"스크롤을 내려서 숨김 파일 폴더 및 드라이브 표시를 체크하고, 알려진 파일 형식의 파일 확장명 숨기기의 체크를 해제한다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그 다음에는 \", _jsx(_components.strong, {\n          children: \"보기\"\n        }), \" 탭을 클릭하고 스크롤을 내려봅시다. 그리고 이미지에서처럼 \", _jsx(_components.strong, {\n          children: \"숨김 파일 폴더 및 드라이브 표시\"\n        }), \"를 체크하고, \", _jsx(_components.strong, {\n          children: \"알려진 파일 형식의 파일 확장명 숨기기\"\n        }), \"의 체크를 해제합니다. 이렇게 하면 숨겨진 파일들은 투명하게 보이게 되고, 파일의 확장자들도 보이게 됩니다. 이렇게 하면 기본적인 폴더 설정은 끝난겁니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이 부분은 개인의 기호에 따라 다르긴 하지만 코드를 작성하는 개발자들은 파일의 확장자가 보이는 게 더 편할겁니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"개발폴더-만들기\",\n        children: \"개발폴더 만들기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이제는 개발폴더를 만들어야겠습니다. 원하는 경로에 폴더 하나를 만듭니다. \", _jsx(_components.strong, {\n          children: \"웬만하면 경로에 한글이 없는 것이 개발할 때에 정신건강에 좋습니다.\"\n        }), \" 폴더의 경로에 한글이 들어가면 혹시라도 오류가 날 수 있기 때문에 영어만 있는 경로를 추천합니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"우리가 만든 이 폴더는 우리의 전용 개발폴더가 될 겁니다. 이 안에 우리의 다양한 프로젝트를 넣어두면 되는 것이죠. 앞으로도 사용할 폴더이기 때문에 잘 기억해두도록 합시다. 저같은 경우는 아래와 같은 식으로 분류를 해두고 프로젝트들을 관리하고 있습니다.\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1uWoZB7EcFsGHnq-0fEXruCUIHcg9BNyK\",\n        alt: \"개발폴더는 자유롭게 관리하면 된다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"우리가 만든 폴더는 컨테이너 같은 겁니다. 이 폴더의 안에 각각의 프로젝트 폴더가 생기겠죠. 저는 WebTuto라는 이름의 폴더를 이번 HTML 가이드의 폴더로 결정했습니다. 여러분은 원하는 이름으로 아무거나 만들어주시면 됩니다. 단, 위에서 말한 것처럼 한글은 배제하고 폴더 이름을 정하는 것이 좋습니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"메모장을-사용할-때의-주의사항\",\n        children: \"메모장을 사용할 때의 주의사항\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"오래 사용할 것은 아니지만 적어도 파일 하나 정도는 메모장으로 만들어볼 겁니다. 이번 글에서는 쓰지 않지만요. 지금은 간단하게 메모장으로 파일을 저장할 때에 주의 사항에 대해서 이야기할까 합니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"메모장은 txt 파일을 관리하는 것에 특화되어있기 때문에 저장을 하면 기본적으로 txt 파일로 저장이 됩니다. 우리가 만들 파일은 html 파일이기 때문에 파일 형식은 모든 파일로 설정합니다. 인코딩은 중요한데 \", _jsx(_components.strong, {\n          children: \"UTF-8\"\n        }), \"로 설정하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"HTML 파일의 확장자는 html입니다. CSS나 자바스크립트도 메모장으로 코딩할 수 있습니다. 아무튼 아직은 파일을 만들 것은 아니지만 아래의 이미지처럼 설정해두고 저장하면 되겠습니다.\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1dM86G-OkHSTSWKTzvuXTiKZ0YZRk0F4S\",\n        alt: \"인코딩과 파일 형식 설정하기.\"\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsxs(P, {\n        children: [\"이번 글에서는 개발환경에 대해서 알아봤습니다. 다시 개발환경에 대해 설명하자면 \", _jsx(Mark, {\n          children: \"파일을 모아놓는 폴더부터 시작해서 편집기까지 모두를 아울러 부르는 말입니다.\"\n        }), \" 어떤 프로그래밍 언어를 배우더라도 개발환경은 갖추고 시작합니다. HTML은 개발환경 갖추기가 아주 간단한 편에 속한다는 것만 알아두면 좋겠습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"처음에는 메모장을 사용하다가 다른 편집기를 사용할건데 다른 설정은 그대로 두면 되고 편집기만 바꾸면 됩니다. 그럼 개발폴더도 만들었고 메모장도 준비했으니 코딩을 할 준비가 확실히 되었습니다. 그럼 다음 글에서는 \", _jsx(_components.strong, {\n          children: \"HTML의 기본적인 구조\"\n        }), \"에 대해서 알아보도록 합시다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-06-02-01-development-environment"},"prev":{"frontMatter":{"id":16,"title":"웹 개발을 위한 HTML 가이드 4편 - 태그와 태그의 관계","description":"이번 글은 웹 개발을 위한 HTML 가이드 4편입니다. 저번 글에서는 태그의 특징에 대해서 알아봤습니다. 정확히는 태그의 특징에 따른 두가지의 종류에 대해 알아봤죠. 이번 글에서는 태그들의 관계에 대해서 알아보도록 합시다. HTML 문서에서 태그들은 하나만 쓰이지는 않습니다. 여러개의 태그가 사용됩니다. 태그의 안에 태그가 들어가고 그 안에 태그가 들어가기도 합니다. 그렇기 때문에 HTML의 태그들은 부모 자식 관계가 존재하고, 자손, 혹은 형제 관계가 존재합니다. 이번 글에서는 이런 것들을 알아볼 예정입니다. 알아볼 내용이 많지는 않습니다. 중요한 것이니 이해하고 넘어가도록 하는 것이 좋습니다. 또한 CSS나 자바스크립트에서도 이러한 관계를 이해하고 있어야지만 진행이 가능하기 때문에 반드시 이해하고 넘어갑시다.","coverImage":"https://drive.google.com/uc?export=view&id=1EbnRsCBDNevV7FiKHAH7wf4WJlccPhxN","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","부모 태그","자식 태그","자손 태그"],"categories":["가이드","HTML"],"createdAt":1622028300000,"updatedAt":1622028300000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"slug":"2021-05-26-01-parent-child-sibling","fullPath":"/post/2021-05-26-01-parent-child-sibling","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n이번 글은 웹 개발을 위한 HTML 가이드 4편입니다. 저번 글에서는 태그의 특징에 대해서 알아봤습니다. 정확히는 태그의 특징에 따른 두가지의 종류에 대해 알아봤죠. 이번 글에서는 태그들의 관계에 대해서 알아보도록 합시다.\r\n\r\nHTML 문서에서 태그들은 하나만 쓰이지는 않습니다. 여러개의 태그가 사용됩니다. 태그의 안에 태그가 들어가고 그 안에 태그가 들어가기도 합니다. 그렇기 때문에 HTML의 태그들은 부모 자식 관계가 존재하고, 자손, 혹은 형제 관계가 존재합니다. 이번 글에서는 이런 것들을 알아볼 예정입니다.\r\n\r\n알아볼 내용이 많지는 않습니다. 중요한 것이니 이해하고 넘어가도록 하는 것이 좋습니다. 또한 CSS나 자바스크립트에서도 이러한 관계를 이해하고 있어야지만 진행이 가능하기 때문에 반드시 이해하고 넘어갑시다.\r\n\r\n<P>일단 우리는 아직 어떤 태그들이 존재하는지 알지 못합니다. 따라서 이번 글에서 언급되는 태그들이 무엇인지는 지금은 몰라도 됩니다. 추후에 알게 될 내용들이니까 <Bold>태그들의 관계에 대해서만 집중</Bold>을 하시면 되겠습니다.</P>\r\n\r\n# 부모 태그와 자식 태그\r\n```html\r\n<div>\r\n  부모\r\n  <p>자식</p>\r\n</div>\r\n```\r\n\r\n가장 먼저 알아볼 것은 <Bold>부모 태그와 자식 태그</Bold>입니다. 위의 코드에는 두가지의 태그가 있습니다. `div`태그가 있고 그 안에 `p`태그가 있죠. <Mark>어떠한 태그의 안에 다른 어떠한 태그가 들어가 있는 경우를 부모 태그와 자식 태그라고 부릅니다.</Mark> 바깥에 있는 태그가 부모 태그이고 안에 있는 태그가 자식 태그입니다.\r\n\r\n위의 코드에서 부모 태그는 `div`태그인 것이고 자식 태그는 `p`태그인 것이죠. 부모 태그는 **parent Element**라고 하고 자식 태그는 **child Element**라고 부릅니다. 태그는 엘리먼트라고 부르기도 한다고 했었죠.\r\n\r\n쉽게 말해서 부모 태그와 자식 태그는 한 단계 위 아래 관계일 때를 말하는 것이라고 생각하면 됩니다. 부모 태그가 한 단계 위에 있는 태그이고 자식 태그가 한 단계 아래에 있는 태그겠죠. 단계로 구분하면 간단하겠네요!\r\n\r\n<Message color='g'>\r\n  <p>자식 태그로 사용되는 태그들은 들여쓰기를 하는 것이 보통입니다. 가독성이 좋아지기도 하고 구분도 쉬워지기 때문에 들여쓰기는 빼놓지 않고 하도록 합시다.</p>\r\n</Message>\r\n\r\n## 자손 태그와 조상 태그\r\n```html\r\n<div>\r\n  <p>\r\n    <a href=\"#\">링크</a>\r\n  </p>\r\n</div>\r\n```\r\n\r\n그럼 두 단계 이상 차이나는 경우는 어떨까요? 위의 코드처럼 세개의 태그가 사용되었고 자식 태그의 안에 또 자식 태그가 있다면 말이죠. `div`태그의 입장에서 `a`태그는 무엇일까요? 정답은 **자손 태그**입니다. 영어로 **Descendant**라고 합니다. `a`태그 입장에서는 `div`태그가 **조상 태그**겠죠.\r\n\r\n자식 태그와 자손 태그는 비슷하기 때문에 많이들 착각하는 부분입니다. 이럴 때에는 간단하게 한 단계 차이가 나면 부모 자식 관계이고 두 단계 이상 차이가 나면 조상, 자손 태그라고 생각하면 되겠습니다. <Mark>CSS에서도 자식 태그와 자손 태그를 구분하기 때문에 알아둬야 합니다.</Mark>\r\n\r\n# 형제 태그\r\n```html\r\n<div>아이유</div>\r\n<div>아이유 동생</div>\r\n```\r\n\r\n위 코드처럼 같은 단계에 있는 태그들은 **형제 태그**라고 부릅니다. 영어로는 **Sibling**이라고 합니다. 형제 중 하나에게 자식이 있든 자손이 있든 상관 없습니다. <Mark>같은 부모 태그 한 단계 아래에 있다면 전부 형제 태그입니다.</Mark>\r\n\r\n<Line />\r\n\r\n여기까지 부모 태그와 자식 태그, 형제 태그 그리고 자손에 대해서 알아보았습니다. 이해가 잘 안될 수도 있습니다. 충분히 그럴 수 있거든요. 이해가 잘 안되는 부분은 여러번 읽어보면 이해가 될 겁니다. 이번 글로 알 수 있는 내용은 첫째로 태그들은 단계에 따라서 호칭이 존재한다는 것이 있죠. 둘째로 자식 태그들은 들여쓰기를 한다는 점이 있습니다.\r\n\r\nHTML의 문법도 알게 되었고 태그의 특징도 알게 되었고 태그들간의 관계에 대해서도 알게 되었습니다. 이제 정말 기본적인 사전 지식은 전부 알게 되었습니다. 이제부터 우리는 본격적으로 HTML을 시작해볼 겁니다. 다음 글에서는 **개발환경을 갖추는 것**을 진행해보도록 합시다.\r\n\r\n다음 글을 보기 전에 이번 글의 내용을 여러번 복습하고 되새겨보는 시간을 가지면 좋을 것 같습니다.\r\n","date":{"year":"2021","month":"05","yearMonth":"2021-05"}},"next":{"frontMatter":{"id":18,"title":"웹 개발을 위한 HTML 가이드 6편 - HTML의 기본적인 구조","description":"이전 글들을 통해서 HTML의 기본적인 사전 지식에 대해 알아봤습니다. 우리는 HTML이 무엇인가에 대해서 알았고 어떻게 생긴 것인지 알았고 문법을 알아봤습니다. 무엇을 할 수 있는지 알았으며 태그의 특성에 대해서도 알아봤습니다. 개발환경도 갖췄으니 이제는 정말로 본격적인 코딩을 시작할 순간입니다. 이번 글에서 아주 간단한 페이지를 하나 만들어보는 것으로 우리는 웹을 이루는 가장 기본적인 구조에 대해서 알아보는 용기 있는 발걸음을 해보려고 합니다. 혹 아직 기초적인 지식이 없다면 이 가이드의 첫 글부터 보고 오시면 좋겠습니다. 그럼 웹 개발을 위한 HTML 가이드 6편 시작합니다.","coverImage":"https://drive.google.com/uc?export=view&id=1_xmljr6hot9pzjv76n0quy1LvtbwCW1-","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","HTML의 기본구조"],"categories":["가이드","HTML"],"createdAt":1622825580000,"updatedAt":1636817700000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"slug":"2021-06-05-01-html-basic-structure","fullPath":"/post/2021-06-05-01-html-basic-structure","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n이전 글들을 통해서 HTML의 기본적인 사전 지식에 대해 알아봤습니다. 우리는 **HTML이 무엇인가**에 대해서 알았고 어떻게 생긴 것인지 알았고 **문법**을 알아봤습니다. **무엇을 할 수 있는지** 알았으며 **태그의 특성**에 대해서도 알아봤습니다. **개발환경**도 갖췄으니 이제는 정말로 **본격적인 코딩**을 시작할 순간입니다.\r\n\r\n<P>이번 글에서 아주 간단한 페이지를 하나 만들어보는 것으로 우리는 <Mark>웹을 이루는 가장 <Strong>기본적인 구조</Strong>에 대해서 알아보는 용기 있는 발걸음</Mark>을 해보려고 합니다. 혹 아직 기초적인 지식이 없다면 이 가이드의 첫 글부터 보고 오시면 좋겠습니다. 그럼 웹 개발을 위한 HTML 가이드 6편 시작합니다.</P>\r\n\r\n# 기본적인 구조\r\n```html\r\n<!DOCTYPE html>\r\n<!-- 이 문서가 HTML5 문서임을 알리는 코드입니다. -->\r\n<html lang=\"ko\">\r\n<!-- 모든 HTML 문서는 html 태그로 감싸야 합니다. -->\r\n<head>\r\n  <!-- head 태그 안에는 페이지들의 메타데이터들이 들어갑니다. -->\r\n  <!-- 메타 데이터에 대해서는 나중에 알게 됩니다. -->\r\n  <meta charset=\"UTF-8\" />\r\n  <!-- 이 태그는 다른 메타 데이터들과 다르게 언급하고 넘어가야 합니다. -->\r\n  <!-- 이 태그를 빼먹으면 경우에 따라서 한글이 깨질 수가 있습니다. UTF-8은 거의 모든 유니코드를 표현할 수 있는 체계입니다. -->\r\n  <title>Document</title>\r\n  <!-- title 태그는 말 그대로 페이지의 제목을 나타냅니다. -->\r\n</head>\r\n<body>\r\n  <!-- 여기에 가시적인 컨텐츠 내용이 들어갑니다. -->\r\n</body>\r\n</html>\r\n```\r\n\r\n![위의 코드대로 작성한 웹 페이지의 모습이다. 컨텐츠가 없기 때문에 아무것도 안보이지만 제목은 보인다.](https://drive.google.com/uc?export=view&id=1RBRhpLn6GYk27el-M4DHzzTSIrKyPcFU)\r\n\r\n웹 페이지들은 **HTML의 태그**로 이루어져 있습니다. 그리고 하나의 페이지에는 아주 기본적인 태그들이 **반드시** 들어갑니다. 위의 코드에 없는 태그들은 반드시 필요한 태그는 아니기 때문에 없어도 됩니다. 어디까지나 필수 조건에 대한 것입니다. 모든 페이지를 이렇게만 만들면 아무것도 없겠죠. 따라서 어차피 다양한 태그를 사용하게 됩니다.\r\n\r\n이번 글에서는 기본적인 구조를 알아보는 것이니 다른 소리는 잘라내고, 다시 본론으로 돌아와서 위의 태그들에 주석으로 작성해둔 내용을 보면 대강 어떤 기능을 하는지 알 수 있습니다. 이렇게만 보면 이해하기가 어렵죠. 그러니 차근 차근 하나 하나 살펴보도록 합시다.\r\n\r\n메모장을 켜고 순서대로 작성해보도록 합시다.\r\n\r\n## DOCTYPE\r\n```html\r\n<!DOCTYPE html>\r\n<!-- 이 문서가 HTML5 문서임을 알리는 코드입니다. -->\r\n```\r\n\r\n이 코드는 이 문서가 **HTML 5**로 만들어졌다는 것을 선언하는 코드입니다. **독타입**이라고 부릅니다. 즉, 이 코드가 있으면 브라우저는 이 문서가 HTML 문서이고 어떤 버전인지를 알 수 있습니다. 우리가 배우려는 것은 HTML 중에서도 5버전에 해당합니다. 5버전의 선언문은 위와 같습니다.\r\n\r\n**가장 중요한 것은 이 코드는 항상 문서의 가장 첫줄에 있어야한다는 것입니다. 절대적으로 지켜져야 합니다.**\r\n\r\n## html 태그\r\n```html\r\n<html lang=\"ko\">\r\n  <!-- 모든 HTML 문서는 html 태그로 감싸야 합니다. -->\r\n</html>\r\n```\r\n\r\n`html`태그는 최상위의 부모 태그가 됩니다. 모든 태그들은 이 태그로 감싸야 합니다. `html`태그에는 `lang`이라는 속성이 있고, 속성 값으로는 국가코드를 적어주면 되겠습니다. `ko`는 한국을 의미하죠. 실제로 해외 사이트에 들어가보면 저 부분에 `en`이나 `ja` 같은 코드들이 들어가 있는 것을 볼 수 있을 겁니다.\r\n\r\n<Message color='g'>\r\n  <p>크롬이나 웨일 브라우저 같은 최신식 브라우저들을 통해서 웹 페이지의 구성요소를 검사할 수 있는 기능을 사용하면 어떤 웹 페이지가 어떤 코드로 이루어져 있는지 알 수 있습니다. 크롬이나 웨일 브라우저를 기준으로 <Strong>F12</Strong>를 누르면 개발자 콘솔이 뜹니다.</p>\r\n</Message>\r\n\r\n이 국가 코드들은 **ISO 639-1**에 해당하는 약속된 문자열입니다. 우리는 한국인이고 한국어로 된 웹 페이지들을 만들 가능성이 높기 때문에 그냥 `ko`를 적어주면 되겠습니다.\r\n\r\nHTML 문서에 반드시 필요한 네가지의 태그 중 하나로 이 문서가 HTML 문서라는 것을 알려주는 태그가 바로 `html`태그 입니다.\r\n\r\n## head 태그\r\n```html\r\n<head>\r\n  <!-- head 태그 안에는 페이지들의 메타데이터들이 들어갑니다. -->\r\n  <!-- 메타 데이터에 대해서는 나중에 알게 됩니다. -->\r\n</head>\r\n```\r\n\r\n`head`태그에는 웹 페이지의 **메타데이터**들이 들어갑니다. 메타데이터라는 것은 웹 페이지의 정보들을 말합니다. 눈에는 보이지 않지만 **브라우저**나 **검색 엔진**들은 이 메타데이터를 읽어서 적용합니다.\r\n\r\n쉽게 말하면 웹 페이지의 컨텐츠에 **직접적인 영향을 주지 않는** 것들이 들어가는 태그라고 이해하면 되겠습니다.\r\n\r\n## title 태그\r\n```html\r\n<title>Document</title>\r\n<!-- title 태그는 말 그대로 페이지의 제목을 나타냅니다. -->\r\n```\r\n\r\n페이지의 제목을 설정할 때에 사용하는 태그입니다. `head`태그의 안에 들어가고 `title`태그를 작성하지 않으면 **제목이 없는 페이지가 되어버립니다.** 검색이 잘 되지 않을 뿐더러 구분도 어렵겠죠. 때문에 중요한 태그 중의 하나라고 할 수 있습니다.\r\n\r\n## meta 태그(charset=\"UTF-8\")\r\n```html\r\n<meta charset=\"UTF-8\" />\r\n<!-- 이 태그는 다른 메타 데이터들과 다르게 언급하고 넘어가야 합니다. -->\r\n<!-- 이 태그를 빼먹으면 경우에 따라서 한글이 깨질 수가 있습니다. UTF-8은 거의 모든 유니코드를 표현할 수 있는 체계입니다. -->\r\n```\r\n\r\n`head`태그의 안에는 다양한 메타 데이터들이 들어갑니다. `title`태그도 그러한 메타 데이터 중의 하나입니다. `meta`태그는 종류가 많지만 그 중에서도 **가장 중요하다고 할 수 있는 녀석**에 대해 먼저 소개해야겠습니다. 이 녀석은 페이지의 문자와 관련이 되어있습니다. `charset=\"UTF-8\"`라는 속성을 가지게 되면 이 태그가 있는 페이지는 **거의 모든 유니코드를 표현**할 수 있게 됩니다.\r\n\r\n![한글이 깨질 수도 있다.](https://drive.google.com/uc?export=view&id=1eMWzyOIVjAfv6R0T34IiMZG7BJfrV8oE)\r\n\r\n만일 이 태그가 없다면 **경우에 따라서 한글이 깨질 수**가 있습니다. 그래서 넣어주는 것이 좋습니다. 다음 메타 태그들은 나중에 알아보도록 합시다.\r\n\r\n## body 태그\r\n```html\r\n<body>\r\n  <!-- 여기에 가시적인 컨텐츠 내용이 들어갑니다. -->\r\n</body>\r\n```\r\n\r\n실질적인 컨텐츠가 들어가는 부분입니다. `body`태그의 안에 우리가 작성할 거의 모든 태그들이 들어갑니다. 화면에 보여야 하는 정보들은 전부 이 안에 들어간다고 보면 됩니다. 앞으로 배울 태그들은 거의 다 이 안에 들어갈겁니다.\r\n\r\n# 파일 저장하기\r\n<P>여기까지가 기본적인 구조에 해당되는 부분입니다. 여기까지 작성했으면 저장을 합시다. <Strong>다른 이름으로 저장</Strong>을 이용해서 파일 형식은 <Strong>모든 파일</Strong>로 설정하고, 파일 이름은 <Name>index.html</Name> 이라고 하겠습니다. 사실 아무거나 해도 됩니다. 인코딩은 <Strong>UTF-8</Strong>로 설정해두고 저장을 합시다.</P>\r\n\r\n![저장은 이렇게 하면 된다.](https://drive.google.com/uc?export=view&id=1MSmz4cGQC5UtnFB6h-x2yA8p_BtKo6pg)\r\n\r\n위의 설명과 이미지를 참고해서 저장을 하시면 되겠습니다. 저장을 하고나면, 실행을 해보세요!\r\n\r\n![빈 창이 뜨면 정상이다.](https://drive.google.com/uc?export=view&id=1f83UAD9QoBOZvCWXO8HatZZSbQCDt3t2)\r\n\r\n축하합니다! 이제 여러분은 웹 페이지를 만들 수 있습니다! 이것들이 웹 페이지의 가장 기본적인 정수입니다. 이 세상의 모든 웹 사이트들도 전부 이렇게 **HTML로 구성**되어있습니다.\r\n\r\n**웹 표준**이나 **SEO**를 충족하기 위해선 더 많은 내용들이 들어가지만 지금은 몰라도 됩니다. 추후에 알게 될 내용들이기 때문이죠. 그런데도 지금 언급하는 이유는 이름이라도 언급해두면 그런게 있다 정도는 알 수 있기 때문입니다.\r\n\r\n<Line />\r\n\r\n자, 그렇다면 이제 다음 글로 넘어가도록 합시다. 물론, 이 부분이 잘 이해되지 않는다면 **여러 번 읽어보고 이해하고 넘어가는 게** 좋습니다. 이번 글에서 배운 내용은 앞으로 다시는 언급되지 않고 기본적으로 알고 있는 것으로 간주합니다. 웹 페이지를 만든다고 하면 이 기본적인 구조를 적용한 상태로 시작하는 겁니다.\r\n\r\n<P>앞으로 배우는 거의 모든 태그들은 <Code>body</Code>태그의 안에 들어간다는 점 다시 한 번 기억하시면 되겠습니다. 그리고 오늘 만든 <Name>index.html</Name>파일은 우리의 프로젝트 폴더에 그대로 남겨두시면 됩니다. 앞으로 이 파일을 메인 프로젝트의 대문처럼 사용할 겁니다.</P>\r\n\r\n그럼 이번 글은 여기서 마치도록 하겠습니다. 다음 글에서 봅시다.\r\n","date":{"year":"2021","month":"06","yearMonth":"2021-06"}}},"__N_SSG":true}