{"pageProps":{"post":{"frontMatter":{"id":32,"title":"웹 개발을 위한 HTML 가이드 16편 - 개행과 가로줄 태그","description":"이번 글은 웹 개발을 위한 HTML 가이드 16편입니다. 텍스트 관련 태그 그 두번째 파트이고, 개행과 가로줄 태그에 대해서 알아보려고 합니다. 말했듯이 이번 글에서 알아볼 태그는 총 두가지입니다. 하나는 이미 다뤘던 적이 있는 줄바꿈을 만들어주는 개행 태그. 즉 br태그입니다. 다른 하나는 페이지에 가로줄을 만들어주는 hr태그가 준비되어 있습니다. 이번 글도 그렇게 길지 않고 어려운 내용은 없을 겁니다. 천천히 함께 알아보도록 합시다. 이번 글을 포함한 앞으로의 가이드에서는 새로운 태그를 연습하기 위해서 우리의 프로젝트 폴더에 연습 파일을 하나 만들고, 그 안에서 연습을 진행한 다음에 우리 프로젝트 폴더에서 메인이 되는 index.html 파일에서 본격적인 실습을 진행하고 각 가이드를 마칠 생각입니다.","coverImage":"https://drive.google.com/uc?export=view&id=1MLhth3dqm4hUwLPxm-lHOFc7dmFvy8El","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","개행","줄바꿈","가로줄","hr 태그","br 태그"],"categories":["가이드","HTML"],"createdAt":1636728960000,"updatedAt":1636728960000,"keywords":[],"drawDate":1636728960000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      strong: \"strong\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      img: \"img\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, HTMLTextPosts, P, Strong, Name, Line} = _components;\n    if (!HTMLTextPosts) _missingMdxReference(\"HTMLTextPosts\", true);\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!Name) _missingMdxReference(\"Name\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsx(HTMLTextPosts, {}), \"\\n\", _jsx(_components.h1, {\n        id: \"개요\",\n        children: \"개요\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글은 \", _jsx(_components.strong, {\n          children: \"웹 개발을 위한 HTML 가이드 16편\"\n        }), \"입니다. 텍스트 관련 태그 그 두번째 파트이고, 개행과 가로줄 태그에 대해서 알아보려고 합니다. 말했듯이 이번 글에서 알아볼 태그는 총 두가지입니다. 하나는 이미 다뤘던 적이 있는 \", _jsx(_components.strong, {\n          children: \"줄바꿈\"\n        }), \"을 만들어주는 개행 태그. 즉 \", _jsx(_components.code, {\n          children: \"br\"\n        }), \"태그입니다. 다른 하나는 페이지에 \", _jsx(_components.strong, {\n          children: \"가로줄\"\n        }), \"을 만들어주는 \", _jsx(_components.code, {\n          children: \"hr\"\n        }), \"태그가 준비되어 있습니다. 이번 글도 그렇게 길지 않고 어려운 내용은 없을 겁니다. 천천히 함께 알아보도록 합시다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"이번 글을 포함한 앞으로의 가이드에서는 새로운 태그를 연습하기 위해서 우리의 프로젝트 폴더에 \", _jsx(Strong, {\n          children: \"연습 파일\"\n        }), \"을 하나 만들고, 그 안에서 연습을 진행한 다음에 우리 프로젝트 폴더에서 메인이 되는 \", _jsx(Name, {\n          children: \"index.html\"\n        }), \" 파일에서 본격적인 실습을 진행하고 각 가이드를 마칠 생각입니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"개행-태그br\",\n        children: \"개행 태그(br)\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"HTML 상에서 아무리 엔터를 많이 치고 스페이스를 많이 넣더라도 실제 웹 상에서 보여지는 공백은 \", _jsx(_components.strong, {\n          children: \"오직 한 칸\"\n        }), \"에 불과합니다. 하지만 가끔은 줄바꿈을 통해서 레이아웃을 조정하고 싶을 때라던지 문단의 안에서 엔터를 친 것처럼 줄바꿈을 반영하고 싶을 때가 있죠. 그럴 때에 \", _jsx(_components.code, {\n          children: \"br\"\n        }), \"태그를 사용합니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"자, 우리의 프로젝트 폴더에 파일을 하나 만들어봅니다. 저는 \", _jsx(Name, {\n          children: \"br.html\"\n        }), \"이라고 이름을 지었습니다. 이제 html의 기본적인 구조는 다들 아실 겁니다. 따라서 그 부분은 생략토록 하고 작성을 해주시면 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이제 \", _jsx(_components.code, {\n          children: \"body\"\n        }), \"태그 안에 아래와 같은 코드를 작성해보세요. 아 물론, 글자는 아무렇게나 해도 상관 없습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  엔터를 치면\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  어떻게 될까?\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"작성을 한 다음에 여러분이 직접 실행해서 확인해보세요. 결과는 어땠나요?\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=11Sep5PmZvsKiLCGvjGYQFgZyFo7HZFph\",\n        alt: \"HTML에서 엔터는 아무런 의미가 없다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"엔터를 몇 번을 치건 스페이스를 몇 번을 누르건 위의 이미지처럼 \", _jsx(_components.strong, {\n          children: \"아무런 의미가 없습니다.\"\n        }), \" 반영이 안되기 때문이죠. 그래서 \", _jsx(_components.code, {\n          children: \"br\"\n        }), \"태그를 사용하는 겁니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  엔터를 치면\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"br\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  어떻게 될까?\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"br\"\n        }), \"태그는 홀로 닫는 태그입니다. 반드시 \", _jsx(_components.code, {\n          children: \"<이름 />\"\n        }), \" 이렇게 적을 필요는 없습니다. 하지만 이렇게 표기하는 것을 추천합니다. 직관적이니까요. 아무튼, 이렇게 수정을 하고 실행해봅시다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=11aS0k6Z82gZ4_k5soXe1yQKErAA-BTPh\",\n        alt: \"줄바꿈이 적용된 것을 볼 수 있다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"줄바꿈이 되었습니다. \", _jsx(_components.strong, {\n          children: \"줄바꿈이 필요할 때\"\n        }), \"에는 \", _jsx(_components.code, {\n          children: \"br\"\n        }), \"태그를 사용한다는 것을 인지하시면 되겠습니다. 그럼 다음으로 넘어갑시다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"가로줄-태그hr\",\n        children: \"가로줄 태그(hr)\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"가로줄을 만들어주는 태그는 사실 그렇게 많이 쓰이지는 않는 것 같은데 저는 가끔 사용합니다. 그래서 다뤄보도록 하겠습니다. 가로줄을 만들어주는 태그는 \", _jsx(_components.code, {\n          children: \"hr\"\n        }), \"태그입니다. 홀로 닫는 태그이고 사용하는 방법은 아주 간단합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsx(_components.code, {\n          className: \"language-html code-highlight\",\n          children: _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"hr\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\n\"]\n          })\n        })\n      }), \"\\n\", _jsxs(P, {\n        children: [\"이번에는 예제 파일을 만들 필요 없이 그냥 보기만 하셔도 됩니다. 저는 만들어두겠습니다. 웬만하면 구분을 해서 예제 파일을 만드는 것을 좋아합니다. 위의 코드를 입력한 \", _jsx(Name, {\n          children: \"hr.html\"\n        }), \" 파일을 실행해보겠습니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1NKr876xR42YXblrVmC8olj6W40PsHfqU\",\n        alt: \"그냥 가로줄을 만들어준다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그냥 이렇게 가로줄을 만들어줍니다. 별 건 없죠.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"실전-연습\",\n        children: \"실전 연습\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이번 글에서는 딱히 실습을 할 필요는 없어서 넘어가도록 하겠습니다. 우리가 만든 프로젝트에는 가로줄이나 줄바꿈은 필요가.. 없을 것 같습니다. 앞으로도 우리의 프로젝트에 필요한 것 같다면 실습을 반드시 진행하는 것으로 가닥을 잡으면 될 듯합니다. 그러니 이번 글은 그냥 넘어가도록 합시다.\"\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글에서는 \", _jsx(_components.strong, {\n          children: \"개행\"\n        }), \"과 \", _jsx(_components.strong, {\n          children: \"가로줄\"\n        }), \"을 만들어주는 \", _jsx(_components.code, {\n          children: \"br\"\n        }), \"태그와 \", _jsx(_components.code, {\n          children: \"hr\"\n        }), \"태그에 대해서 알아봤습니다. 많이 사용되지는 않더라도 언젠가는 사용할 일이 있을지도 모릅니다. 기억을 해두는 것을 추천드립니다. 그럼 이번 글은 여기서 이렇게 마치도록 하겠습니다. 다음 글은 \", _jsx(_components.strong, {\n          children: \"윗첨자와 아랫첨자\"\n        }), \"를 만드는 태그에 대해서 알아보도록 합시다. 다음 글에서 봅시다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-11-12-32-br-and-hr-tag"},"prev":{"frontMatter":{"id":31,"title":"웹 개발을 위한 HTML 가이드 15편 - 굵기와 기울기 태그","description":"이번 글은 웹 개발을 위한 HTML 가이드 15편입니다. 저번 글에서는 하이퍼 링크를 만들어주는 링크 태그인 a태그에 대해서 알아봤습니다. 이번 글부터는 텍스트에 관련된 태그들을 알아볼 알아보려고 합니다. 태그의 개수가 많아서 여러 파트로 나눠서 진행할 생각입니다. 이 글은 그 첫번째입니다. 이번 글에서 알아볼 태그는 총 네가지로, 굵기 태그 두개와 기울기 태그 두개입니다. 네가지의 태그지만 어렵지는 않기 때문에 간단하게 이해할 수 있을 것이라고 생각됩니다. 자, 그럼 함께 알아보도록 합시다. 텍스트를 강조하는 다양한 방법 중에서 가장 기본적인 두가지의 방법은 텍스트를 굵게 만들거나 기울이는 것입니다. 각각 두가지의 방법이 있는데 어떻게 다르고 어떻게 사용하면 좋은지 간단하게 살피고 다음 파트로 넘어가도록 합시다.","coverImage":"https://drive.google.com/uc?export=view&id=1SYCUKvxXIB0qkzRyjzTFeUd0fKpl2oi2","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","b 태그","i 태그","em 태그","strong 태그","굵기 태그","기울기 태그"],"categories":["가이드","HTML"],"createdAt":1635569880000,"updatedAt":1636817700000,"keywords":[],"drawDate":1635569880000,"display":true,"type":"post"},"slug":"2021-10-30-31-text-bold-and-italic-tags","fullPath":"/post/2021-10-30-31-text-bold-and-italic-tags","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd, HTMLTextPosts\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n<HTMLTextPosts />\r\n\r\n# 개요\r\n이번 글은 웹 개발을 위한 HTML 가이드 15편입니다. 저번 글에서는 **하이퍼 링크**를 만들어주는 링크 태그인 `a`태그에 대해서 알아봤습니다. 이번 글부터는 **텍스트**에 관련된 태그들을 알아볼 알아보려고 합니다. 태그의 개수가 많아서 여러 파트로 나눠서 진행할 생각입니다. 이 글은 그 첫번째입니다. 이번 글에서 알아볼 태그는 총 네가지로, 굵기 태그 두개와 기울기 태그 두개입니다.\r\n\r\n텍스트 관련 태그들은 보통 `p`태그와 함께 이용하는 편입니다. `p`태그가 문단을 나타내는 가장 텍스트스러운 태그이기 때문입니다.\r\n\r\n네가지의 태그지만 어렵지는 않기 때문에 간단하게 이해할 수 있을 것이라고 생각됩니다. 자, 그럼 함께 알아보도록 합시다.\r\n\r\n# 텍스트의 굵기와 기울기\r\n**텍스트를 강조**하는 다양한 방법 중에서 가장 기본적인 두가지의 방법은 **텍스트를 굵게 만들거나 기울이는 것**입니다. 각각 두가지의 방법이 있는데 어떻게 다르고 어떻게 사용하면 좋은지 간단하게 살피고 다음 파트로 넘어가도록 합시다.\r\n\r\n## 굵기 태그\r\n**굵기 태그**에는 두가지가 있다고 했습니다. `b`태그와 `strong`태그입니다. `b`태그의 **b**는 **bold**의 약자입니다. **strong**태그는 말 그대로 강렬한, 강한. 뭐 이런 의미죠. 아래와 같이 사용하면 됩니다.\r\n\r\n```html\r\n<p><b>아이유</b> 좋아</p>\r\n<p><strong>아이유</strong> 좋아</p>\r\n```\r\n\r\n![굵기 태그는 이렇게 보인다.](https://drive.google.com/uc?export=view&id=1-BHeRgS5fglHDlctL4gJQEYmtRS3CpsA)\r\n\r\n위의 코드는 위의 이미지처럼 나타나게 됩니다. 그냥 이렇게만 보면 이 두가지는 별 차이가 없습니다. 둘 다 굵게 만들어주는 태그이기 때문이죠.\r\n\r\n그럼 이 두가지의 태그는 어떻게 다를까요? 중요한 것이 다릅니다. 전자는 그냥 **굵게 만들어주는** 태그일 뿐이고 후자는 **검색 엔진에게 이 텍스트가 중요한 텍스트다 라는 정보를 알려주는 시맨틱한** 태그라는 것이 다른 점입니다. 그렇기 때문에 중요한 정보일 때에는 `strong`태그를 쓰는 것이 웹 페이지의 검색 노출에 도움이 됩니다.\r\n\r\n그저 굵은 텍스트를 만들고 싶은 경우에는 `span`태그를 이용해서 스타일을 조정하는 방법이 있고 이를 권장하고 있습니다. `b`태그는 사실상 더 이상은 잘 쓰이지 않는 태그입니다. 하지만 우리는 아직 **CSS**를 모르니까 이런 게 있다라는 것만 알아두시면 됩니다.\r\n\r\n## 기울기 태그\r\n이번에는 기울기 태그를 알아봅시다. **기울기 태그**에도 두가지가 있습니다. `i`태그와 `em`태그입니다. `i`태그는 **이탤릭체**의 약자라고 보면 됩니다. `em`태그는 **emphasize**의 약자입니다. 중요하다 라는 의미를 지닌 영단어입니다.\r\n\r\n여기서도 감이 오죠. 이 두 태그는 마찬가지로 **시맨틱한 태그냐 아니냐**로 나뉩니다.\r\n\r\n```html\r\n<p><i>아이유</i> 좋아</p>\r\n<p><em>아이유</em> 좋아</p>\r\n```\r\n\r\n![기울기 태그는 이렇게 보인다.](https://drive.google.com/uc?export=view&id=1kwKqLCNGX5KnCorW9-gxU1bUWL7iatvS)\r\n\r\n`b`태그와 마찬가지로 `i`태그도 잘 쓰이지 않습니다. `em`태그를 더 많이 사용합니다. 그냥 기울기를 표현하고 싶다면 `span`태그를 이용해 **CSS**를 조정하는 방법을 사용합니다. 이 역시도 이렇게 하는것을 추천하고 있습니다.\r\n\r\n## 둘 다 사용하기\r\n굵기 태그와 기울기 태그는 **둘 다 사용할 수** 있습니다. 순서와 상관 없이 둘 다 적용하면 아래와 같은 모양이 됩니다. 정말로 중요하다고 강조를 하는거죠.\r\n\r\n```html\r\n<p>아이유는 2021년 10월 19일 자정에 <strong><em>Strawberry Moon</em></strong>을 공개했다.</p>\r\n```\r\n\r\n![굵기와 기울기를 둘 다 사용할 수 있다.](https://drive.google.com/uc?export=view&id=12iwyDXQx2YSgkGQCmFRpqYlQoKOAnNp8)\r\n\r\n# 실전 연습\r\n그럼 이제 우리의 프로젝트에 한 번 적용해보도록 합시다. 우리가 만들었던 <Name>index.html</Name>파일을 기억하실겁니다. **vscode**를 켜고 이 파일을 열어봅시다.\r\n\r\n```html file=index.html\r\n<body>\r\n  <h1>웹 개발의 3요소</h1>\r\n  <h2><a href=\"https://bit.ly/3lXTSYW\" target=\"_blank\" rel=\"noopener noreferrer\">HTML</a></h2>\r\n  <p>HTML은 웹의 뼈대를 만들어주는 기능을 하는 마크업 언어입니다.</p>\r\n  <h2><a href=\"https://bit.ly/3u9M22j\" target=\"_blank\" rel=\"noopener noreferrer\">CSS</a></h2>\r\n  <p>CSS는 HTML로 만든 뼈대에 피부를 만들어주고 화장을 시켜주는 스타일 시트 언어입니다.</p>\r\n  <h2><a href=\"https://bit.ly/39BnSnM\" target=\"_blank\" rel=\"noopener noreferrer\">JavsScript</a></h2>\r\n  <p>자바스크립트는 HTML과 CSS를 동적으로 제어할 수 있는 웹의 뇌와 같은 언어입니다.</p>\r\n</body>\r\n```\r\n\r\n위와 같은 상태로 저장되어 있을겁니다. 이제 여기에 `strong`태그와 `em`태그를 적용해보려고 합니다. HTML, CSS 자바스크립트라는 텍스트에 적용해보도록 합시다.\r\n\r\n![지금까지의 우리 프로젝트 모습이다.](https://drive.google.com/uc?export=view&id=1mRWGfvGJTB_zw2L2V2tEXjYj0RNcNcY6)\r\n\r\n수정하기 전은 이런 모습이죠. 그럼 이제 수정해봅시다.\r\n\r\n```html file=index.html\r\n<!-- <p>HTML은 웹의 뼈대를 만들어주는 기능을 하는 마크업 언어입니다.</p> -->\r\n<p><strong><em>HTML</em></strong>은 웹의 뼈대를 만들어주는 기능을 하는 마크업 언어입니다.</p>\r\n\r\n<!-- <p>CSS는 HTML로 만든 뼈대에 피부를 만들어주고 화장을 시켜주는 스타일 시트 언어입니다.</p> -->\r\n<p><strong><em>CSS</em></strong>는 HTML로 만든 뼈대에 피부를 만들어주고 화장을 시켜주는 스타일 시트 언어입니다.</p>\r\n\r\n<!-- <p>자바스크립트는 HTML과 CSS를 동적으로 제어할 수 있는 웹의 뇌와 같은 언어입니다.</p> -->\r\n<p><strong><em>자바스크립트</em></strong>는 HTML과 CSS를 동적으로 제어할 수 있는 웹의 뇌와 같은 언어입니다.</p>\r\n```\r\n\r\n주석처리된 부분이 이전 코드이고 주석이 아닌 부분이 새로운 코드입니다. `strong`태그의 안에 `em`태그를 넣고 그 안에 내용물을 넣었습니다. 이렇게 하고 저장하고 라이브 서버를 켜보면 아래와 같은 모습이 됩니다.\r\n\r\n![프로젝트 네번째 과정.](https://drive.google.com/uc?export=view&id=1nvhhET-ieZFNGu0CiDHj6sJz6lKjaHMV)\r\n\r\n<P>오늘의 코드는 깃허브 <A href='https://github.com/nihil-programming-guide/web-tuto/tree/master/HTML' type='normal'>web-tuto</A>에 기록되어 있습니다. 4번을 보시면 됩니다.</P>\r\n\r\n<Line />\r\n\r\n이렇게 우리는 오늘 굵기와 기울기를 적용해봤습니다. 아주 간단하죠? **시맨틱한 태그를 더 많이 사용한다는 것**을 잊지 마시고 공부해봅시다. 앞으로 우리가 알아볼 텍스트 관련 태그가 많습니다. 오늘 함께 배운 내용은 여러번 연습해서 여러분의 것으로 만들어보세요. 이번 글은 여기까지입니다. 다음 글에서는 **개행 태그와 가로줄 태그**를 알아봅시다.\r\n\r\n개행 태그는 이미 다룬 적이 있지만 그래도 다시 다뤄보도록 하겠습니다. 그럼 더 잘 기억이 되겠죠. 그럼 다음 글에서 봅시다.\r\n","date":{"year":"2021","month":"10","yearMonth":"2021-10"}},"next":{"frontMatter":{"id":33,"title":"웹 개발을 위한 HTML 가이드 17편 - 윗첨자와 아랫첨자 태그","description":"웹을 돌아다니다 보면 일반 텍스트보다는 작은 텍스트인데 아래로 내려가 있거나 위로 올라가 있는 텍스트들이 보일 때가 있습니다. 이걸 아랫첨자와 윗첨자라고 합니다. 문서를 만드는 다양한 에디터에는 이런 기능들이 포함되어 있습니다. HTML에서도 가능합니다. 이번 글은 웹 개발을 위한 HTML 가이드 17편입니다. 이번 글에서 다룰 내용은 윗첨자와 아랫첨자입니다. 이번 글의 내용은 아주 중요한 것은 아닙니다. 이런 태그도 있구나 하면서 나중에 생각이 나거나 사용하고 싶을 때에 사용할 수 있으면 이번 글의 학습은 아주 성공적인 것이 됩니다. 그러니까 외울 필요는 없고 이해하고 넘어가는 게 중요합니다.","coverImage":"https://drive.google.com/uc?export=view&id=1DZKYJYrtdWKLy1U4h5QkM3XMSaPqzcMc","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","윗첨자","아랫첨자","sup 태그","sub 태그"],"categories":["가이드","HTML"],"createdAt":1636973760000,"updatedAt":1636973760000,"keywords":[],"drawDate":1636973760000,"display":true,"type":"post"},"slug":"2021-11-15-33-sub-and-sup-tag","fullPath":"/post/2021-11-15-33-sub-and-sup-tag","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd, HTMLTextPosts\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n<HTMLTextPosts />\r\n\r\n# 개요\r\n웹을 돌아다니다 보면 일반 텍스트보다는 작은 텍스트인데 아래로 내려가 있거나 위로 올라가 있는 텍스트들이 보일 때가 있습니다. 이걸 **아랫첨자**와 **윗첨자**라고 합니다. 문서를 만드는 다양한 에디터에는 이런 기능들이 포함되어 있습니다. HTML에서도 가능합니다. 이번 글은 **웹 개발을 위한 HTML 가이드 17편**입니다. 이번 글에서 다룰 내용은 윗첨자와 아랫첨자입니다.\r\n\r\n이번 글의 내용은 아주 중요한 것은 아닙니다. 이런 태그도 있구나 하면서 나중에 생각이 나거나 사용하고 싶을 때에 사용할 수 있으면 이번 글의 학습은 아주 성공적인 것이 됩니다. 그러니까 외울 필요는 없고 이해하고 넘어가는 게 중요합니다.\r\n\r\n# 윗첨자와 아랫첨자\r\n말로는 설명을 했지만 윗첨자나 아랫첨자에 대해서 전혀 모르는 분도 있습니다. 그런 분들을 위해 이미지를 준비했습니다.\r\n\r\n![윗첨자와 아랫첨자는 이런 것이다.](https://drive.google.com/uc?export=view&id=1zHDF_Ksmu7l16IiGBk9mz_AWbLHzAGB9)\r\n\r\n이렇게 텍스트의 특정 부분이 위에 있거나 아래에 있으면 윗첨자, 아랫첨자라고 합니다. 윗첨자와 아랫첨자를 만드는 방법을 배워봅니다. 윗첨자와 아랫첨자는 **타이포그래픽한 것을 연출할 때**에 사용이 됩니다. 과학에서 사용되는 분자식에서 아랫첨자를 사용하는 게 그런 예시라고 보시면 됩니다. 그럼 윗첨자부터 살펴보도록 합시다.\r\n\r\n## 윗첨자 태그(sup)\r\n윗첨자를 나타내는 태그인 `sup`태그는 **Superscript**의 약자입니다. 윗첨자는 보통 나무위키 같은 곳에서 볼 수 있습니다. 이 블로그에서도 각주를 표현할 때에 윗첨자를 이용해서 달아두고 있습니다. 여는 태그와 닫는 태그가 존재하고 아래처럼 사용하면 됩니다.\r\n\r\n```html\r\n<p>아이유는 2021년 올해 29세가 되었다.<sup><a href=\"#\">[1]</a></sup></p>\r\n```\r\n\r\n![윗첨자가 적용된 모습이다.](https://drive.google.com/uc?export=view&id=1VxIbGs0WGIsaBTCHjEAO1c738aTWY3Ll)\r\n\r\n위의 코드를 실행한 결과가 위의 이미지입니다. 이미지를 보면 \\[1\\] 이라는 링크에 해당하는 부분은 윗첨자로 처리를 했는데 잘 표현이 된 것을 볼 수 있습니다. 어려울 것이 없죠?\r\n\r\n## 아랫첨자 태그(sub)\r\n이번에는 아랫첨자에 대해서 알아봅시다. 아랫첨자를 나타내는 태그인 `sub`태그는 **Subscript**의 약자입니다. 아랫첨자는 **분자식**에서 엿볼 수 있습니다. 마찬가지로 여는 태그와 닫는 태그가 있고 그 사이에 내용물을 넣으면 됩니다. 연습하는 느낌으로 분자식을 한 번 만들어봅시다.\r\n\r\n```html\r\n<p>물의 분자식은 <strong>H<sub>2</sub>O</strong>입니다.</p>\r\n```\r\n\r\n![아랫첨자는 분자식 같은 것을 표현할 수 있다.](https://drive.google.com/uc?export=view&id=1rGdK607fBu8JgCrKfXf3HDHim88LkZoq)\r\n\r\n이런식으로 사용하면 되는 태그입니다. HTML은 처음 보기에는 복잡해보일지라도 정작 규칙이 일관적이고 직관적이기 때문에 이해하는 것은 어렵지 않습니다.\r\n\r\n<Line />\r\n\r\n이번 글의 내용은 여기까지입니다. 이번 글에서는 **윗첨자와 아랫첨자**에 대해서 알아봤습니다. 사실 쓸 곳이 그렇게 많지는 않은데 저는 가끔씩 사용합니다. 각주를 달아야 할 때 말이죠. 여러분들도 한쯤은 연습을 해보고 다음 파트로 넘어가는 게 좋을 것 같습니다. 우리 프로젝트에는 적용할 일이 없으니까 실전 연습 파트는 넘어가도록 하겠습니다.\r\n\r\n이번 글은 여기서 마치도록 하겠습니다. 다음 글에서는 **텍스트의 추가, 제외 태그**에 대해서 알아보도록 합시다. 그럼 다음 글에서 봅시다.\r\n","date":{"year":"2021","month":"11","yearMonth":"2021-11"}}},"__N_SSG":true}