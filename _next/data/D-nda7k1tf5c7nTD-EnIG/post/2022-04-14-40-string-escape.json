{"pageProps":{"post":{"frontMatter":{"id":40,"title":"웹 개발을 위한 HTML 가이드 번외 3편 - 탈출문자 사용하기","description":"저번 글 웹 개발을 위한 HTML 가이드 23편 - code, pre 태그에서 예고했던대로 이번 글에서는 HTML에서 사용할 수 있는 탈출 문자에 대해서 알아보려고 합니다. HTML은 웹 페이지의 골격을 만들기 위해 존재합니다. 여기까지는 이제는 다들 아실 것 같아요. 그런데, 이 페이지에 사용되는 문자 중에는 태그 요소에 사용되는 꺽쇠가 쓰일 때가 있습니다. 이 문서처럼 HTML 문법에 관련된 컨텐츠일 경우엔 더더욱 그렇겠죠. 그럴 때 HTML 파일에 꺽쇠를 생각 없이 적으면 웹 페이지가 깨져버릴 수가 있습니다. 왜냐하면 HTML을 실행하면 브라우저가 검사하면서 렌더링을 해주는데 이 과정에서 꺽쇠를 만나면 태그 요소라고 인식을 해버리기 때문입니다. 웹 페이지가 깨져버리면 우리가 원하는 모양이 나오지 않기 때문에 일종의 버그라고 할 수 있겠죠. 이러한 현상을 방지 하기 위해 우리는 탈출 문자를 사용합니다.","coverImage":"https://drive.google.com/uc?export=view&id=1uC2qw2Iye3QkSTNcydjtlW63Zgec1C6_","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","탈출 문자"],"categories":["가이드","HTML"],"createdAt":1649932710000,"updatedAt":1650266363000,"keywords":[],"drawDate":1649932710000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      a: \"a\",\n      strong: \"strong\",\n      h2: \"h2\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, HTMLTextPosts, Dl, Dt, Dd, P, A, Line, Strong} = _components;\n    if (!A) _missingMdxReference(\"A\", true);\n    if (!Dd) _missingMdxReference(\"Dd\", true);\n    if (!Dl) _missingMdxReference(\"Dl\", true);\n    if (!Dt) _missingMdxReference(\"Dt\", true);\n    if (!HTMLTextPosts) _missingMdxReference(\"HTMLTextPosts\", true);\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsx(HTMLTextPosts, {}), \"\\n\", _jsx(_components.h1, {\n        id: \"개요\",\n        children: \"개요\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"저번 글 \", _jsx(_components.a, {\n          href: \"/post/2022-03-29-39-code-and-pre-tag\",\n          children: \"웹 개발을 위한 HTML 가이드 23편 - code, pre 태그\"\n        }), \"에서 예고했던대로 이번 글에서는 HTML에서 사용할 수 있는 탈출 문자에 대해서 알아보려고 합니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"HTML은 웹 페이지의 골격을 만들기 위해 존재합니다. 여기까지는 이제는 다들 아실 것 같아요. 그런데, 이 페이지에 사용되는 문자 중에는 태그 요소에 사용되는 꺽쇠가 쓰일 때가 있습니다. 이 문서처럼 HTML 문법에 관련된 컨텐츠일 경우엔 더더욱 그렇겠죠. 그럴 때 HTML 파일에 꺽쇠를 생각 없이 적으면 \", _jsx(_components.strong, {\n          children: \"웹 페이지가 깨져버릴 수가 있습니다.\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"왜냐하면 HTML을 실행하면 브라우저가 검사하면서 렌더링을 해주는데 이 과정에서 꺽쇠를 만나면 태그 요소라고 인식을 해버리기 때문입니다. 웹 페이지가 깨져버리면 우리가 원하는 모양이 나오지 않기 때문에 일종의 버그라고 할 수 있겠죠. 이러한 현상을 방지 하기 위해 우리는 \", _jsx(_components.strong, {\n          children: \"탈출 문자\"\n        }), \"를 사용합니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"탈출-문자\",\n        children: \"탈출 문자\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"탈출 문자는 프로그래밍을 하면서 특수문자를 사용할 때 혹은 프로그램적인 제한에서 탈출하기 위해 사용하는 문자들입니다. 이러한 행위들을 \", _jsx(_components.strong, {\n          children: \"Escape\"\n        }), \"라고 합니다. 다른 프로그래밍 언어들에도 탈출 문자는 존재합니다. 아무튼 이 글에서는 HTML에 한정된 것들을 다루려고 합니다. 전부를 다루는 것은 어려우니까 자주 다루는 것만 추려서 보여드리도록 하겠습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"자주-사용하는-특수문자\",\n        children: \"자주 사용하는 특수문자\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이 아래는 자주 사용하는 특수문자들을 HTML 문법과 충돌하지 않게 사용하는 방법들입니다.\"\n      }), \"\\n\", _jsxs(Dl, {\n        children: [_jsx(Dt, {\n          children: \"&lt;\"\n        }), \"\\r\\n\", _jsx(Dd, {\n          children: \"<(여는 꺽쇠)를 나타냅니다.\"\n        }), \"\\r\\n\", _jsx(Dt, {\n          children: \"&gt;\"\n        }), \"\\r\\n\", _jsx(Dd, {\n          children: \">(닫는 꺽쇠)를 나타냅니다.\"\n        }), \"\\r\\n\", _jsx(Dt, {\n          children: \"&nbsp;\"\n        }), \"\\r\\n\", _jsx(Dd, {\n          children: \"공백을 나타냅니다.\"\n        }), \"\\r\\n\", _jsx(Dt, {\n          children: \"&amp;\"\n        }), \"\\r\\n\", _jsx(Dd, {\n          children: \"&를 나타냅니다.\"\n        }), \"\\r\\n\", _jsx(Dt, {\n          children: \"&quot;\"\n        }), \"\\r\\n\", _jsx(Dd, {\n          children: \"\\\"(큰따옴표)를 나타냅니다.\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"그-외의-문자들\",\n        children: \"그 외의 문자들\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"위의 내용들은 알아두면 좋은 내용들이지만 사실 반드시 알아야 하지는 않습니다. 어차피 필요하면 찾아보면 되니까요. 그럴 때 \", _jsx(A, {\n          type: \"normal\",\n          href: \"https://dev.w3.org/html5/html-author/charref\",\n          children: \"이 사이트\"\n        }), \"에서 찾아보시면 되겠습니다. 되게 상당한 개수의 특수문자들이 존재합니다.\"]\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsxs(P, {\n        children: [\"이번 글에서는 HTML 상에서 특수문자를 제한없이 사용하는 방법인 \", _jsx(Strong, {\n          children: \"탈출(Escape)\"\n        }), \"에 대해서 알아봤습니다. 사실 탈출문자는 다른 프로그래밍 언어들에서 더 많이 찾게 될 겁니다. 그 때가 언젠가는 오시기 바라면서 이번 글 마치도록 하겠습니다. 다음 글에서는 \", _jsx(Strong, {\n          children: \"나머지 텍스트 관련 태그들\"\n        }), \"에 대해서 다뤄보도록 하겠습니다. 다음 글에서 봅시다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2022-04-14-40-string-escape"},"prev":{"frontMatter":{"id":39,"title":"웹 개발을 위한 HTML 가이드 23편 - code, pre 태그","description":"이번 글은 웹 개발을 위한 HTML 가이드 23편입니다. 이번 글에서는 두가지의 태그를 알아보려고 합니다. code태그와 pre태그입니다. 이 두 태그는 웹 상에서 코드를 문자 그대로 보여주는 역할을 합니다. 보통은 코드 예시를 보여줄 때에 사용하는 편입니다. 이 블로그에서 찍어온 아래의 두 이미지처럼 말이죠. 어떤 태그에 대해서 살펴볼 것인지는 알았으니 이제 본론으로 들어가도록 합시다. code태그는 코드의 이름이나 내용을 언급하고 싶을 때에 사용합니다. 인라인 태그이며 기본적으로는 줄바꿈이 되지 않습니다. 사실 이 글에서도 많이 쓰이고 있습니다.","coverImage":"https://drive.google.com/uc?export=view&id=1OhyAifoAcmKofIJmlW7Cj5VjdGaAN4j_","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","코드 태그","code 태그","pre 태그"],"categories":["가이드","HTML"],"createdAt":1648511041000,"updatedAt":1648511041000,"keywords":[],"drawDate":1648511041000,"display":true,"type":"post"},"slug":"2022-03-29-39-code-and-pre-tag","fullPath":"/post/2022-03-29-39-code-and-pre-tag","content":"\r\nimport { HTMLTextPosts, A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P, Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image, Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name, Dt, Dd } from '@/components/Post';\r\n\r\n<HtmlGuideMessage/>\r\n\r\n<HTMLTextPosts/>\r\n\r\n# 개요\r\n이번 글은 웹 개발을 위한 HTML 가이드 23편입니다. 이번 글에서는 두가지의 태그를 알아보려고 합니다. `code`태그와 `pre`태그입니다. 이 **두 태그는 웹 상에서 코드를 문자 그대로 보여주는 역할을 합니다.** 보통은 코드 예시를 보여줄 때에 사용하는 편입니다. 이 블로그에서 찍어온 아래의 두 이미지처럼 말이죠.\r\n\r\n![code, pre 태그 예시 1](https://drive.google.com/uc?export=view&id=1yaidFV9h49vtiyPxK7ZTo4NspDsRbPOA)\r\n![code, pre 태그 예시 2](https://drive.google.com/uc?export=view&id=17N_SBitbT7znsyQic7fmrKMFP0vOs7iD)\r\n\r\n어떤 태그에 대해서 살펴볼 것인지는 알았으니 이제 본론으로 들어가도록 합시다.\r\n\r\n# code 태그\r\n`code`태그는 코드의 이름이나 내용을 언급하고 싶을 때에 사용합니다. 인라인 태그이며 기본적으로는 줄바꿈이 되지 않습니다. 사실 이 글에서도 많이 쓰이고 있습니다.\r\n\r\n```html\r\n<p>자바스크립트로 콘솔에 아이유 좋아! 라는 내용을 띄우고 싶으면 <code>console.log('아이유 좋아!')</code>을 사용한다.</p>\r\n```\r\n\r\n![code 태그를 사용한 모습이다.](https://drive.google.com/uc?export=view&id=1a3s30cfh_1GrHDHr4s4O9iVDgnZ3hwya)\r\n\r\n위 이미지는 `code`태그를 사용한 페이지입니다. `code`태그는 내용물을 기본 텍스트와 다른 모양으로 보여줍니다. 잘 보면 글꼴이 다른 것을 볼 수 있죠. 이런 문제는 나중에 스타일을 입혀서 디자인을 하면 되는 부분이기 때문에 중요한 것은 아닙니다.\r\n\r\n`code`태그는 인라인 태그라고 했습니다. 이 말은 문단 내에 사용한다는 이야기죠. 그렇다면 여러줄의 코드를 보여주고 싶다면 어떻게 해야할까요? 바로 그 때! `pre`태그를 이용하면 됩니다.\r\n\r\n# pre 태그\r\n사실 `pre`태그는 코드를 있는 그대로 보여주는 태그는 아닙니다. 하지만 `br`태그를 사용하지 않아도 줄바꿈을 가능하게 만들어주기 때문에 `code`태그와 함께 사용되는 것이 보통입니다. 일단 `pre`태그만 사용된 경우를 보여드리겠습니다.\r\n\r\n```html\r\n<pre>\r\n  <span>아이유</span>\r\n  <span>만세</span>\r\n</pre>\r\n```\r\n\r\n![pre 태그를 사용한 모습이다.](https://drive.google.com/uc?export=view&id=1zCeEAVEfQWyQbmn6RVuGRKDKjjpXSe9Z)\r\n\r\n`pre`태그는 안에 있는 태그들의 효과를 무효화하지 않지만 이렇게 줄바꿈이 되고 공백마저도 그대로 나타내는 것을 볼 수 있습니다.\r\n\r\n# 함께 사용하기\r\n이번에는 `pre`태그를 `code`태그와 함께 사용한 경우를 보여드리겠습니다. 보통은 아래처럼 동시에 사용하여 코드를 보여줄 때에 사용합니다. 현재 이 블로그에도 이런식으로 구성이 되어있습니다.\r\n\r\n```html\r\n<p>아래는 자바스크립트에서 클래스를 만드는 방법입니다.</p>\r\n\r\n<pre>\r\n  <code>\r\n    class Person {\r\n      constructor(name, age) {\r\n        this.name = name;\r\n        this.age = age;\r\n      }\r\n    }\r\n\r\n    const nihil = new Person('NIHILncunia', 30);\r\n  </code>\r\n</pre>\r\n```\r\n\r\n![pre 태그와 code 태그를 함께 사용한 모습이다.](https://drive.google.com/uc?export=view&id=1Tgv0MT6rU6_bewOMQ3NiFG9VPvIJyedg)\r\n\r\n하지만 착각하면 안되는 점은 `pre`태그나 `code`태그의 안에 들어간 내용이 태그일 때에 **태그 자체를 무효화하지는 않는다는 점**입니다. `pre`태그와 `code`태그를 함께 사용해서 HTML 코드를 보여주고 싶을 때에는 꺽쇄를 사용하면 안됩니다. 꺽쇄를 사용하면 HTML 문법을 적용하는 게 되기 때문입니다.\r\n\r\n그럼 어떻게 해야할까요? 지금 다루기는 좀 어렵고... 이에 대한 해결책을 바로 다음 글에서 다룹니다. 다음 글은 **HTML에서 특수문자를 사용할 수 있는 탈출문자에 대해**서 다루도록 하겠습니다.\r\n\r\n<Line />\r\n\r\n이번 가이드에서 준비된 내용은 여기까지입니다. 이번 글에서는 `pre`태그와 `code`태그에 대해서 알아봤습니다. 이 두 태그는 웹 상에서 코드를 보여주고 싶을 때에 사용한다. 라는 점을 잘 이해하시면 되겠습니다. 다음 글에서는 위에서 예고했던대로 탈출문자에 대해서 알아볼 예정입니다. 그럼 이번 글은 여기서 마치도록 하겠습니다. 다음 글에서 봅시다.\r\n","date":{"year":"2022","month":"03","yearMonth":"2022-03"}},"next":null},"__N_SSG":true}