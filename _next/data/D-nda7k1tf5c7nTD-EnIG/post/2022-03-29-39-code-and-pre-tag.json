{"pageProps":{"post":{"frontMatter":{"id":39,"title":"웹 개발을 위한 HTML 가이드 23편 - code, pre 태그","description":"이번 글은 웹 개발을 위한 HTML 가이드 23편입니다. 이번 글에서는 두가지의 태그를 알아보려고 합니다. code태그와 pre태그입니다. 이 두 태그는 웹 상에서 코드를 문자 그대로 보여주는 역할을 합니다. 보통은 코드 예시를 보여줄 때에 사용하는 편입니다. 이 블로그에서 찍어온 아래의 두 이미지처럼 말이죠. 어떤 태그에 대해서 살펴볼 것인지는 알았으니 이제 본론으로 들어가도록 합시다. code태그는 코드의 이름이나 내용을 언급하고 싶을 때에 사용합니다. 인라인 태그이며 기본적으로는 줄바꿈이 되지 않습니다. 사실 이 글에서도 많이 쓰이고 있습니다.","coverImage":"https://drive.google.com/uc?export=view&id=1OhyAifoAcmKofIJmlW7Cj5VjdGaAN4j_","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","코드 태그","code 태그","pre 태그"],"categories":["가이드","HTML"],"createdAt":1648511041000,"updatedAt":1648511041000,"keywords":[],"drawDate":1648511041000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      code: \"code\",\n      strong: \"strong\",\n      img: \"img\",\n      pre: \"pre\",\n      span: \"span\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, HTMLTextPosts, Line} = _components;\n    if (!HTMLTextPosts) _missingMdxReference(\"HTMLTextPosts\", true);\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsx(HTMLTextPosts, {}), \"\\n\", _jsx(_components.h1, {\n        id: \"개요\",\n        children: \"개요\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글은 웹 개발을 위한 HTML 가이드 23편입니다. 이번 글에서는 두가지의 태그를 알아보려고 합니다. \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그와 \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그입니다. 이 \", _jsx(_components.strong, {\n          children: \"두 태그는 웹 상에서 코드를 문자 그대로 보여주는 역할을 합니다.\"\n        }), \" 보통은 코드 예시를 보여줄 때에 사용하는 편입니다. 이 블로그에서 찍어온 아래의 두 이미지처럼 말이죠.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1yaidFV9h49vtiyPxK7ZTo4NspDsRbPOA\",\n        alt: \"code, pre 태그 예시 1\"\n      }), \"\\n\", \"\\r\\n\", \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=17N_SBitbT7znsyQic7fmrKMFP0vOs7iD\",\n        alt: \"code, pre 태그 예시 2\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"어떤 태그에 대해서 살펴볼 것인지는 알았으니 이제 본론으로 들어가도록 합시다.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"code-태그\",\n        children: \"code 태그\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"code\"\n        }), \"태그는 코드의 이름이나 내용을 언급하고 싶을 때에 사용합니다. 인라인 태그이며 기본적으로는 줄바꿈이 되지 않습니다. 사실 이 글에서도 많이 쓰이고 있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsx(_components.code, {\n          className: \"language-html code-highlight\",\n          children: _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"자바스크립트로 콘솔에 아이유 좋아! 라는 내용을 띄우고 싶으면 \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"code\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"console.log('아이유 좋아!')\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"code\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"을 사용한다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })\n        })\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1a3s30cfh_1GrHDHr4s4O9iVDgnZ3hwya\",\n        alt: \"code 태그를 사용한 모습이다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"위 이미지는 \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그를 사용한 페이지입니다. \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그는 내용물을 기본 텍스트와 다른 모양으로 보여줍니다. 잘 보면 글꼴이 다른 것을 볼 수 있죠. 이런 문제는 나중에 스타일을 입혀서 디자인을 하면 되는 부분이기 때문에 중요한 것은 아닙니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"code\"\n        }), \"태그는 인라인 태그라고 했습니다. 이 말은 문단 내에 사용한다는 이야기죠. 그렇다면 여러줄의 코드를 보여주고 싶다면 어떻게 해야할까요? 바로 그 때! \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그를 이용하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"pre-태그\",\n        children: \"pre 태그\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"사실 \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그는 코드를 있는 그대로 보여주는 태그는 아닙니다. 하지만 \", _jsx(_components.code, {\n          children: \"br\"\n        }), \"태그를 사용하지 않아도 줄바꿈을 가능하게 만들어주기 때문에 \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그와 함께 사용되는 것이 보통입니다. 일단 \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그만 사용된 경우를 보여드리겠습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"pre\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"span\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"아이유\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"span\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"span\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"만세\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"span\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"pre\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1zCeEAVEfQWyQbmn6RVuGRKDKjjpXSe9Z\",\n        alt: \"pre 태그를 사용한 모습이다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그는 안에 있는 태그들의 효과를 무효화하지 않지만 이렇게 줄바꿈이 되고 공백마저도 그대로 나타내는 것을 볼 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"함께-사용하기\",\n        children: \"함께 사용하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번에는 \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그를 \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그와 함께 사용한 경우를 보여드리겠습니다. 보통은 아래처럼 동시에 사용하여 코드를 보여줄 때에 사용합니다. 현재 이 블로그에도 이런식으로 구성이 되어있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"아래는 자바스크립트에서 클래스를 만드는 방법입니다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"pre\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"code\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"    class Person {\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"      constructor(name, age) {\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"        this.name = name;\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"        this.age = age;\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"      }\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"    }\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"    const nihil = new Person('NIHILncunia', 30);\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"code\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"pre\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1Tgv0MT6rU6_bewOMQ3NiFG9VPvIJyedg\",\n        alt: \"pre 태그와 code 태그를 함께 사용한 모습이다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"하지만 착각하면 안되는 점은 \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그나 \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그의 안에 들어간 내용이 태그일 때에 \", _jsx(_components.strong, {\n          children: \"태그 자체를 무효화하지는 않는다는 점\"\n        }), \"입니다. \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그와 \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그를 함께 사용해서 HTML 코드를 보여주고 싶을 때에는 꺽쇄를 사용하면 안됩니다. 꺽쇄를 사용하면 HTML 문법을 적용하는 게 되기 때문입니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그럼 어떻게 해야할까요? 지금 다루기는 좀 어렵고... 이에 대한 해결책을 바로 다음 글에서 다룹니다. 다음 글은 \", _jsx(_components.strong, {\n          children: \"HTML에서 특수문자를 사용할 수 있는 탈출문자에 대해\"\n        }), \"서 다루도록 하겠습니다.\"]\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 가이드에서 준비된 내용은 여기까지입니다. 이번 글에서는 \", _jsx(_components.code, {\n          children: \"pre\"\n        }), \"태그와 \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"태그에 대해서 알아봤습니다. 이 두 태그는 웹 상에서 코드를 보여주고 싶을 때에 사용한다. 라는 점을 잘 이해하시면 되겠습니다. 다음 글에서는 위에서 예고했던대로 탈출문자에 대해서 알아볼 예정입니다. 그럼 이번 글은 여기서 마치도록 하겠습니다. 다음 글에서 봅시다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2022-03-29-39-code-and-pre-tag"},"prev":{"frontMatter":{"id":38,"title":"웹 개발을 위한 HTML 가이드 22편 - small 태그","description":"이번 글은 웹 개발을 위한 HTML 가이드 22편입니다. 이번 글에서 다룰 내용은 저번 글에서 예고했던대로 small태그입니다. 텍스트 관련 태그도 어느정도 진행이 된 것 같습니다. 이제 정말 얼마 안남았거든요. 사실 이번 글에서 다룰 내용도 그다지 중요한 내용은 아닙니다. 그래도 일단은 다루고 넘어가려고 합니다. 그럼 바로 본론으로 들어가봅시다. small태그는 작은 텍스트를 표현할 때에 사용합니다. 기존의 텍스트보다 약간 작아지는 효과를 가지고 있습니다. 특별한 의미나 기능을 가지는 태그는 아니기 때문에 몰라도 좋았으나 지금은 특별한 의미가 생겼습니다.","coverImage":"https://drive.google.com/uc?export=view&id=1WxRQj4rm8_zFbyKb-sSV0S9_i-llFiCD","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","small 태그","덧붙임 글 태그"],"categories":["가이드","HTML"],"createdAt":1641845490000,"updatedAt":1641845490000,"keywords":[],"drawDate":1641845490000,"display":true,"type":"post"},"slug":"2022-01-11-38-small-tag","fullPath":"/post/2022-01-11-38-small-tag","content":"\r\nimport { HTMLTextPosts, A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P, Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image, Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name, Dt, Dd } from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n<HTMLTextPosts />\r\n\r\n# 제목\r\n이번 글은 **웹 개발을 위한 HTML 가이드** 22편입니다. 이번 글에서 다룰 내용은 저번 글에서 예고했던대로 `small`태그입니다. 텍스트 관련 태그도 어느정도 진행이 된 것 같습니다. 이제 정말 얼마 안남았거든요. 사실 이번 글에서 다룰 내용도 그다지 중요한 내용은 아닙니다. 그래도 일단은 다루고 넘어가려고 합니다. 그럼 바로 본론으로 들어가봅시다.\r\n\r\n# small 태그\r\n<P><Code>small</Code>태그는 작은 텍스트를 표현할 때에 사용합니다. <Strong>기존의 텍스트보다 약간 작아지는 효과</Strong>를 가지고 있습니다. 특별한 의미나 기능을 가지는 태그는 아니기 때문에 몰라도 좋<Bold>았으나</Bold> 지금은 특별한 의미가 생겼습니다.</P>\r\n\r\n```html file=small.html\r\n<p>small 태그는 이렇게 <small>작은 텍스트를 표현할 때에 사용합니다.</small></p>\r\n```\r\n\r\nvscode를 열고 대충 따라서 입력을 해보고 라이브 서버를 열어보세요. 그럼 아래와 같은 결과물이 나타나게 됩니다.\r\n\r\n![small 태그를 사용한 모습이다.](https://drive.google.com/uc?export=view&id=1GYLGBvF4ZU0xWwQkaqbsNejfXbgcqrtk)\r\n\r\n정말 텍스트가 작아졌습니다. **HTML 5**가 나타나면서 `small`태그에 변화가 생겼습니다. 현재는 페이지의 본문에 비해 비교적 중요도가 떨어지는 작은 영역에 쓰는 것을 권장하고 있습니다. 이를테면 저작권을 표기하는 부분을 예로 들 수 있겠습니다.\r\n\r\n![small 태그의 기본 스타일.](https://drive.google.com/uc?export=view&id=1dy5i3KktKWJ1Z-LDFdbl39s3_Jrtn5hM)\r\n\r\n`small`태그를 사용하지 않고도 똑같은 효과를 만드는 방법이 있는데, 바로 **CSS를 활용**하는 것입니다. 우리는 아직 CSS를 배우지 않았기 때문에 아래의 코드를 봐도 아 이런 게 있구나라는 시선으로 바라보면 되겠습니다.\r\n\r\n보면 알겠지만 `small`태그에는 `font-size: smaller;`라는 CSS가 적용되어 있습니다. `small`태그의 기본 스타일 입니다. 그렇기 때문에 위의 코드와 아래의 코드는 동일한 셈입니다. 이렇게 CSS를 활용해도 되고 `small`태그를 활용해도 됩니다. 물론 외관상으로는 동일하지만 그 의미는 전혀 다르다는 점을 인지하고 있어야합니다.\r\n\r\n```html file=small.html\r\n<p>small 태그는 이렇게 <span>작은 텍스트를 표현할 때에 사용합니다.</span></p>\r\n```\r\n\r\n```css\r\nspan {\r\n  font-size: smaller;\r\n}\r\n```\r\n\r\n<Line />\r\n\r\n이번 글에서는 간단하게 `small`태그에 대해서 알아봤습니다. 저작권이나 연락처 같은 비교적 중요도가 떨어지는 부분에 사용하는 태그였습니다. 이번 글에서 준비한 내용은 여기까지입니다. 다음 글에서는 코드 블럭을 다루는 `code`태그와 `pre`태그에 대해서 알아보도록 하겠습니다. 이번 글은 여기서 마치도록 하고 다음 글에서 봅시다.\r\n","date":{"year":"2022","month":"01","yearMonth":"2022-01"}},"next":{"frontMatter":{"id":40,"title":"웹 개발을 위한 HTML 가이드 번외 3편 - 탈출문자 사용하기","description":"저번 글 웹 개발을 위한 HTML 가이드 23편 - code, pre 태그에서 예고했던대로 이번 글에서는 HTML에서 사용할 수 있는 탈출 문자에 대해서 알아보려고 합니다. HTML은 웹 페이지의 골격을 만들기 위해 존재합니다. 여기까지는 이제는 다들 아실 것 같아요. 그런데, 이 페이지에 사용되는 문자 중에는 태그 요소에 사용되는 꺽쇠가 쓰일 때가 있습니다. 이 문서처럼 HTML 문법에 관련된 컨텐츠일 경우엔 더더욱 그렇겠죠. 그럴 때 HTML 파일에 꺽쇠를 생각 없이 적으면 웹 페이지가 깨져버릴 수가 있습니다. 왜냐하면 HTML을 실행하면 브라우저가 검사하면서 렌더링을 해주는데 이 과정에서 꺽쇠를 만나면 태그 요소라고 인식을 해버리기 때문입니다. 웹 페이지가 깨져버리면 우리가 원하는 모양이 나오지 않기 때문에 일종의 버그라고 할 수 있겠죠. 이러한 현상을 방지 하기 위해 우리는 탈출 문자를 사용합니다.","coverImage":"https://drive.google.com/uc?export=view&id=1uC2qw2Iye3QkSTNcydjtlW63Zgec1C6_","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","탈출 문자"],"categories":["가이드","HTML"],"createdAt":1649932710000,"updatedAt":1650266363000,"keywords":[],"drawDate":1649932710000,"display":true,"type":"post"},"slug":"2022-04-14-40-string-escape","fullPath":"/post/2022-04-14-40-string-escape","content":"\r\nimport {\r\n  HTMLTextPosts, A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P, Quote, Score, Youtube, Ul, Ol, Em, Gray,\r\n  Code, Kbd, Image, Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name, Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage/>\r\n\r\n<HTMLTextPosts/>\r\n\r\n# 개요\r\n저번 글 [웹 개발을 위한 HTML 가이드 23편 - code, pre 태그](/post/2022-03-29-39-code-and-pre-tag)에서 예고했던대로 이번 글에서는 HTML에서 사용할 수 있는 탈출 문자에 대해서 알아보려고 합니다.\r\n\r\nHTML은 웹 페이지의 골격을 만들기 위해 존재합니다. 여기까지는 이제는 다들 아실 것 같아요. 그런데, 이 페이지에 사용되는 문자 중에는 태그 요소에 사용되는 꺽쇠가 쓰일 때가 있습니다. 이 문서처럼 HTML 문법에 관련된 컨텐츠일 경우엔 더더욱 그렇겠죠. 그럴 때 HTML 파일에 꺽쇠를 생각 없이 적으면 **웹 페이지가 깨져버릴 수가 있습니다.**\r\n\r\n왜냐하면 HTML을 실행하면 브라우저가 검사하면서 렌더링을 해주는데 이 과정에서 꺽쇠를 만나면 태그 요소라고 인식을 해버리기 때문입니다. 웹 페이지가 깨져버리면 우리가 원하는 모양이 나오지 않기 때문에 일종의 버그라고 할 수 있겠죠. 이러한 현상을 방지 하기 위해 우리는 **탈출 문자**를 사용합니다.\r\n\r\n# 탈출 문자\r\n탈출 문자는 프로그래밍을 하면서 특수문자를 사용할 때 혹은 프로그램적인 제한에서 탈출하기 위해 사용하는 문자들입니다. 이러한 행위들을 **Escape**라고 합니다. 다른 프로그래밍 언어들에도 탈출 문자는 존재합니다. 아무튼 이 글에서는 HTML에 한정된 것들을 다루려고 합니다. 전부를 다루는 것은 어려우니까 자주 다루는 것만 추려서 보여드리도록 하겠습니다.\r\n\r\n## 자주 사용하는 특수문자\r\n이 아래는 자주 사용하는 특수문자들을 HTML 문법과 충돌하지 않게 사용하는 방법들입니다.\r\n\r\n<Dl>\r\n  <Dt>\\&lt;</Dt>\r\n  <Dd>&lt;(여는 꺽쇠)를 나타냅니다.</Dd>\r\n  <Dt>\\&gt;</Dt>\r\n  <Dd>&gt;(닫는 꺽쇠)를 나타냅니다.</Dd>\r\n  <Dt>\\&nbsp;</Dt>\r\n  <Dd>공백을 나타냅니다.</Dd>\r\n  <Dt>\\&amp;</Dt>\r\n  <Dd>&amp;를 나타냅니다.</Dd>\r\n  <Dt>\\&quot;</Dt>\r\n  <Dd>&quot;(큰따옴표)를 나타냅니다.</Dd>\r\n</Dl>\r\n\r\n## 그 외의 문자들\r\n<P>위의 내용들은 알아두면 좋은 내용들이지만 사실 반드시 알아야 하지는 않습니다. 어차피 필요하면 찾아보면 되니까요. 그럴 때 <A type='normal' href='https://dev.w3.org/html5/html-author/charref'>이 사이트</A>에서 찾아보시면 되겠습니다. 되게 상당한 개수의 특수문자들이 존재합니다.</P>\r\n\r\n<Line />\r\n\r\n<P>이번 글에서는 HTML 상에서 특수문자를 제한없이 사용하는 방법인 <Strong>탈출(Escape)</Strong>에 대해서 알아봤습니다. 사실 탈출문자는 다른 프로그래밍 언어들에서 더 많이 찾게 될 겁니다. 그 때가 언젠가는 오시기 바라면서 이번 글 마치도록 하겠습니다. 다음 글에서는 <Strong>나머지 텍스트 관련 태그들</Strong>에 대해서 다뤄보도록 하겠습니다. 다음 글에서 봅시다.</P>\r\n","date":{"year":"2022","month":"04","yearMonth":"2022-04"}}},"__N_SSG":true}