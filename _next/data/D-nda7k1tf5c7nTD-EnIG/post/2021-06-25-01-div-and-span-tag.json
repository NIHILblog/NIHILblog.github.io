{"pageProps":{"post":{"frontMatter":{"id":21,"title":"웹 개발을 위한 HTML 가이드 9편 - 공간 할당 태그(div, span)","description":"이전 글까지는 HTML에 대한 기초적인 정보에 대해서 알아봤다면 이번 글부터는 본격적으로 태그들에 대해서 알아보는 시간을 갖도록 할 겁니다. 이번 글에서는 공간을 할당하는 태그인 div 태그와 span 태그에 대해서 알아볼 예정입니다. 공간을 할당하는 태그에는 두가지가 있습니다. 위에서 이미 언급이 된 div 태그와 span 태그입니다. 이 두가지 태그는 가장 많이 사용되는 태그라고 생각하는데, 말 그대로 공간을 할당하기 위한 태그입니다. 이 두가지의 태그는 가장 일반적이고 기초적인 태그들이기 때문에 처음으로 배워볼 태그로 결정했습니다.","coverImage":"https://drive.google.com/uc?export=view&id=1SlGH-jY2py_DdAI_BzauMhCx-CmRgCZb","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","div","span"],"categories":["가이드","HTML"],"createdAt":1624553880000,"updatedAt":1624557600000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      h1: \"h1\",\n      a: \"a\",\n      strong: \"strong\",\n      h2: \"h2\",\n      pre: \"pre\",\n      span: \"span\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, P, Bold, Strong, Code, Line} = _components;\n    if (!Bold) _missingMdxReference(\"Bold\", true);\n    if (!Code) _missingMdxReference(\"Code\", true);\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"이전 글까지는 HTML에 대한 기초적인 정보에 대해서 알아봤다면 이번 글부터는 본격적으로 태그들에 대해서 알아보는 시간을 갖도록 할 겁니다. 이번 글에서는 공간을 할당하는 태그인 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그와 \", _jsx(_components.code, {\n          children: \"span\"\n        }), \"태그에 대해서 알아볼 예정입니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"공간을-할당하는-태그\",\n        children: \"공간을 할당하는 태그\"\n      }), \"\\n\", _jsxs(P, {\n        children: [_jsxs(Bold, {\n          children: [\"공간을 할당하는 태그에는 \", _jsx(Strong, {\n            children: \"두가지\"\n          })]\n        }), \"가 있습니다. 위에서 이미 언급이 된 \", _jsx(Code, {\n          children: \"div\"\n        }), \"태그와 \", _jsx(Code, {\n          children: \"span\"\n        }), \"태그입니다. 이 두가지 태그는 가장 많이 사용되는 태그라고 생각하는데, \", _jsx(Strong, {\n          children: \"말 그대로 공간을 할당하기 위한 태그\"\n        }), \"입니다. 이 두가지의 태그는 가장 일반적이고 기초적인 태그들이기 때문에 처음으로 배워볼 태그로 결정했습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"사실 간간히 이 태그들을 언급하기는 했습니다. 블럭 태그와 인라인 태그를 설명할 때에도 언급을 했었죠. 이를 기억한다면 좋은 거고 그렇지 않다면 \", _jsx(_components.a, {\n          href: \"/post/2021-05-08-01-html-block-inline-tag\",\n          children: \"태그의 유형\"\n        }), \" 글을 읽고 진행하는 것을 추천드립니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"여러 개발자들이 공간을 할당하는 태그를 사용하는 주된 목적은 \", _jsx(_components.strong, {\n          children: \"레이아웃을 구성하는 것\"\n        }), \"에 있습니다. 레이아웃을 구성한다는 것은 \", _jsx(_components.strong, {\n          children: \"페이지의 구조를 구성한다는 것\"\n        }), \"입니다. 어떤 항목을 어디에 둘지에 대한 것이죠. HTML에서는 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그를 통해서 레이아웃을 나눕니다. 경우에 따라서 \", _jsx(_components.code, {\n          children: \"span\"\n        }), \"태그를 이용하기도 합니다. 그럼 이제 각각의 태그를 살펴보도록 합시다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"div-태그\",\n        children: \"div 태그\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"나누다, 분할하다 라는 의미를 가진 \", _jsx(_components.strong, {\n          children: \"Division\"\n        }), \"의 약자인 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그는 대표적인 \", _jsx(_components.strong, {\n          children: \"블럭 태그\"\n        }), \"이며 많은 사람들이 특정 공간을 할당할 때에 자주 사용하는 태그입니다. 말 그대로 공간을 할당하는 태그이기 때문에 그것 외에는 별다른 기능은 없습니다. 딱히 의미를 가지는 태그는 아니기 때문에 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그는 시맨틱 태그가 아니라는 의미가 되겠죠.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"div\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token comment\",\n              children: \"<!-- 여기에 내용 -->\"\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"div\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"div\"\n        }), \"태그는 \", _jsx(_components.strong, {\n          children: \"CSS\"\n        }), \"와 함께 사용할 때에 빛을 발합니다. 어떤 의미를 지닌 것은 아니기 때문에 \", _jsx(_components.code, {\n          children: \"id\"\n        }), \"속성이나 \", _jsx(_components.code, {\n          children: \"class\"\n        }), \"속성을 통해서 이름을 붙여줍니다. 어떤 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그는 이미지를 담기 위해 사용될 수 있고 어떤 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그는 텍스트를 담기 위해 사용될 수 있기 때문입니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"div\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"id\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"number-box\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token comment\",\n              children: \"<!-- 여기에 내용 -->\"\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"div\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이런 식으로 말입니다. 위의 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그의 용도는 숫자를 담아두기 위한 용도일 겁니다. 이름에 그렇게 표시되어 있기 때문이죠. 어떻게 사용될 지는 누가 코드를 작성하느냐에 따라 다르기 때문에 다양한 방법으로 사용되는 태그입니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"span-태그\",\n        children: \"span 태그\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"범위라는 의미를 가진 단어인 \", _jsx(Bold, {\n          children: \"span\"\n        }), \"과 이름이 같은 \", _jsx(_components.code, {\n          children: \"span\"\n        }), \"태그는 대표적인 인라인 태그입니다. \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그와 마찬가지로 별다른 의미를 갖고 있지는 않으며, 그렇기 때문에 시맨틱 태그가 아닙니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"span\"\n        }), \"태그는 주로 \", _jsx(_components.code, {\n          children: \"p\"\n        }), \"태그 내에서 중요한 정보는 아니지만 굵게 하고 싶거나, 다른 색상으로 강조를 하고 싶을 때에 사용합니다. 중요한 내용이라면 \", _jsx(_components.code, {\n          children: \"em\"\n        }), \"태그나 \", _jsx(_components.code, {\n          children: \"strong\"\n        }), \"태그를 사용하면 되는데 중요한 내용은 아니지만 기울이고 싶거나 색깔을 바꾸고 싶다면 그 때에 \", _jsx(_components.code, {\n          children: \"span\"\n        }), \"태그를 사용하면 되겠습니다. 물론 \", _jsx(_components.strong, {\n          children: \"CSS\"\n        }), \"를 활용해야하겠죠!\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsx(_components.code, {\n          className: \"language-html code-highlight\",\n          children: _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"span 태그는 \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"span\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"class\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"red\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"이런식\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"span\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"으로 사용한다.\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"다음 파트에서 \", _jsx(_components.code, {\n          children: \"p\"\n        }), \"태그를 배우게 될테니 지금은 몰라도 좋습니다. \", _jsx(_components.code, {\n          children: \"em\"\n        }), \"태그나 \", _jsx(_components.code, {\n          children: \"strong\"\n        }), \"태그도 마찬가지입니다. 지금의 내용을 기억해뒀다가 나중에 다음 파트들에서 생각만 나도 성공입니다.\"]\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글에서는 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그와 \", _jsx(_components.code, {\n          children: \"span\"\n        }), \"태그에 대해서 알아봤습니다. 한 번 오늘 배운 이 두가지의 태그를 만지면서 연습해보면 좋을 것 같습니다. 이번 글은 여기까지 입니다. 다음 글은 제목 태그에 대해서 알아볼 예정입니다. 그럼 다음 글에서 봅시다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-06-25-01-div-and-span-tag"},"prev":{"frontMatter":{"id":20,"title":"웹 개발을 위한 HTML 가이드 8편 - 주석","description":"우리는 살아가면서 아주 다양한 메모를 합니다. 메모의 목적은 잊어버리지 않기 위함이죠. 잊을만할때 메모를 보면 다시 명확하게 떠오르기도 합니다. 프로그래밍을 하는 도중에도 우리는 메모를 할 수 있습니다. 이를 주석이라고 표현합니다. 영어로는 Comment라고 합니다. 주석은 파일 내에 적혀 있지만 실질적인 프로그래밍의 내용에는 들어가지 않는 구문을 말합니다. 즉 영향을 주지 않는 코드를 말하는 겁니다. 주석을 적는 행위를 보고 주석을 단다고 하기도 합니다.","coverImage":"https://drive.google.com/uc?export=view&id=13sovY_8kjz7oDJXg9qBpuudA68_WIdmR","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","주석"],"categories":["가이드","HTML"],"createdAt":1624103280000,"updatedAt":1624103280000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"slug":"2021-06-19-01-comment","fullPath":"/post/2021-06-19-01-comment","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n<P>우리는 살아가면서 아주 다양한 메모를 합니다. 메모의 목적은 잊어버리지 않기 위함이죠. 잊을만할때 메모를 보면 다시 명확하게 떠오르기도 합니다. <Bold>프로그래밍을 하는 도중에도 우리는 메모를 할 수 있습니다.</Bold> 이를 <Strong>주석</Strong>이라고 하고, 영어로는 <Strong>Comment</Strong>라고 합니다.</P>\r\n\r\n웹 개발을 위한 HTML 가이드 8편은 주석에 대해 다룹니다. 사실 주석에 대해선 별 게 없지만 프로그래밍에 첫걸음을 한 우리는 왜 주석을 쓰는지 알아야 합니다. 천천히 알아보도록 합시다.\r\n\r\n<P><Mark>주석은 파일 내에 적혀 있지만 실질적인 프로그래밍의 내용에는 들어가지 않는 구문을 말합니다.</Mark> 즉 영향을 주지 않는 코드를 말하는 겁니다. 주석을 적는 행위를 보고 주석을 단다고 하기도 합니다.</P>\r\n\r\n<P>프로그래밍을 하다가 나중에 수정을 해야 하는 부분을 체크해두고 잠을 청하거나 다른 일을 하는 때도 언젠가는 겪을 수 있겠죠? 그럴 때에 주석을 달아서 메모를 해두거나 프로그래밍을 하다보면 복잡하게 진행될 때가 있는데 특정 구간을 찾기 위해서 주석을 중간 중간 달아두기도 합니다. 혹은 협업을 해야 할 때에 가이드라인 같은 것을 적는 용도로도 주석을 이용할 수 있죠.</P>\r\n\r\n주석은 다양한 프로그래밍 언어가 지원해주는 기능입니다. 없는 언어는 제가 지금까지는 못봤습니다. 아무튼 HTML에서의 주석은 다음과 같이 표현합니다.\r\n\r\n```html\r\n<!-- 주석은 이렇게 생겼습니다. -->\r\n\r\n<!--\r\n  주석은 여러줄을 감쌀 수도 있습니다.\r\n-->\r\n```\r\n\r\n<P>누가 HTML 아니랄까봐 태그처럼 생겼습니다. <Bold>HTML 공부를 할 때에는 주석을 이용해서 각 코드의 의미와 기능을 적으면서 공부를 하는 걸 추천합니다!</Bold> 이번 글은 여기까지 입니다. 다른 글에서는 정말로 본격적으로 태그를 하나 하나 배울 겁니다. 다음 글에서는 <Code>div</Code> 태그와 <Code>span</Code> 태그에 대해서 알아봅시다.</P>\r\n","date":{"year":"2021","month":"06","yearMonth":"2021-06"}},"next":{"frontMatter":{"id":23,"title":"웹 개발을 위한 HTML 가이드 10편 - 제목 태그(h1~h6)","description":"문서는 어떠한 것을 설명하는 목적이 다분하기 때문에 제목이 있고 본문이 있고 그 외의 부분들로 나누어지는 것이 보통입니다. 웹에서도 마찬가지입니다. HTML로는 생각할 수 있는 모든 형태의 레이아웃을 구성할 수 있지만 뉴스 사이트라든지 블로그 같은 곳엔 제목이 있고 본문이 있습니다. HTML은 문서의 측면도 가지고 있기 때문에 제목과 본문이 있습니다. 이 제목은 문서에서 중요한 부분을 차지합니다. 어떠한 문서에서 중요한 내용을 콕 찝은 것이 바로 제목이죠. HTML에도 제목을 나타내는 태그가 있습니다. 이번 글에서 알아볼 내용은 바로 제목에 대한 태그입니다. 서론은 여기까지하고 바로 본론으로 들어갑시다. 웹 개발을 위한 HTML 가이드 10편 지금 시작합니다.","coverImage":"https://drive.google.com/uc?export=view&id=161s3KuZEX9ADxEfikJcJpP6MSs3IIpHG","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","제목태그","h태그"],"categories":["가이드","HTML"],"createdAt":1626661680000,"updatedAt":1636817700000,"keywords":[],"drawDate":-2211786000000,"display":true,"type":"post"},"slug":"2021-07-19-01-heading-tags","fullPath":"/post/2021-07-19-01-heading-tags","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage/>\r\n\r\n# 개요\r\n문서는 어떠한 것을 설명하는 목적이 다분하기 때문에 제목이 있고 본문이 있고 그 외의 부분들로 나누어지는 것이 보통입니다. 웹에서도 마찬가지입니다. HTML로는 생각할 수 있는 모든 형태의 레이아웃을 구성할 수 있지만 뉴스 사이트라든지 블로그 같은 곳엔 제목이 있고 본문이 있습니다.\r\n\r\n<P>HTML은 문서의 측면도 가지고 있기 때문에 제목과 본문이 있습니다. 이 제목은 <Strong>문서에서 중요한 부분을 차지</Strong>합니다. <Mark>어떠한 문서에서 중요한 내용을 콕 찝은 것이 바로 제목이죠.</Mark> HTML에도 제목을 나타내는 태그가 있습니다. 이번 글에서 알아볼 내용은 바로 제목에 대한 태그입니다. 서론은 여기까지하고 바로 본론으로 들어갑시다. 웹 개발을 위한 HTML 가이드 10편 지금 시작합니다.</P>\r\n\r\n# 제목 태그\r\nHTML의 제목 태그에는 **여섯가지의 단계**가 있습니다. 각 태그의 이름은 **제목**을 의미하는 영단어 **Heading**의 약자인 h와 숫자 1 ~ 6을 합친 `h1` ~ `h6`입니다. 숫자가 클수록 큰 제목입니다.\r\n\r\n```html\r\n<h1>제목 1</h1>\r\n<h2>제목 2</h2>\r\n<h3>제목 3</h3>\r\n<h4>제목 4</h4>\r\n<h5>제목 5</h5>\r\n<h6>제목 6</h6>\r\n```\r\n\r\n<P>자 그럼 이제 코딩을 시작해봅시다. 우리가 예전에 저장해뒀던 <Name>index.html</Name>파일을 꺼낼 때가 왔습니다. 메모장으로 이 파일을 불러와서 <Code>body</Code>태그 안에 위의 코드를 작성하면 되겠죠. 복붙을 해도 좋겠지만 직접 타이핑을 하는 것이 학습에 도움이 됩니다. <Bold>현재 이 가이드는 HTML의 기본적인 구조는 알고 있다는 전제하에 진행하는 중입니다. 기본적인 구조를 모른다면 이전의 가이드를 열람하고 오셔야 합니다.</Bold></P>\r\n\r\n<P>이렇게 적으면 아래와 같은 상황이 되었을 겁니다. 이제 저장을 하면 되는데, 그냥 <Kbd>CTRL + S</Kbd>를 누르면 됩니다. 그러면 저장이 되죠. 우리가 파일 이름을 <Name>index.html</Name><NoteTop number='1'/>이라고 한 건 이유가 있습니다. 그 이유는 나중에 다뤄보도록 하겠습니다. 각주 타고 링크 들어가서 읽어봐도 됩니다.</P>\r\n\r\n아무튼, 저장을 했으니까 저장한 파일을 실행해봅시다. 실행을 하면, 다음과 같이 나타납니다. **제목 1이 가장 크고 제목 6이 가장 작습니다.** 이것은 어디까지나 기본 디자인일 뿐이고 우리가 CSS를 통해서 언제든지, 어떠한 모양으로든 바꿔줄 수 있습니다.\r\n\r\n![저장한 파일을 실행한 브라우저의 모습.](https://drive.google.com/uc?export=view&id=1z-Z-ha1IfVua0Rq1eKA0y6C4pgfzXuMN)\r\n\r\n이렇게 떠야 정상입니다. 그렇지 않다면 뭔가.. 잘못된 겁니다. 아무튼, 이렇게 제목으로만 이루어진 웹 페이지가 만들어졌습니다. 하지만 전혀 쓸모가 없는 웹 페이지죠. 우리는 앞으로 다양한 태그를 배우면서 이 웹페이지를 꾸며볼 겁니다.\r\n\r\n## 주의사항\r\n제목 태그에 대한 기본적인 건 마쳤습니다. 제목은 이 태그로 나타내고, 제목 아래의 중제목 소제목 같은 개념은 `h1`태그보다 작은 태그를 적절하게 잘 사용하면 되겠죠. 그런데 중요한 내용이 남아있습니다. 제목 태그를 사용하면서 주의해야 할 사항입니다.\r\n\r\n**하나의 웹 페이지에서 가장 큰 제목 태그가 두 번 이상 사용되면 안된다**는 점입니다. 이게 무슨 말이냐면 `h1`태그를 두번 이상 사용하면 안된다는 것입니다. 가장 큰 제목인데 그게 두개가 되어버리면 검색 엔진이 혼동을 할 수 있기 때문입니다.\r\n\r\n이러한 부분이 웹 표준으로 권장되고 있기 때문에 HTML을 배우는 우리는 **웹 표준**에 맞게 공부하는 게 중요합니다. 상세한 이유에 대해서는 자세하게 알아봐도 지금은 너무 어려울겁니다. 나중에 시간이 되면 그때 알아보도록 하고 가장 큰 제목은 한 페이지에 한 번만 사용한다. 라는 점을 기억하시기 바랍니다.\r\n\r\n# 실전 연습\r\n주의사항을 적용해서 **실습**을 해보도록 합시다. 우리는 웹 개발에 대한 기초를 배우는 중입니다. 그래서 그 기초를 간단하게 설명해주는 웹 페이지를 우리의 손으로 직접 만들어보면 좋을 것 같다는 생각이 들었습니다. 우리는 앞으로 우리가 만든 <Name>index.html</Name>파일을 계속해서 발전시켜 나아갈 겁니다.\r\n\r\n우선 우리 프로젝트의 주제를 `h1`태그로 표현해봅시다. 물론 위에서 작성한 것들은 지워도 무방합니다.\r\n\r\n```html file=index.html\r\n<h1>웹 개발의 3요소</h1>\r\n```\r\n\r\n우리는 **HTML**과 **CSS**, **JS**를 전부 다루게 될 겁니다. `h2`태그로 각각의 요소를 부제목으로 표현해봅시다. `h2`태그를 사용하는 이유는 `h1`태그보다 아래에 있어야 할 내용들이기 때문이고 `h1`태그는 이미 사용했으니까 사용할 수 없기 때문입니다.\r\n\r\n```html file=index.html\r\n<h1>웹 개발의 3요소</h1>\r\n<h2>HTML</h2>\r\n<h2>CSS</h2>\r\n<h2>JavsScript</h2>\r\n```\r\n\r\n내용만 적으면 이 페이지가 뭘 의미하는지 알 수가 없으니까 제목도 정해줍시다. `head`태그 안에 `title`태그가 있다는 것을 잊지 않았겠죠? 바꿔봅시다.\r\n\r\n```html\r\n<title>웹 개발의 3요소</title>\r\n```\r\n\r\n이렇게 하면 최종적으로 아래와 같은 모양이 되었을 겁니다. 주석은 다 없애도 됩니다.\r\n\r\n```html file=index.html\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <title>웹 개발의 3요소</title>\r\n</head>\r\n\r\n<body>\r\n  <h1>웹 개발의 3요소</h1>\r\n  <h2>HTML</h2>\r\n  <h2>CSS</h2>\r\n  <h2>JavsScript</h2>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n![프로젝트 첫번째 과정.](https://drive.google.com/uc?export=view&id=1H1Cmo7li0fzQ28qdbsUy01MaYcCCzgOS)\r\n\r\n<P>이 코드는 <A href='https://github.com/nihil-programming-guide/web-tuto/blob/master/HTML/01-first-html/index.html' type='normal'>web-tuto</A> 깃허브에 올려두었습니다. 아직은 정말 별 거 없지만 점점 뭔가가 추가되는 것을 경험하면서 웹은 이렇게 만들어진다 라는 것을 함께 익혀가게 될 겁니다. 우리는 지금 원하는 웹 페이지를 만들었다는 것 자체에 큰 의의가 있습니다.</P>\r\n\r\n<Line />\r\n\r\n이제 마칠 때가 된 거 같습니다. 이번 글에서는 간단하게 제목 태그에 대해서 알아봤습니다. 나중에야 알게 되겠지만 제목 태그는 중요합니다. 잘 기억해두시고 여러번 타이핑하면서 연습해봅시다. 저번 글에서는 `div`태그와 `span`태그도 배웠었죠. 제목 태그와 함께 연습해보면 좋을 듯합니다.\r\n\r\n다음 글에서는 **문단을 만들어내는 태그**에 대해서 알아봅시다. 이번글은 여기까지입니다. 다음 글에서 봅시다.\r\n\r\n<NoteBottom number='1' first={true}><Strong>어떠한 폴더(경로)</Strong>의 <Strong>기본 파일</Strong>이 될 파일의 이름은 <Strong>index</Strong>라고 짓는다. <Name>index.html</Name>이라는 파일은 해당 폴더의 기본 웹 페이지가 된다. 자세한 설명은 <A type='blog' href='/post/2021-09-04-01-filename-index'>이 링크</A>를 참고하자.</NoteBottom>\r\n","date":{"year":"2021","month":"07","yearMonth":"2021-07"}}},"__N_SSG":true}