{"pageProps":{"post":{"frontMatter":{"id":26,"title":"웹 개발을 위한 HTML 가이드 12편 - Visual Studio Code 사용하기","description":"우리는 지금까지 알게 된 태그는 별로 없지만 연습을 하기 위해 메모장으로 코딩을 했습니다. 물론 계속 메모장으로 코딩을 해도 상관 없지만 상당히 불편하다는 것을 느꼈을 겁니다. 이 부분은 취향에 따라 차이가 있지만 보통의 경우 편리한 기능을 제공해주는 텍스트 에디터를 사용합니다. 텍스트 에디터의 종류는 다양합니다. 프로그래밍 언어에 따라서 인기가 있는 에디터가 있기도 합니다. 다양한 에디터들 중에서 오늘 우리가 알아볼 텍스트 에디터는 비주얼 스튜디오 코드라는 녀석입니다. 마이크로소프트에서 만든 텍스트 에디터인데 사용자가 많아서 많은 확장 프로그램들이 만들어지고 있습니다. 이제 이 녀석에 대해서 알아봅시다. 시작하기 전에 메모장을 사용하면서 굳이 불편함을 느끼지 않았다면 메모장을 계속 써도 상관은 없습니다. 본인의 선택입니다.","coverImage":"https://drive.google.com/uc?export=view&id=1xCkzKi1sM414SmXwmWXyEJJ-oLMGBqVL","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","비주얼 스튜디오 코드","VS Code"],"categories":["가이드","HTML"],"createdAt":1631470080000,"updatedAt":1632549960000,"keywords":[],"drawDate":1631470080000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      strong: \"strong\",\n      h2: \"h2\",\n      img: \"img\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, P, Strong, Mark, Gray, Code, Bold, Kbd, Line} = _components;\n    if (!Bold) _missingMdxReference(\"Bold\", true);\n    if (!Code) _missingMdxReference(\"Code\", true);\n    if (!Gray) _missingMdxReference(\"Gray\", true);\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!Kbd) _missingMdxReference(\"Kbd\", true);\n    if (!Line) _missingMdxReference(\"Line\", true);\n    if (!Mark) _missingMdxReference(\"Mark\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsx(_components.h1, {\n        id: \"개요\",\n        children: \"개요\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"우리는 지금까지 알게 된 태그는 별로 없지만 연습을 하기 위해 메모장으로 코딩을 했습니다. 물론 계속 메모장으로 코딩을 해도 상관 없지만 상당히 불편하다는 것을 느꼈을 겁니다. 이 부분은 취향에 따라 차이가 있지만 보통의 경우 편리한 기능을 제공해주는 텍스트 에디터를 사용합니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"텍스트 에디터의 종류는 다양합니다. 프로그래밍 언어에 따라서 인기가 있는 에디터가 있기도 합니다. 다양한 에디터들 중에서 오늘 우리가 알아볼 텍스트 에디터는 **비주얼 스튜디오 코드(Visual Studio Code)**라는 녀석입니다. 마이크로소프트에서 만든 텍스트 에디터인데 사용자가 많아서 많은 확장 프로그램들이 만들어지고 있습니다. 이제 이 녀석에 대해서 알아봅시다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"시작하기 전에 메모장을 사용하면서 굳이 불편함을 느끼지 않았다면 메모장을 계속 써도 상관은 없습니다. 본인의 선택입니다.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"비주얼-스튜디오-코드\",\n        children: \"비주얼 스튜디오 코드\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"비주얼 스튜디오 코드(Visual Studio Code)는 줄여서 \", _jsx(_components.strong, {\n          children: \"vscode\"\n        }), \"라고도 많이 부릅니다. 사용하는 사람이 많기 때문에 정보를 찾는데에 있어서 어려움이 없습니다. 당연하게도 vscode보다 뛰어난 에디터도 있습니다. 가장 먼저 떠오르는 것은 \", _jsx(_components.strong, {\n          children: \"WebStorm\"\n        }), \"이라는 녀석입니다. 근데 이 녀석은 \", _jsx(_components.strong, {\n          children: \"유료\"\n        }), \"입니다. 그 대신에 진짜 어마어마한 기능을 갖고 있습니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"이제 막 프로그래밍에 입문한 사람들에게 에디터를 유료로 사용해라! 라고는 할 수가 없기 때문에 vscode를 사용하는 겁니다. \", _jsx(Strong, {\n          children: \"물론 vscode 자체만으로도 어렵지 않게 프로그래밍이 가능\"\n        }), \"합니다. 아무튼, 이제부터 vscode에 대해서 알아볼 겁니다. \", _jsx(Mark, {\n          children: \"설치부터 시작해서 기본적인 사용 방법을 함께 알아보도록 합시다.\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"제가 윈도우이기 때문에 윈도우를 기준으로 설명합니다!\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"설치하기\",\n        children: \"설치하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"프로그램을 사용하기 위해서는 가장 먼저 설치를 해야합니다. 설치를 위해서 검색을 해봅시다. 구글에다가 \", _jsx(_components.strong, {\n          children: \"vscode\"\n        }), \"라고 검색합니다. 그러면 가장 위에 보이는 사이트가 있습니다. 이 사이트로 들어가줍시다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1SssmgxNgRyx4vY0HUfMLbdrTsmKHsmRh\",\n        alt: \"구글에 vscode를 검색하고 보이는 사이트로 들어간다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"사이트에 들어간 다음에 할 것은 간단합니다. 바로 눈 앞에 보이는 \", _jsx(_components.strong, {\n          children: \"파란색 다운로드 버튼을 클릭\"\n        }), \"하는 겁니다. 아마도 \", _jsx(_components.strong, {\n          children: \"운영체제에 맞게끔 다운로드 파일이 다운로드\"\n        }), \" 될 겁니다. 아무튼 다운로드를 하고난 다음에는 설치 프로그램을 실행하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1V42E-S2hqw3UQlB-VY2L_wS8BwKSUI4o\",\n        alt: \"사이트에 들어가면 여러분의 눈 앞에 다운로드 버튼이 보인다. 클릭하자.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"대충 아무 곳에다가 파일을 다운로드하고, 실행합니다. 설치 자체는 다음 버튼을 계속 누르면 됩니다. 그래도 혹시 모르니까 아래의 이미지들과 같이 체크가 되어있는지 확인하시면 되겠습니다.\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=19cu6-jOMOdRu6lykNdxNliK7aJp55SQe\",\n        alt: \"동의합니다를 눌러준다.\"\n      }), \"\\n\", \"\\r\\n\", \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1eGAZu_q1lccMyb-QcJc6_-xIk_jrGyO_\",\n        alt: \"이 네가지가 체크되어있는지 확인하자.\"\n      }), \"\\n\", \"\\r\\n\", \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1uCl9rRFSDRiAQ97_QpLnVsy2UI75HwvO\",\n        alt: \"설치 버튼을 눌러준다.\"\n      }), \"\\n\", \"\\r\\n\", \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1GX0tpVlAbSOehgf24aQ9JV_yAcXS3wy-\",\n        alt: \"설치가 되는 모습이다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"설치를 다 하고 실행하면 아래와 같은 모양의 프로그램이 실행됩니다.\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1TzLeW76Rd6uyQsmIC0U4fTUmow0aHGvK\",\n        alt: \"비주얼 스튜디오 코드의 모습이다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"제가 쓰던 환경에서 설정을 잠시 없앤 상태에서 찍은 이미지지만 방금 막 프로그램을 설치하고 실행한 여러분들과는 조금 다를 겁니다. 달라도 상관 없습니다. 설정이야 알아서 꾸며서 쓰면 되거든요. 이제 설치는 완료되었습니다. 기본적인 설정을 해보도록 합시다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"한글-설정\",\n        children: \"한글 설정\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"vscode는 한글을 지원\"\n        }), \"하지만 처음에 설치하면 한글이 아닙니다. 그래서 \", _jsx(_components.strong, {\n          children: \"한글 설정을 해줘야\"\n        }), \" 합니다. 아주 간단하게 한글 설정을 할 수 있습니다. 좌측의 아이콘들 중에서 사각형 네개가 그려져 있는 아이콘을 클릭하시면 \", _jsx(_components.strong, {\n          children: \"확장 프로그램\"\n        }), \"을 검색할 수 있습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"지금 다루는 확장 프로그램에 대한 내용은 다음 글에서 계속 다룰 것이기 때문에 기억해둡시다. \", _jsx(_components.strong, {\n          children: \"vscode를 강화시키는 아주 중요한 기능\"\n        }), \"입니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1leIC_ns_EKINHKcKC6xpLS6bt7xe2ul9\",\n        alt: \"확장 프로그램 아이콘을 클릭해보자.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"생긴게 갑자기 달라졌는데 개의치마세요! 저는 사용하던 테마가 있을 뿐입니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"아무튼 확장 프로그램 아이콘을 클릭했으면 \", _jsx(_components.strong, {\n          children: \"검색\"\n        }), \"을 합시다. \", _jsx(_components.strong, {\n          children: \"korean\"\n        }), \"이라고 검색만 해도 아래와 같은 아이콘을 갖고 있는 확장 프로그램을 발견할 수 있습니다. 저는 이미 설치되어있어서 제거라는 버튼이 있지만 여러분은 되어있지 않을 겁니다. 설치 버튼을 눌러서 과감하게 설치하고나면 한글 설정이 완료됩니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=13NkfcEaui6tTI582W-mcl54C8yCWiz37\",\n        alt: \"한글 설정을 할 수 있는 확장 프로그램이다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"기본적인-사용법\",\n        children: \"기본적인 사용법\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"한글 설정도 마쳤으니 이제는 \", _jsx(_components.strong, {\n          children: \"vscode의 간단한 사용법\"\n        }), \"에 대해서 알아봅시다. 우리가 당장 프로그래밍을 하기 위해 필요한 것들을 우선 살펴보는 게 좋겠습니다. 간단하게 설정에 들어가서 설정을 하는 방법이나 쉽게 HTML 코딩을 하는 방법에 대해서 알아봅시다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"작업-폴더-설정하기\",\n        children: \"작업 폴더 설정하기\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=14qKIZeE3JoHREbtDhZ4qclHh3Gt1ML1E\",\n        alt: \"폴더 작업을 하지 않은 상태의 모습.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"여러분이 vscode를 설치하고 사용하려고 보면 파일을 건드릴 수가 없습니다. 정확히는 건드릴 파일이 없죠. 왜냐면 \", _jsx(_components.strong, {\n          children: \"작업 폴더 설정\"\n        }), \"을 하지 않았기 때문입니다. 그래서 우리가 사용하던 작업 폴더를 지정해줄 필요가 있습니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"폴더 설정 방법에는 여러가지가 있습니다. 첫번째 방법은 아래의 이미지처럼 \", _jsx(_components.strong, {\n          children: \"작업 폴더를 vscode의 파일 탐색기에 드래그\"\n        }), \"해서 vscode에서 사용할 수 있게 여는 겁니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1jbSeig8jOhpMlox_D2ZeBKX8HzoO51XU\",\n        alt: \"폴더를 드래그해서 폴더 설정하기.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"두번째는 \", _jsx(_components.strong, {\n          children: \"폴더 열기\"\n        }), \" 버튼을 눌러서 직접 작업 폴더를 찾아 적용시키는 겁니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"세번째 방법은 작업 폴더에서 터미널\", _jsx(Gray, {\n          children: \"(cmd나 파워쉘 같은)\"\n        }), \"을 열고 \", _jsx(Code, {\n          children: \"code .\"\n        }), \"를 쳐서 vscode를 작업 폴더에서 여는겁니다. 아래의 이미지 처럼요. \", _jsx(Strong, {\n          children: \"code\"\n        }), \" 는 vscode를 의미하는 것이고 그 뒤의 \", _jsx(Strong, {\n          children: \".\"\n        }), \"은 현재 폴더를 의미합니다. 즉 작업 폴더에서 vscode를 열겠다. 라는 의미인 것이죠.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1RipMDzJJTWPwbz8uBi-GAXRZNaUGsSaV\",\n        alt: \"터미널을 이용해서 열기.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"저는 세번째 방법을 더 좋아하고 자주 이용합니다. 굳이 설정이랄 것도 없고 항상 저렇게 열기 때문에 따로 설정해줄 필요가 없거든요. 아무튼 이렇게 설정을 마치고나면 본격적인 코딩이 가능해집니다.\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1WjzUIAH-SNsOW5070fLPlA8BaHoCAHj8\",\n        alt: \"폴더 설정을 마친 모습이다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"파일-탐색기-다루기\",\n        children: \"파일 탐색기 다루기\"\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1vqy6tSdU9D1qochvDOUjkmuVMvrDHppc\",\n        alt: \"vscode의 파일 탐색기의 모습이다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"vscode를 켜면 왼쪽에 보이는 아이콘 메뉴들 중에서 파일 모양처럼 생긴게 \", _jsx(_components.strong, {\n          children: \"파일 탐색기\"\n        }), \" 부분입니다. 여러분의 프로젝트 폴더의 내부 파일들이 보이고 이를 직접적으로 조작할 수 있는 부분이죠. 파일 탐색기에서 파일을 만들면 실제로 디스크에도 파일이 생기는 겁니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"파일을 어떻게 만들고, 폴더를 어떻게 만드는지 알아봅시다. 아주 간단합니다.\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"프로젝트 폴더 내에 파일이나 폴더가 아무것도 없을 때에는 \", _jsx(Bold, {\n          children: \"탐색기에 커서를 대고 있거나 탐색기의 부분이 활성화되어 있을 때에 생기는 아이콘들을 이용\"\n        }), \"해서 파일을 만들 수 있고 \", _jsx(Bold, {\n          children: \"그냥 허공에 우클릭을 하면 나타나는 메뉴를 통해서\"\n        }), \" 파일이나 폴더를 만들 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1DmvEClbdnP4u6mDlHVePjbTR-2PFrbAy\",\n        alt: \"탐색기가 활성화되면 상단에 아이콘이 뜬다.\"\n      }), \"\\n\", \"\\r\\n\", \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=191Hzu8b3x0jdFrC83hI0z6P1SCki31n2\",\n        alt: \"탐색기를 우클릭하면 메뉴가 뜬다.\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"이렇게 아이콘을 누르거나 메뉴를 이용해서 폴더나 파일을 만든 후에는 \", _jsx(Bold, {\n          children: \"이름을 입력\"\n        }), \"해주면 됩니다. 파일 이름을 입력하지 않으면 파일의 생성은 취소됩니다. 파일 이름을 입력해줍시다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"특정 폴더의 안에서 파일이나 또 다른 폴더를 만들기 위해서는 \", _jsx(Bold, {\n          children: \"탐색기에서 해당 폴더를 클릭한 상태\"\n        }), \"에서 탐색기 상단의 아이콘을 누르거나 폴더를 우클릭해서 새 폴더 혹은 새 파일 메뉴를 클릭하면 되겠습니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"파일의 이름을 바꾸려면 파일을 클릭한 상태에서 \", _jsx(Kbd, {\n          children: \"F2\"\n        }), \"를 누르면 됩니다. 윈도우에서 파일 이름 바꿀 때에 사용하는 단축키와 같습니다. 여기까지가 아주 기본적인 파일 탐색기 이용 방법입니다. 하다보면 적응 될 겁니다. 사용해봅시다!\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"설정-이용하기\",\n        children: \"설정 이용하기\"\n      }), \"\\n\", _jsxs(P, {\n        children: [\"vscode는 가볍지만 어떤 설정을 하느냐에 따라서 천차만별의 기능을 갖게 됩니다. 설정을 통해서 여러분의 개성을 표현할 수도 있습니다. 설정창으로 들어가는 방법에는 \", _jsx(Strong, {\n          children: \"좌측 하단의 톱니모양 아이콘을 클릭\"\n        }), \"하고 설정을 누르는 방법과 \", _jsx(Kbd, {\n          children: \"CTRL + ,\"\n        }), \"을 누르는 방법 등등이 있는데 단축키를 이용해서 들어가는 게 가장 빠릅니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1B1HUOwzG1GmjWFjIKlpaO-klpvV9GK4K\",\n        alt: \"설정창에 들어간 모습이다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 설정창에서 많은 것들을 바꿀 수가 있습니다. 확장 프로그램에 대한 설정도 여기서 바꿀 수 있습니다. 만일 여러분이 코딩에 좀 익숙하다면 직접 \", _jsx(_components.strong, {\n          children: \"JSON파일\"\n        }), \"을 건드려서 설정을 할 수도 있습니다.\"]\n      }), \"\\n\", _jsx(_components.img, {\n        src: \"https://drive.google.com/uc?export=view&id=1CXez0KjgaB0MsD4fkiAtrQABZzu6c-9L\",\n        alt: \"json파일을 직접 건드리는 방법도 있다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"설정에서 폰트 정도는 바꿔주는 게 여러분의 정신건강에 좋을 수 있습니다. 폰트 중에서도 모든 글자의 폭이 같은 폰트를 사용하면 더 좋습니다. 현재 제가 사용하는 폰트는 \", _jsx(_components.strong, {\n          children: \"Cascadia Code\"\n        }), \"라는 폰트 입니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"emmet-사용하기\",\n        children: \"Emmet 사용하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"HTML 코딩을 할 때에는 \", _jsx(_components.strong, {\n          children: \"Emmet\"\n        }), \"의 기능을 이용하는 게 정말 편리합니다. 하나 하나 태그를 치는 것보다는 태그의 이름을 치고 \", _jsx(_components.strong, {\n          children: \"탭을 눌러 자동으로 완성\"\n        }), \"하는 게 상당한 편의성을 제공해줍니다. Emmet에 대한 디테일한 사용법은 나중에 따로 올려보겠습니다. 이번 글에서는 간단하게만 알아봅시다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-text\",\n        children: _jsx(_components.code, {\n          className: \"language-text code-highlight\",\n          children: _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"!\\n\"\n          })\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"비어있는 html 파일에서 \", _jsx(_components.strong, {\n          children: \"느낌표\"\n        }), \"만 치고 \", _jsx(_components.strong, {\n          children: \"탭\"\n        }), \"을 누르면 아래와 같은 기본 골격이 만들어집니다. 여기서 조금만 수정하면 되겠죠.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token doctype\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"<!\"\n              }), _jsx(_components.span, {\n                className: \"token doctype-tag\",\n                children: \"DOCTYPE\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token name\",\n                children: \"html\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"html\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"lang\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"en\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"head\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"meta\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"charset\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"UTF-8\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"meta\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"http-equiv\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"X-UA-Compatible\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"content\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"IE=edge\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"meta\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"name\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"viewport\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"content\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"width=device-width, initial-scale=1.0\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"title\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"Document\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"title\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"head\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"body\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\r\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"body\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"html\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-text\",\n        children: _jsx(_components.code, {\n          className: \"language-text code-highlight\",\n          children: _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"div\\n\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsx(_components.code, {\n          className: \"language-html code-highlight\",\n          children: _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"div\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"div\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"div\"\n        }), \"를 치고 \", _jsx(_components.strong, {\n          children: \"탭\"\n        }), \"을 누르면 \", _jsx(_components.code, {\n          children: \"div\"\n        }), \"태그가 완성됩니다. 홀로 닫는 태그의 경우에는 닫는 태그가 없어도 되기 때문에 홀로 닫는 태그가 만들어집니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-text\",\n        children: _jsx(_components.code, {\n          className: \"language-text code-highlight\",\n          children: _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"div>p\\n\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"div\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"div\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이런식으로 하면 \", _jsx(_components.strong, {\n          children: \"부모태그와 자식태그\"\n        }), \" 관계의 태그를 완성할 수 있습니다. **>**를 이용해서 상위, 하위 구조를 만들어낼 수 있는 겁니다. 중요한건 \", _jsx(_components.strong, {\n          children: \"탭\"\n        }), \"을 누르는 겁니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-text\",\n        children: _jsx(_components.code, {\n          className: \"language-text code-highlight\",\n          children: _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"h2{제목}+p{문단}\\n\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"제목\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"h2\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\r\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"문단\", _jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"</\"\n                }), \"p\"]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \">\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"태그 이름뒤에 \", _jsx(_components.strong, {\n          children: \"중괄호\"\n        }), \"를 붙이고 중괄호의 \", _jsx(_components.strong, {\n          children: \"안에 내용\"\n        }), \"을 입력하고 \", _jsx(_components.strong, {\n          children: \"탭\"\n        }), \"을 누르면 여는 태그와 닫는 태그의 안에 내용이 들어가게 됩니다. **+**를 이용하면 \", _jsx(_components.strong, {\n          children: \"형제 관계\"\n        }), \"에 있는 태그를 완성할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이렇게 간단하게만 알아봐도 Emmet의 기능은 짱짱하다는 것을 알 수 있습니다. 이처럼 Emmet을 사용하면 아주 편하게 HTML 코딩이 가능합니다.\"\n      }), \"\\n\", _jsx(Line, {}), \"\\n\", _jsx(_components.p, {\n        children: \"이번 글에서는 vscode에 대해서 알아보는 시간을 가져봤습니다. vscode를 설치하고, 실행하고 설정을 건드리는 방법이나 Emmet을 사용하는 방법에 대해서 살펴봤죠. vscode도 지금은 낯설겠지만 계속 만져보다보면 익숙해질 것이라고 생각합니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"다음 글에서는 \", _jsx(_components.strong, {\n          children: \"설치하면 좋은 확장 프로그램\"\n        }), \"에 대해서 다뤄보도록 하겠습니다. 이번 글은 여기까지입니다. 다음 글에서 봅시다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-09-13-01-vscode-install"},"prev":{"frontMatter":{"id":25,"title":"웹 개발을 위한 HTML 가이드 번외 - index.html에 대해","description":"이번 글에서는 알아둬서 나쁠 것 없는 주제를 다뤄보려고 합니다. 원래는 비주얼 스튜디오 코드에 대해서 글을 작성하려고 했는데 기존에 작성한 글에서 분리하는 게 나을 것 같은 내용이 있어서 이렇게 작성해보려고 합니다. 이번 글의 주제는 웹의 주소와 파일 이름에 대한 것입니다. 다소 어려운 이야기가 될 수 있습니다. 지금 당장 이해가 안간다면 그냥 다음글로 넘어가셔도 전혀 문제가 없는 내용입니다. 최대한 이해가 되게끔 글을 작성할 것인데 혹시라도 이해가 안된다면 전혀 문제가 안되기 때문에 정말로 다음글로 넘어가시면 됩니다. 그럼 웹 개발을 위한 HTML 가이드 번외편 시작하도록 합시다.","coverImage":"https://drive.google.com/uc?export=view&id=12o03yThbqbZVTDivEj25z-ldfCIOmIp_","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보"],"categories":["가이드","HTML"],"createdAt":1630764660000,"updatedAt":1633117320000,"keywords":[],"drawDate":1630764660000,"display":true,"type":"post"},"slug":"2021-09-04-01-filename-index","fullPath":"/post/2021-09-04-01-filename-index","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n# 개요\r\n이번 글에서는 알아둬서 나쁠 것 없는 주제를 다뤄보려고 합니다. 원래는 비주얼 스튜디오 코드에 대해서 글을 작성하려고 했는데 기존에 작성한 글에서 분리하는 게 나을 것 같은 내용이 있어서 이렇게 작성해보려고 합니다. 이번 글의 주제는 **웹의 주소와 파일 이름**에 대한 것입니다.\r\n\r\n**다소 어려운 이야기**가 될 수 있습니다. 지금 당장 이해가 안간다면 그냥 **다음글로 넘어가셔도** 전혀 문제가 없는 내용입니다. 최대한 이해가 되게끔 글을 작성할 것인데 혹시라도 이해가 안된다면 전혀 문제가 안되기 때문에 정말로 다음글로 넘어가시면 됩니다. 그럼 **웹 개발을 위한 HTML 가이드** 번외편 시작하도록 합시다.\r\n\r\n# 컴퓨터와 웹\r\n우리는 웹이 어떻게 돌아가는지에 대해서는 알아보지 않았죠. 웹에 존재하는 모든 페이지들은 사실 **어떤 컴퓨터들**이 **웹 서버를 이용해서 호스팅**하고 있는 **html**파일의 내용입니다. 그리고 파일을 호스팅하는 컴퓨터를 **호스트 컴퓨터**라고 부릅니다. 웹 서버는 인터넷상에 존재하는 공간이고 컴퓨터가 서버를 열어서 파일을 공유한다면 그 컴퓨터가 바로 호스트 컴퓨터가 됩니다.\r\n\r\n인터넷은 **컴퓨터와 컴퓨터가 서로 연결**될 수 있는 **네트워크**라고 했습니다. 여러분의 컴퓨터에 있는 파일을 누군가가 보기 위해서는 여러분의 컴퓨터와 **다른 컴퓨터가 연결되어** 있어야 합니다. 그것을 가능하게 해주는 게 바로 웹 서버입니다. 웹 서버를 열어서 파일을 올려두면 여러분의 컴퓨터에 다른 사람이 접근할 수가 있게 됩니다. 즉 호스트 컴퓨터는 인터넷이라는 수단을 통해서 파일을 공유할 수 있게 된 것이죠.\r\n\r\nhtml파일 뿐만 아니라 **모든 파일**을 이렇게 공유할 수가 있습니다. 웹 페이지에 존재하는 이미지 또한 호스트 컴퓨터에 존재하는 어떤 폴더 안에 위치한 이미지 파일입니다. 그냥 쉽게 생각하면 모든 페이지와 모든 영상, 이미지, 음원들은 **전부가 호스트 컴퓨터가 호스팅하고 있는 파일**이라고 생각하면 됩니다.\r\n\r\n이 이야기를 왜 하느냐! 바로 **index.html**이라는 파일 이름과 관련이 있기 때문입니다.\r\n\r\n# 컴퓨터와 아이피(IP)\r\n모든 컴퓨터는 **아이피**라는 것을 가집니다. 아이피는 고유한 식별 번호같은 겁니다. **사람으로 생각해보면 주민등록번호**라고 생각하시면 됩니다. 아이피는 **Internet Protocol**의 약자로 컴퓨터와 컴퓨터가 **네트워크에서 소통할 때에 필요한 번호**입니다. 호스트 컴퓨터들도 아이피를 당연히 갖고 있습니다.\r\n\r\n<P>모든 웹 사이트의 웹 페이지들은 웹 서버에 존재하는 파일이기 때문에 호스트 컴퓨터에 접근해야만 합니다. 그러기 위해 모든 웹 페이지의 주소, 즉 <Strong>URL</Strong>에는 아이피가 포함되어있습니다. 그런데 우리가 보는 것은 <Strong>www.naver.com</Strong>과 같은 형태죠. 이런 주소들은 아이피의 별명이라고 생각하면 됩니다. <Strong>도메인</Strong>이라고 부릅니다. 우선 네이버를 예시로 들어볼까 합니다.</P>\r\n\r\n```text\r\nhttps://www.naver.com\r\nhttps://0.0.0.0:0\r\n```\r\n\r\n호스트 컴퓨터로 접근하는 아이피의 구조는 보통 아랫줄과 같습니다. 아이피는 **0부터 255**까지 총 네가지의 숫자로 이루어져 있습니다. 숫자와 숫자는 점으로 구분합니다. 아이피의 마지막 숫자의 바로 뒤에는 **콜론(:)**이 오고 그 뒤에 **포트(Port)**에 해당하는 숫자가 오게 됩니다. 호스트 컴퓨터는 이렇게 아이피와 포트가 존재합니다.\r\n\r\n네이버의 경우도 원래는 아랫줄과 같은 모양인데 윗줄처럼 **도메인으로 숨겨둔 상태**입니다. 왜냐면 영어를 입력하는 게 더 기억에도 남고 쉽기 때문이죠. 모든 사이트들은 이렇게 도메인으로 숨겨둔 겁니다.\r\n\r\n일반적으로 웹에서 암묵적으로 쓰는 포트는 **80**입니다. 80 포트는 표기를 생략할 수 있습니다. 호스트 컴퓨터가 돌리고 있는 서버가 **https**를 사용하는 서버라면 포트는 **443**입니다. 443도 생략이 가능합니다. 하지만 다른 포트들은 생략이 불가능합니다. 아무튼간에 중요한건 아이피와 포트를 도메인이라는 것으로 숨겨두었다는 겁니다.\r\n\r\n# 호스트 컴퓨터와 파일\r\n호스트 컴퓨터가 모든 종류의 파일을 공유할 수 있다는 말은 컴퓨터 안의 모든 파일을 공유한다는 것은 아닙니다. 물론 그런 경우도 있지만 **서버가 호스팅하고 있는 폴더와 그 아래의** 하위 폴더, 하위 파일들을 공유할 수 있습니다. 이 때, 서버가 호스팅하고 있는 폴더는 우리처럼 개발환경이 갖춰진 **프로젝트 폴더**입니다.\r\n\r\n<P><Strong>https://www.naver.com</Strong>라는 주소는 네이버의 프로젝트 폴더를 가리키고 있는 것과 같죠. 아까는 아이피의 별명이라고 했는데 하나의 컴퓨터에서 <Strong>여러개의 서버를 만들고 배포할 수 있기 때문</Strong>에 정확히는 <Strong>하나의 서버가 여러개의 도메인을 가질 수</Strong> 있는 겁니다.</P>\r\n\r\n# index라는 이름의 의미\r\n지금까지 이 이야기들을 한 이유는 **index**라는 이름을 설명하기 위해서는 여기까지의 설명이 필요했기 때문입니다. 대부분의 경우 index라는 이름은 **각 폴더의 기본 파일**을 의미합니다. **index.html**이라면 그 폴더의 **기본 페이지**를 의미하는 것이고 **index.js**라면 그 폴더의 **기본 스크립트 파일**을 의미하는 겁니다.\r\n\r\n<P>이 내용은 나중에 다룰 절대경로와 상대경로에 대한 것과도 관련이 있는데, 웹상에서 프로젝트의 루트 폴더 즉 프로젝트의 최상위 폴더의 경로는 <Strong>/</Strong>로 표현합니다. <Strong>https://www.naver.com</Strong>라는 주소는 사실 <Strong>/</Strong>가 빠져 있는 것이고, <Strong>/</Strong>는 <Strong>/index.html</Strong>로 표현할 수 있습니다. <Strong>index.html</Strong>이라는 이름은 생략이 가능합니다. 다른 이름은 생략이 불가능하고 확장자만 생략이 가능한데, <Strong>index.html</Strong>이라는 파일 이름 만큼은 생략이 가능합니다.</P>\r\n\r\n<P>즉 우리가 항상 들어가는 네이버 홈페이지의 주소는 이렇게도 쓸 수 있습니다. <Strong>https://www.naver.com/index.html</Strong>로 말이죠. 이건 모든 폴더에 해당될 수 있는 것이라서 모든 주소는 아래의 두가지 경우 중 하나입니다.</P>\r\n\r\n```text\r\nhttps://주소/폴더이름/index.html\r\nhttps://주소/폴더이름.html\r\n```\r\n\r\n위의 두 주소는 완전히 똑같은 기능을 합니다. 이건 여러분이 웹 개발을 할 것이라면 **언젠가는 알아야 하는 내용**입니다. 좀 빨리 알아본 것이라고 생각하고 이해가 잘 안되면 나중에 다시 읽어보시면 됩니다. 이번 글은 간단하게 **index.html**이라는 이름에 대해서 알아봤습니다. 이건 나중에 **자바스크립트를 건드릴 때에도 똑같이 적용**됩니다!\r\n\r\n이번 글은 여기까지 입니다. 나중에는 더 심화적인 내용으로 **로컬 주소와 웹 주소**, 그리고 **상대경로와 절대경로**를 다룰 때가 올텐데 그건 나중일이니 일단은 접어두도록 하겠습니다. 다음 글은 정말로 **비주얼 스튜디오 코드**에 대해 알아보도록 합시다.\r\n","date":{"year":"2021","month":"09","yearMonth":"2021-09"}},"next":{"frontMatter":{"id":27,"title":"웹 개발을 위한 HTML 가이드 13편 - VSCode 추천 확장 프로그램","description":"저번 글에서는 vscode의 설치와 사용에 대해서 다뤘습니다. 이번 글에서는 vscode에서 사용할 수 있는 확장 프로그램에 대해서 알아보려고 합니다. 정확히는 확장 프로그램 추천입니다. vscode는 가볍지만 확장 프로그램을 통해서 얼마든지 원하는 기능과 환경을 구축할 수 있다는 특징을 갖고 있습니다. 이러한 특징 덕에 WebStorm처럼은 아니지만 IDE에 버금가는 강력한 기능을 갖게 만들 수 있습니다. 코딩, 프로그래밍을 처음 하시는 분들에게 vscode를 추천한 것은 사람들이 많이 쓰기 때문도 있지만 이런 특징 때문도 있다는 점을 알고 계시면 좋겠습니다. 자, 그럼 웹 개발을 위한 HTML 가이드 13편을 시작하도록 합시다. vscode에는 정말 많은 확장 프로그램이 존재합니다. 그리고 이러한 것은 많은 사람들이 사용하고 있는 vscode라서 가능한 결과입니다. HTML과 관련된 확장 프로그램도 정말 다양하게 존재합니다. 그 중에서 가장 필요한 것들을 골라서 소개할 생각입니다. 저번 글에서 이미 확장 프로그램을 설치하는 방법에 대해서 다뤘기 때문에 다시 설명하지는 않을 겁니다.","coverImage":"https://drive.google.com/uc?export=view&id=1vDJV-wy4ibW6Y3sfl1khXkgokBtDpzrm","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","비주얼 스튜디오 코드","VS Code"],"categories":["가이드","HTML"],"createdAt":1632385800000,"updatedAt":1632385800000,"keywords":[],"drawDate":1632385800000,"display":true,"type":"post"},"slug":"2021-09-23-01-vscode-extension","fullPath":"/post/2021-09-23-01-vscode-extension","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n# 개요\r\n저번 글에서는 **vscode의 설치와 사용**에 대해서 다뤘습니다. 이번 글에서는 **vscode에서 사용할 수 있는 확장 프로그램**에 대해서 알아보려고 합니다. 정확히는 확장 프로그램 추천입니다. vscode는 가볍지만 확장 프로그램을 통해서 **얼마든지 원하는 기능과 환경을 구축할 수 있다는 특징**을 갖고 있습니다.\r\n\r\n이러한 특징 덕에 **WebStorm**처럼은 아니지만 **IDE에 버금가는 강력한 기능**을 갖게 만들 수 있습니다. 코딩, 프로그래밍을 처음 하시는 분들에게 vscode를 추천한 것은 사람들이 많이 쓰기 때문도 있지만 이런 특징 때문도 있다는 점을 알고 계시면 좋겠습니다.\r\n\r\n자, 그럼 웹 개발을 위한 HTML 가이드 13편을 시작하도록 합시다.\r\n\r\n# HTML 개발을 위한 확장 프로그램\r\nvscode에는 정말 많은 확장 프로그램이 존재합니다. 그리고 이러한 것은 많은 사람들이 사용하고 있는 vscode라서 가능한 결과입니다. **HTML과 관련된 확장 프로그램**도 정말 다양하게 존재합니다. 그 중에서 **가장 필요한 것들을 골라서 소개**할 생각입니다. 저번 글에서 이미 확장 프로그램을 설치하는 방법에 대해서 다뤘기 때문에 다시 설명하지는 않을 겁니다.\r\n\r\n확장 프로그램을 설치하는 방법이 잘 기억이 나지 않으신다면 [Visual Studio Code 사용하기](/post/2021-09-13-01-vscode-install) 글을 참고하시기 바랍니다.\r\n\r\n## Auto Complete Tag\r\n![Auto Complete Tag 확장 프로그램](https://drive.google.com/uc?export=view&id=19swUqhmw3Vfb618i63TyZ7ZHARlSrIVN)\r\n\r\n첫번째로 소개할 확장 프로그램은 **Auto Complete Tag**입니다. 이 확장 프로그램은 **태그를 직접 입력할 때에 태그를 자동으로 닫아**주는 **Auto Close Tag** 확장 프로그램과 여는 태그와 닫는 태그 중에서 한가지를 수정할 때에 **다른 쪽도 수정되게끔 만들어**주는 **Auto Rename Tag** 확장 프로그램을 동시에 설치해주는 확장 프로그램입니다.\r\n\r\n이게 설치되어 있으면 HTML 코딩을 할 때 정말 편해집니다.\r\n\r\n## htmltagwrap\r\n![htmltagwrap 확장 프로그램](https://drive.google.com/uc?export=view&id=1fBEZ-vJv39AcK8JIWomsxq9ZLISzf5Ac)\r\n\r\n<P>두번째는 <Strong>특정 텍스트를 선택(범위 지정)</Strong>한 상태나 <Strong>특정 태그를 선택한 상태</Strong>에서 <Kbd>ALT + W</Kbd>를 누르면 새로운 태그로 감싸주는 기능을 제공하는 확장 프로그램입니다. 코딩을 하다가 태그들을 감싸줄 부모 태그가 필요할 때에 자식 태그가 될 태그를 선택하고 단축키를 누르면 부모 태그가 만들어지는 편리한 기능을 제공합니다.</P>\r\n\r\n부모 태그가 만들어지면 `p`태그인데 이름은 바꿔주면 됩니다. 여러번 사용해보면 감이 오실 겁니다.\r\n\r\n## CSS 관련 확장 프로그램\r\n### HTML CSS Support\r\n![HTML CSS Support 확장 프로그램](https://drive.google.com/uc?export=view&id=11LJjRw2XESjgj5Sc8ZG4XGl0JxPXM3JT)\r\n\r\n세번째는 HTML과 CSS를 사용하기 편하게 **자동완성 기능을 제공**해주는 확장 프로그램입니다. **html 파일에 css 파일이 연결되어 있을 경우**에 id 값이나 class 값이 이미 정의되어 있다면 html 코딩을 할 때에 **id나 class가 필요할 때** 미리 정의된 녀석들을 **추천**해주는 기능을 합니다. 지금 당장은 쓰지 않겠지만 미리 설치해둔다면 좋을 것 같습니다.\r\n\r\n### IntelliSense for CSS class names in HTML\r\n![IntelliSense for CSS class names in HTML 확장 프로그램](https://drive.google.com/uc?export=view&id=1F94Pn3idrn0YwP05nkNXvlDqGtZqNvrH)\r\n\r\n네번째로 소개할 확장 프로그램은 **IntelliSense for CSS class names in HTML**입니다. html 파일에 연결된 css 파일에 정의된 **클래스들을 미리 읽어**들여서 **클래스를 지정해줄 때에 편리한 기능을 제공**해줍니다. 위에 있는 확장 프로그램과는 또 다른 강력한 기능입니다.\r\n\r\n앞으로 HTML과 CSS를 자주 사용하게 되는데 CSS에서는 **클래스를 자주 사용**하게 됩니다. 디자인을 입힐 때에는 클래스를 주로 사용하거든요. 아무튼 이것도 설치해두면 앞으로 도움이 될 겁니다. 지금 당장 쓰지는 않더라도 말이죠.\r\n\r\n### CSS Peek\r\n![CSS Peek 확장 프로그램](https://drive.google.com/uc?export=view&id=10AecQ-lRpJTLLxiOtnzLwx5bPuiFOfrv)\r\n\r\n다섯번째 확장 프로그램은 HTML과 CSS를 함께 사용할 때에 html 파일에서 지정한 **클래스나 아이디**의 스타일을 **확인할 때**에 편리한 기능을 제공해줍니다. **CSS Peek**이라는 확장 프로그램입니다. 아무 태그에 클래스나 아이디를 지정하고 지정한 클래스나 아이디를 우클릭하면 **정의로 이동**, **참조로 이동**과 같은 메뉴가 나타납니다. 정의로 이동을 누르면 **연결된 css 파일의 해당 클래스로 넘어갈 수** 있습니다.\r\n\r\n심지어는 html 파일 내에서 **css 파일의 일부분을 팝업해서 스타일을 편집할 수도** 있습니다. 이건 나중에 CSS 가이드를 할 때에 자세하게 다뤄보도록 하겠습니다. 결론적으로 귀찮게 파일을 뒤적거리지 않아도 된다는 의미죠. 하지만 가끔 먹통이 될 때도 있어서 이 점은 참고하시면 되겠습니다.\r\n\r\n## Live Server\r\n![Live Server 확장 프로그램](https://drive.google.com/uc?export=view&id=19666Tcf1u4lltaYbdN1HIfFlV4-XqkOb)\r\n\r\n우리는 앞으로 공부를 하면서 html 파일을 작성할 때에 **결과물을 미리 보고 싶을 때**가 있을 겁니다. 그럴 때에 사용하는 확장 프로그램 기능이 바로 **Live Server**입니다. **서버를 띄워서 라이브로 결과물을 확인하면서 코딩**을 할 수 있습니다. **자동으로 새로고침**이 되기 때문에 개발자는 번거롭게 새로고침을 할 필요가 없습니다.\r\n\r\n이 확장 프로그램을 설치하면 vscode의 하단에 **Go Live라는 버튼**이 생깁니다. 버튼이 없다면 html 파일에서 우클릭을 하고 **Open with Live Server**를 클릭하면 됩니다. 로컬호스트 **5500 포트**로 서버가 열립니다.\r\n\r\n<Line />\r\n\r\n지금까지 간단하게 HTML에 필요한 확장 프로그램을 소개해봤습니다. 위에서 소개한 확장 프로그램 이외에도 **다양한 확장 프로그램이 있습니다.** 여러분의 입맛에 맞게 살펴보시면 될 것 같습니다. 이 가이드는 HTML 가이드인데 CSS 관련된 확장 프로그램도 같이 추천한 이유는 어차피 나중에 써야하기 때문입니다. 소개한 확장 프로그램이 많지는 않지만 이정도면 HTML을 개발하는데에 있어서 불편함은 없을 것 같습니다.\r\n\r\n이번 글은 여기까지입니다. 다음 글은 **링크 태그**에 대해서 알아보도록 합시다.\r\n","date":{"year":"2021","month":"09","yearMonth":"2021-09"}}},"__N_SSG":true}