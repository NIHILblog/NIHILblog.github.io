{"pageProps":{"post":{"frontMatter":{"id":25,"title":"웹 개발을 위한 HTML 가이드 번외 - index.html에 대해","description":"이번 글에서는 알아둬서 나쁠 것 없는 주제를 다뤄보려고 합니다. 원래는 비주얼 스튜디오 코드에 대해서 글을 작성하려고 했는데 기존에 작성한 글에서 분리하는 게 나을 것 같은 내용이 있어서 이렇게 작성해보려고 합니다. 이번 글의 주제는 웹의 주소와 파일 이름에 대한 것입니다. 다소 어려운 이야기가 될 수 있습니다. 지금 당장 이해가 안간다면 그냥 다음글로 넘어가셔도 전혀 문제가 없는 내용입니다. 최대한 이해가 되게끔 글을 작성할 것인데 혹시라도 이해가 안된다면 전혀 문제가 안되기 때문에 정말로 다음글로 넘어가시면 됩니다. 그럼 웹 개발을 위한 HTML 가이드 번외편 시작하도록 합시다.","coverImage":"https://drive.google.com/uc?export=view&id=12o03yThbqbZVTDivEj25z-ldfCIOmIp_","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보"],"categories":["가이드","HTML"],"createdAt":1630764660000,"updatedAt":1633117320000,"keywords":[],"drawDate":1630764660000,"display":true,"type":"post"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      strong: \"strong\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\"\n    }, _provideComponents(), props.components), {HtmlGuideMessage, P, Strong} = _components;\n    if (!HtmlGuideMessage) _missingMdxReference(\"HtmlGuideMessage\", true);\n    if (!P) _missingMdxReference(\"P\", true);\n    if (!Strong) _missingMdxReference(\"Strong\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(HtmlGuideMessage, {}), \"\\n\", _jsx(_components.h1, {\n        id: \"개요\",\n        children: \"개요\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글에서는 알아둬서 나쁠 것 없는 주제를 다뤄보려고 합니다. 원래는 비주얼 스튜디오 코드에 대해서 글을 작성하려고 했는데 기존에 작성한 글에서 분리하는 게 나을 것 같은 내용이 있어서 이렇게 작성해보려고 합니다. 이번 글의 주제는 \", _jsx(_components.strong, {\n          children: \"웹의 주소와 파일 이름\"\n        }), \"에 대한 것입니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"다소 어려운 이야기\"\n        }), \"가 될 수 있습니다. 지금 당장 이해가 안간다면 그냥 \", _jsx(_components.strong, {\n          children: \"다음글로 넘어가셔도\"\n        }), \" 전혀 문제가 없는 내용입니다. 최대한 이해가 되게끔 글을 작성할 것인데 혹시라도 이해가 안된다면 전혀 문제가 안되기 때문에 정말로 다음글로 넘어가시면 됩니다. 그럼 \", _jsx(_components.strong, {\n          children: \"웹 개발을 위한 HTML 가이드\"\n        }), \" 번외편 시작하도록 합시다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"컴퓨터와-웹\",\n        children: \"컴퓨터와 웹\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"우리는 웹이 어떻게 돌아가는지에 대해서는 알아보지 않았죠. 웹에 존재하는 모든 페이지들은 사실 \", _jsx(_components.strong, {\n          children: \"어떤 컴퓨터들\"\n        }), \"이 \", _jsx(_components.strong, {\n          children: \"웹 서버를 이용해서 호스팅\"\n        }), \"하고 있는 \", _jsx(_components.strong, {\n          children: \"html\"\n        }), \"파일의 내용입니다. 그리고 파일을 호스팅하는 컴퓨터를 \", _jsx(_components.strong, {\n          children: \"호스트 컴퓨터\"\n        }), \"라고 부릅니다. 웹 서버는 인터넷상에 존재하는 공간이고 컴퓨터가 서버를 열어서 파일을 공유한다면 그 컴퓨터가 바로 호스트 컴퓨터가 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"인터넷은 \", _jsx(_components.strong, {\n          children: \"컴퓨터와 컴퓨터가 서로 연결\"\n        }), \"될 수 있는 \", _jsx(_components.strong, {\n          children: \"네트워크\"\n        }), \"라고 했습니다. 여러분의 컴퓨터에 있는 파일을 누군가가 보기 위해서는 여러분의 컴퓨터와 \", _jsx(_components.strong, {\n          children: \"다른 컴퓨터가 연결되어\"\n        }), \" 있어야 합니다. 그것을 가능하게 해주는 게 바로 웹 서버입니다. 웹 서버를 열어서 파일을 올려두면 여러분의 컴퓨터에 다른 사람이 접근할 수가 있게 됩니다. 즉 호스트 컴퓨터는 인터넷이라는 수단을 통해서 파일을 공유할 수 있게 된 것이죠.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"html파일 뿐만 아니라 \", _jsx(_components.strong, {\n          children: \"모든 파일\"\n        }), \"을 이렇게 공유할 수가 있습니다. 웹 페이지에 존재하는 이미지 또한 호스트 컴퓨터에 존재하는 어떤 폴더 안에 위치한 이미지 파일입니다. 그냥 쉽게 생각하면 모든 페이지와 모든 영상, 이미지, 음원들은 \", _jsx(_components.strong, {\n          children: \"전부가 호스트 컴퓨터가 호스팅하고 있는 파일\"\n        }), \"이라고 생각하면 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 이야기를 왜 하느냐! 바로 \", _jsx(_components.strong, {\n          children: \"index.html\"\n        }), \"이라는 파일 이름과 관련이 있기 때문입니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"컴퓨터와-아이피ip\",\n        children: \"컴퓨터와 아이피(IP)\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"모든 컴퓨터는 \", _jsx(_components.strong, {\n          children: \"아이피\"\n        }), \"라는 것을 가집니다. 아이피는 고유한 식별 번호같은 겁니다. \", _jsx(_components.strong, {\n          children: \"사람으로 생각해보면 주민등록번호\"\n        }), \"라고 생각하시면 됩니다. 아이피는 \", _jsx(_components.strong, {\n          children: \"Internet Protocol\"\n        }), \"의 약자로 컴퓨터와 컴퓨터가 \", _jsx(_components.strong, {\n          children: \"네트워크에서 소통할 때에 필요한 번호\"\n        }), \"입니다. 호스트 컴퓨터들도 아이피를 당연히 갖고 있습니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"모든 웹 사이트의 웹 페이지들은 웹 서버에 존재하는 파일이기 때문에 호스트 컴퓨터에 접근해야만 합니다. 그러기 위해 모든 웹 페이지의 주소, 즉 \", _jsx(Strong, {\n          children: \"URL\"\n        }), \"에는 아이피가 포함되어있습니다. 그런데 우리가 보는 것은 \", _jsx(Strong, {\n          children: \"www.naver.com\"\n        }), \"과 같은 형태죠. 이런 주소들은 아이피의 별명이라고 생각하면 됩니다. \", _jsx(Strong, {\n          children: \"도메인\"\n        }), \"이라고 부릅니다. 우선 네이버를 예시로 들어볼까 합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-text\",\n        children: _jsxs(_components.code, {\n          className: \"language-text code-highlight\",\n          children: [_jsx(_components.span, {\n            className: \"code-line\",\n            children: \"https://www.naver.com\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"https://0.0.0.0:0\\n\"\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"호스트 컴퓨터로 접근하는 아이피의 구조는 보통 아랫줄과 같습니다. 아이피는 \", _jsx(_components.strong, {\n          children: \"0부터 255\"\n        }), \"까지 총 네가지의 숫자로 이루어져 있습니다. 숫자와 숫자는 점으로 구분합니다. 아이피의 마지막 숫자의 바로 뒤에는 **콜론(:)**이 오고 그 뒤에 **포트(Port)**에 해당하는 숫자가 오게 됩니다. 호스트 컴퓨터는 이렇게 아이피와 포트가 존재합니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"네이버의 경우도 원래는 아랫줄과 같은 모양인데 윗줄처럼 \", _jsx(_components.strong, {\n          children: \"도메인으로 숨겨둔 상태\"\n        }), \"입니다. 왜냐면 영어를 입력하는 게 더 기억에도 남고 쉽기 때문이죠. 모든 사이트들은 이렇게 도메인으로 숨겨둔 겁니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"일반적으로 웹에서 암묵적으로 쓰는 포트는 \", _jsx(_components.strong, {\n          children: \"80\"\n        }), \"입니다. 80 포트는 표기를 생략할 수 있습니다. 호스트 컴퓨터가 돌리고 있는 서버가 \", _jsx(_components.strong, {\n          children: \"https\"\n        }), \"를 사용하는 서버라면 포트는 \", _jsx(_components.strong, {\n          children: \"443\"\n        }), \"입니다. 443도 생략이 가능합니다. 하지만 다른 포트들은 생략이 불가능합니다. 아무튼간에 중요한건 아이피와 포트를 도메인이라는 것으로 숨겨두었다는 겁니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"호스트-컴퓨터와-파일\",\n        children: \"호스트 컴퓨터와 파일\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"호스트 컴퓨터가 모든 종류의 파일을 공유할 수 있다는 말은 컴퓨터 안의 모든 파일을 공유한다는 것은 아닙니다. 물론 그런 경우도 있지만 \", _jsx(_components.strong, {\n          children: \"서버가 호스팅하고 있는 폴더와 그 아래의\"\n        }), \" 하위 폴더, 하위 파일들을 공유할 수 있습니다. 이 때, 서버가 호스팅하고 있는 폴더는 우리처럼 개발환경이 갖춰진 \", _jsx(_components.strong, {\n          children: \"프로젝트 폴더\"\n        }), \"입니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [_jsx(Strong, {\n          children: \"https://www.naver.com\"\n        }), \"라는 주소는 네이버의 프로젝트 폴더를 가리키고 있는 것과 같죠. 아까는 아이피의 별명이라고 했는데 하나의 컴퓨터에서 \", _jsx(Strong, {\n          children: \"여러개의 서버를 만들고 배포할 수 있기 때문\"\n        }), \"에 정확히는 \", _jsx(Strong, {\n          children: \"하나의 서버가 여러개의 도메인을 가질 수\"\n        }), \" 있는 겁니다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"index라는-이름의-의미\",\n        children: \"index라는 이름의 의미\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"지금까지 이 이야기들을 한 이유는 \", _jsx(_components.strong, {\n          children: \"index\"\n        }), \"라는 이름을 설명하기 위해서는 여기까지의 설명이 필요했기 때문입니다. 대부분의 경우 index라는 이름은 \", _jsx(_components.strong, {\n          children: \"각 폴더의 기본 파일\"\n        }), \"을 의미합니다. \", _jsx(_components.strong, {\n          children: \"index.html\"\n        }), \"이라면 그 폴더의 \", _jsx(_components.strong, {\n          children: \"기본 페이지\"\n        }), \"를 의미하는 것이고 \", _jsx(_components.strong, {\n          children: \"index.js\"\n        }), \"라면 그 폴더의 \", _jsx(_components.strong, {\n          children: \"기본 스크립트 파일\"\n        }), \"을 의미하는 겁니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"이 내용은 나중에 다룰 절대경로와 상대경로에 대한 것과도 관련이 있는데, 웹상에서 프로젝트의 루트 폴더 즉 프로젝트의 최상위 폴더의 경로는 \", _jsx(Strong, {\n          children: \"/\"\n        }), \"로 표현합니다. \", _jsx(Strong, {\n          children: \"https://www.naver.com\"\n        }), \"라는 주소는 사실 \", _jsx(Strong, {\n          children: \"/\"\n        }), \"가 빠져 있는 것이고, \", _jsx(Strong, {\n          children: \"/\"\n        }), \"는 \", _jsx(Strong, {\n          children: \"/index.html\"\n        }), \"로 표현할 수 있습니다. \", _jsx(Strong, {\n          children: \"index.html\"\n        }), \"이라는 이름은 생략이 가능합니다. 다른 이름은 생략이 불가능하고 확장자만 생략이 가능한데, \", _jsx(Strong, {\n          children: \"index.html\"\n        }), \"이라는 파일 이름 만큼은 생략이 가능합니다.\"]\n      }), \"\\n\", _jsxs(P, {\n        children: [\"즉 우리가 항상 들어가는 네이버 홈페이지의 주소는 이렇게도 쓸 수 있습니다. \", _jsx(Strong, {\n          children: \"https://www.naver.com/index.html\"\n        }), \"로 말이죠. 이건 모든 폴더에 해당될 수 있는 것이라서 모든 주소는 아래의 두가지 경우 중 하나입니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        className: \"language-text\",\n        children: _jsxs(_components.code, {\n          className: \"language-text code-highlight\",\n          children: [_jsx(_components.span, {\n            className: \"code-line\",\n            children: \"https://주소/폴더이름/index.html\\r\\n\"\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"https://주소/폴더이름.html\\n\"\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"위의 두 주소는 완전히 똑같은 기능을 합니다. 이건 여러분이 웹 개발을 할 것이라면 \", _jsx(_components.strong, {\n          children: \"언젠가는 알아야 하는 내용\"\n        }), \"입니다. 좀 빨리 알아본 것이라고 생각하고 이해가 잘 안되면 나중에 다시 읽어보시면 됩니다. 이번 글은 간단하게 \", _jsx(_components.strong, {\n          children: \"index.html\"\n        }), \"이라는 이름에 대해서 알아봤습니다. 이건 나중에 \", _jsx(_components.strong, {\n          children: \"자바스크립트를 건드릴 때에도 똑같이 적용\"\n        }), \"됩니다!\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이번 글은 여기까지 입니다. 나중에는 더 심화적인 내용으로 \", _jsx(_components.strong, {\n          children: \"로컬 주소와 웹 주소\"\n        }), \", 그리고 \", _jsx(_components.strong, {\n          children: \"상대경로와 절대경로\"\n        }), \"를 다룰 때가 올텐데 그건 나중일이니 일단은 접어두도록 하겠습니다. 다음 글은 정말로 \", _jsx(_components.strong, {\n          children: \"비주얼 스튜디오 코드\"\n        }), \"에 대해 알아보도록 합시다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"slug":"2021-09-04-01-filename-index"},"prev":{"frontMatter":{"id":24,"title":"웹 개발을 위한 HTML 가이드 11편 - 문단 태그(p)","description":"웹 개발을 위한 HTML 가이드 11편 시작합니다. 저번 글에서는 제목 태그에 대해 알아봤습니다. 이번 글에서 알아볼 내용은 문단 태그입니다. 제목이 있다면 문단이 있다고 저번 글에서 이야기를 했었죠. 하지 않았어도 이건 당연합니다! 제목 태그를 알아봤으니 이제는 문단 태그에 대해서 알아볼 시간입니다. HTML에서 문단을 나타내는 태그는 바로 p태그입니다. Pragraph의 약자로 말 그대로 문단을 만들어줍니다. 블럭 태그의 특징을 띄고 대부분의 경우에는 제목 태그와 함께 쓰이는 편입니다.","coverImage":"https://drive.google.com/uc?export=view&id=1oMyFPKOLlRAXvAECYaUwZ_2l1Ub4hM4p","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","p","문단 태그"],"categories":["가이드","HTML"],"createdAt":1629782700000,"updatedAt":1636817700000,"keywords":[],"drawDate":1629782700000,"display":true,"type":"post"},"slug":"2021-08-24-01-pragraph-tag","fullPath":"/post/2021-08-24-01-pragraph-tag","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n# 개요\r\n[저번 글](/post/2021-07-19-01-heading-tags)에서는 제목 태그에 대해 알아봤습니다. 이번 글에서 알아볼 내용은 문단 태그입니다. 제목이 있다면 문단이 있다고 저번 글에서 이야기를 했었죠. 하지 않았어도 이건 당연합니다! 제목 태그를 알아봤으니 이제는 문단 태그에 대해서 알아볼 시간입니다.\r\n\r\n웹 개발을 위한 HTML 가이드 11편 시작합니다.\r\n\r\n# 문단을 나타내는 p태그\r\nHTML에서 **문단을 나타내는 태그**는 바로 `p태그`입니다. **Pragraph**의 약자로 말 그대로 문단을 만들어줍니다. `p태그`는 블럭 태그의 특징을 띄고 대부분의 경우에는 제목 태그와 함께 쓰이는 편입니다.\r\n\r\n자, 그럼 메모장을 열고 HTML의 기본 구조를 작성한 뒤에 다음과 같은 코드를 넣어보고 **html파일로 저장**한 뒤에 실행해봅시다.\r\n\r\n```html\r\n<p>이것은 문단 태그입니다.</p>\r\n```\r\n\r\n![문단 태그의 모습.](https://drive.google.com/uc?export=view&id=10Zlv6hDTbnt--eI1nb5NZfJq7HcEJ_Ph)\r\n\r\n그러면 아래의 이미지처럼 글자가 나타난 것을 볼 수 있죠. 제목과는 다르게 굵지도 않고 크기가 크지도 않습니다. 이게 바로 본문에 해당하는 태그입니다. 이런 블로그 같은 곳에는 `p태그`가 특히나 많이 사용됩니다. 가령 뉴스기사 페이지 같은 곳에서 많이 쓰는 셈이죠. `p태그`에 대한 사용 방법은 이게 전부입니다.\r\n\r\n그런데 이렇게 끝나면 참 아쉽죠. 몇가지를 더 알아보도록 합시다.\r\n\r\n```html\r\n<p>\r\n  태그 안에서 아무리\r\n  엔터를 쳐서 여러줄을 적더라도\r\n  줄바꿈은 일어나지 않습니다.\r\n</p>\r\n```\r\n\r\n위처럼 적으면 어떻게 될까요? 적힌 내용처럼 **줄바꿈이 되지 않습니다.** 한 번 확인해볼까요?\r\n\r\n![HTML에서 줄바꿈을 하기 위해서는 개행 태그가 필요하다.](https://drive.google.com/uc?export=view&id=1CLay0oXiLdURobpRqFQBkJv041g3Z-ET)\r\n\r\n이렇게 아무 일도 일어나지 않았습니다. **HTML에서 줄바꿈을 하기 위해**서는 새로운 태그를 알아야 합니다. 바로 **개행 태그**입니다.\r\n\r\n## 개행을 나타내는 br태그\r\n개행 태그는 `p태그`와 함께 사용되기도 하고 따로 사용되기도 합니다. 줄바꿈이 필요할 때에 혹은 빈 줄이 필요할 때에 사용하는 태그입니다. 바로 `br태그`라고 하는 태그인데 이는 **Line break**를 의미합니다. 그래서 개행 태그인 것이죠.\r\n\r\n아래와 같이 사용합니다.\r\n\r\n```html\r\n<p>\r\n  아이유 - 라일락<br />\r\n  아이유 - 코인\r\n</p>\r\n<br />\r\n<br />\r\n<br />\r\n<p>아이유 - 에필로그</p>\r\n```\r\n\r\n![br태그를 함께 이용할 때가 많다.](https://drive.google.com/uc?export=view&id=1u0HkwHrok_Dw6Na1zMl247zWvXN569Ag)\r\n\r\n여러번 사용하면 빈줄 여러개가 생깁니다. HTML은 이렇게 직관적인 기능을 갖고 있기 때문에 연습만 잘 한다면 익히는데에 별 문제는 없을 것이라고 생각합니다. `br태그`는 닫는 태그가 없습니다. 홀로 닫는 태그이기 때문에 혼자서 닫아주시면 됩니다.\r\n\r\n# 실전 연습\r\n<P>그럼 이제 마지막으로 실습을 한 번 해보고 글을 마치도록 합시다. 바로 <Strong>제목 태그</Strong>와 함께 사용해서 간단한 문서 페이지를 만들어 보는겁니다. 우리가 저번 글에서 <Name>index.html</Name>에 추가했던 내용이 제목들이었죠. 이번 글에서는 여기에 본문을 추가해보는 것을 목적으로 코딩을 해보도록 합시다.</P>\r\n\r\n```html file=index.html\r\n<h1>웹 개발의 3요소</h1>\r\n<h2>HTML</h2>\r\n<h2>CSS</h2>\r\n<h2>JavsScript</h2>\r\n```\r\n\r\n이런 모양일텐데, 각 `h2`태그의 아래에 설명을 적어보도록 합시다. 아래처럼 간단하게 입력하면 됩니다.\r\n\r\n```html file=index.html\r\n<h1>웹 개발의 3요소</h1>\r\n<h2>HTML</h2>\r\n<p>HTML은 웹의 뼈대를 만들어주는 기능을 하는 마크업 언어입니다.</p>\r\n<h2>CSS</h2>\r\n<p>CSS는 HTML로 만든 뼈대에 피부를 만들어주고 화장을 시켜주는 스타일 시트 언어입니다.</p>\r\n<h2>JavsScript</h2>\r\n<p>자바스크립트는 HTML과 CSS를 동적으로 제어할 수 있는 웹의 뇌와 같은 언어입니다.</p>\r\n```\r\n\r\n이렇게 코딩을 하고 저장해봅시다. 그리고 실행을 하면..!\r\n\r\n![프로젝트 두번째 과정.](https://drive.google.com/uc?export=view&id=12iiserJEHdTyDG-cK-2rybaFxk4mOzdg)\r\n\r\n이처럼 간단한 문서가 만들어졌습니다. 여러분은 **웹다운 웹**을 처음으로 만들어 본 것입니다. 다시 한 번 지금까지의 내용을 설명을 하자면 `h1`태그는 한 페이지에 하나만 존재하는 게 표준으로 권장되고 있다고 했습니다. 그래서 하나를 넣었고 그 아래 `h2`태그들은 많아도 상관 없고 셋 다 같은 레벨의 목차이기 때문에 사용했습니다.\r\n\r\n이렇게 HTML은 문서의 측면이 강하게 다가옵니다. 물론 이건 우리가 초기 단계의 HTML을 배우고 있기 때문이고, 간단한 것만 알아보고 있기 때문입니다. 훗날 디자인을 입히고 **자바스크립트를 사용할 때**가 되면 비로소 **웹 어플리케이션**, **웹 프로그램**이 되는 셈입니다.\r\n\r\n<P>여러분이 잘 따라오셨다면 <Name>index.html</Name>의 내용은 아래의 코드와 같을 겁니다.</P>\r\n\r\n```html file=index.html\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <title>웹 개발의 3요소</title>\r\n</head>\r\n\r\n<body>\r\n  <h1>웹 개발의 3요소</h1>\r\n  <h2>HTML</h2>\r\n  <p>HTML은 웹의 뼈대를 만들어주는 기능을 하는 마크업 언어입니다.</p>\r\n  <h2>CSS</h2>\r\n  <p>CSS는 HTML로 만든 뼈대에 피부를 만들어주고 화장을 시켜주는 스타일 시트 언어입니다.</p>\r\n  <h2>JavsScript</h2>\r\n  <p>자바스크립트는 HTML과 CSS를 동적으로 제어할 수 있는 웹의 뇌와 같은 언어입니다.</p>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n오늘 만들어본 파일은 보관을 해두시기 바랍니다. 지금 당장 저장을 합시다! 다음 글에서도 계속 사용할 것이기 때문이죠. 저 같은 경우는 프로그래밍을 위한 폴더를 만들어놨고 그 안에 프로젝트별로 카테고리를 만들어서 그 카테고리의 안에 프로젝트 폴더들을 넣어둡니다. 이 블로그로 예를 들어보자면 **web-coding/Blog/nihilog-code** 이런 구조를 하고 있습니다.\r\n\r\n어떤 구조로 프로젝트 폴더를 관리하든 그건 자유롭게 하시고 중요한 것은 보관을 해두는 겁니다. 앞으로 이 파일을 계속해서 발전시켜서 다양한 기능을 하게끔 만들어 볼 겁니다. HTML 가이드에서 사용하고 있는 이 파일은 깃허브에 올려두었습니다. 아래의 링크를 참고하시면 됩니다.\r\n\r\n<P><A type='normal' href='https://github.com/nihil-programming-guide/web-tuto'>web-tuto</A> 이 링크에서 HTML 폴더로 들어가시면 진행도 별로 폴더가 있습니다. 링크 태그를 추가해놓은 것은 미리 만들어놨으니까 무시하시고 2번을 보시면 됩니다.</P>\r\n\r\n<Line />\r\n\r\n이번 글에서는 **문단 태그**에 대해 알아봤고 **개행 태그**에 대해서도 알아봤습니다. 앞으로도 계속 쓰일 것이기 때문에 여러번 연습을 해보시면 좋을 겁니다. 다음 글은... HTML 가이드가 아닙니다. 다음 글에서는 정비 타임으로 **텍스트 에디터**를 만져보는 시간을 가질 겁니다. 언제까지고 이 불편한 메모장을 갖고 있을 수는 없거든요.\r\n\r\n다음 글에서는 위에서 말했던 것처럼 <Strong><A type='normal' href='https://code.visualstudio.com/'>VSCode</A></Strong>에 대해서 알아볼 예정입니다. 그럼 이번 글도 고생많으셨습니다. 다음 글에서 봅시다!\r\n","date":{"year":"2021","month":"08","yearMonth":"2021-08"}},"next":{"frontMatter":{"id":26,"title":"웹 개발을 위한 HTML 가이드 12편 - Visual Studio Code 사용하기","description":"우리는 지금까지 알게 된 태그는 별로 없지만 연습을 하기 위해 메모장으로 코딩을 했습니다. 물론 계속 메모장으로 코딩을 해도 상관 없지만 상당히 불편하다는 것을 느꼈을 겁니다. 이 부분은 취향에 따라 차이가 있지만 보통의 경우 편리한 기능을 제공해주는 텍스트 에디터를 사용합니다. 텍스트 에디터의 종류는 다양합니다. 프로그래밍 언어에 따라서 인기가 있는 에디터가 있기도 합니다. 다양한 에디터들 중에서 오늘 우리가 알아볼 텍스트 에디터는 비주얼 스튜디오 코드라는 녀석입니다. 마이크로소프트에서 만든 텍스트 에디터인데 사용자가 많아서 많은 확장 프로그램들이 만들어지고 있습니다. 이제 이 녀석에 대해서 알아봅시다. 시작하기 전에 메모장을 사용하면서 굳이 불편함을 느끼지 않았다면 메모장을 계속 써도 상관은 없습니다. 본인의 선택입니다.","coverImage":"https://drive.google.com/uc?export=view&id=1xCkzKi1sM414SmXwmWXyEJJ-oLMGBqVL","tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","비주얼 스튜디오 코드","VS Code"],"categories":["가이드","HTML"],"createdAt":1631470080000,"updatedAt":1632549960000,"keywords":[],"drawDate":1631470080000,"display":true,"type":"post"},"slug":"2021-09-13-01-vscode-install","fullPath":"/post/2021-09-13-01-vscode-install","content":"\r\nimport {\r\n  A, Bold, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage, Name,\r\n  Dt, Dd\r\n} from '@/components/Post';\r\n\r\n<HtmlGuideMessage />\r\n\r\n# 개요\r\n우리는 지금까지 알게 된 태그는 별로 없지만 연습을 하기 위해 메모장으로 코딩을 했습니다. 물론 계속 메모장으로 코딩을 해도 상관 없지만 상당히 불편하다는 것을 느꼈을 겁니다. 이 부분은 취향에 따라 차이가 있지만 보통의 경우 편리한 기능을 제공해주는 텍스트 에디터를 사용합니다.\r\n\r\n텍스트 에디터의 종류는 다양합니다. 프로그래밍 언어에 따라서 인기가 있는 에디터가 있기도 합니다. 다양한 에디터들 중에서 오늘 우리가 알아볼 텍스트 에디터는 **비주얼 스튜디오 코드(Visual Studio Code)**라는 녀석입니다. 마이크로소프트에서 만든 텍스트 에디터인데 사용자가 많아서 많은 확장 프로그램들이 만들어지고 있습니다. 이제 이 녀석에 대해서 알아봅시다.\r\n\r\n시작하기 전에 메모장을 사용하면서 굳이 불편함을 느끼지 않았다면 메모장을 계속 써도 상관은 없습니다. 본인의 선택입니다.\r\n\r\n# 비주얼 스튜디오 코드\r\n비주얼 스튜디오 코드(Visual Studio Code)는 줄여서 **vscode**라고도 많이 부릅니다. 사용하는 사람이 많기 때문에 정보를 찾는데에 있어서 어려움이 없습니다. 당연하게도 vscode보다 뛰어난 에디터도 있습니다. 가장 먼저 떠오르는 것은 **WebStorm**이라는 녀석입니다. 근데 이 녀석은 **유료**입니다. 그 대신에 진짜 어마어마한 기능을 갖고 있습니다.\r\n\r\n<P>이제 막 프로그래밍에 입문한 사람들에게 에디터를 유료로 사용해라! 라고는 할 수가 없기 때문에 vscode를 사용하는 겁니다. <Strong>물론 vscode 자체만으로도 어렵지 않게 프로그래밍이 가능</Strong>합니다. 아무튼, 이제부터 vscode에 대해서 알아볼 겁니다. <Mark>설치부터 시작해서 기본적인 사용 방법을 함께 알아보도록 합시다.</Mark></P>\r\n\r\n**제가 윈도우이기 때문에 윈도우를 기준으로 설명합니다!**\r\n\r\n## 설치하기\r\n프로그램을 사용하기 위해서는 가장 먼저 설치를 해야합니다. 설치를 위해서 검색을 해봅시다. 구글에다가 **vscode**라고 검색합니다. 그러면 가장 위에 보이는 사이트가 있습니다. 이 사이트로 들어가줍시다.\r\n\r\n![구글에 vscode를 검색하고 보이는 사이트로 들어간다.](https://drive.google.com/uc?export=view&id=1SssmgxNgRyx4vY0HUfMLbdrTsmKHsmRh)\r\n\r\n사이트에 들어간 다음에 할 것은 간단합니다. 바로 눈 앞에 보이는 **파란색 다운로드 버튼을 클릭**하는 겁니다. 아마도 **운영체제에 맞게끔 다운로드 파일이 다운로드** 될 겁니다. 아무튼 다운로드를 하고난 다음에는 설치 프로그램을 실행하면 됩니다.\r\n\r\n![사이트에 들어가면 여러분의 눈 앞에 다운로드 버튼이 보인다. 클릭하자.](https://drive.google.com/uc?export=view&id=1V42E-S2hqw3UQlB-VY2L_wS8BwKSUI4o)\r\n\r\n대충 아무 곳에다가 파일을 다운로드하고, 실행합니다. 설치 자체는 다음 버튼을 계속 누르면 됩니다. 그래도 혹시 모르니까 아래의 이미지들과 같이 체크가 되어있는지 확인하시면 되겠습니다.\r\n\r\n![동의합니다를 눌러준다.](https://drive.google.com/uc?export=view&id=19cu6-jOMOdRu6lykNdxNliK7aJp55SQe)\r\n![이 네가지가 체크되어있는지 확인하자.](https://drive.google.com/uc?export=view&id=1eGAZu_q1lccMyb-QcJc6_-xIk_jrGyO_)\r\n![설치 버튼을 눌러준다.](https://drive.google.com/uc?export=view&id=1uCl9rRFSDRiAQ97_QpLnVsy2UI75HwvO)\r\n![설치가 되는 모습이다.](https://drive.google.com/uc?export=view&id=1GX0tpVlAbSOehgf24aQ9JV_yAcXS3wy-)\r\n\r\n설치를 다 하고 실행하면 아래와 같은 모양의 프로그램이 실행됩니다.\r\n\r\n![비주얼 스튜디오 코드의 모습이다.](https://drive.google.com/uc?export=view&id=1TzLeW76Rd6uyQsmIC0U4fTUmow0aHGvK)\r\n\r\n제가 쓰던 환경에서 설정을 잠시 없앤 상태에서 찍은 이미지지만 방금 막 프로그램을 설치하고 실행한 여러분들과는 조금 다를 겁니다. 달라도 상관 없습니다. 설정이야 알아서 꾸며서 쓰면 되거든요. 이제 설치는 완료되었습니다. 기본적인 설정을 해보도록 합시다.\r\n\r\n## 한글 설정\r\n**vscode는 한글을 지원**하지만 처음에 설치하면 한글이 아닙니다. 그래서 **한글 설정을 해줘야** 합니다. 아주 간단하게 한글 설정을 할 수 있습니다. 좌측의 아이콘들 중에서 사각형 네개가 그려져 있는 아이콘을 클릭하시면 **확장 프로그램**을 검색할 수 있습니다.\r\n\r\n지금 다루는 확장 프로그램에 대한 내용은 다음 글에서 계속 다룰 것이기 때문에 기억해둡시다. **vscode를 강화시키는 아주 중요한 기능**입니다.\r\n\r\n![확장 프로그램 아이콘을 클릭해보자.](https://drive.google.com/uc?export=view&id=1leIC_ns_EKINHKcKC6xpLS6bt7xe2ul9)\r\n\r\n생긴게 갑자기 달라졌는데 개의치마세요! 저는 사용하던 테마가 있을 뿐입니다.\r\n\r\n아무튼 확장 프로그램 아이콘을 클릭했으면 **검색**을 합시다. **korean**이라고 검색만 해도 아래와 같은 아이콘을 갖고 있는 확장 프로그램을 발견할 수 있습니다. 저는 이미 설치되어있어서 제거라는 버튼이 있지만 여러분은 되어있지 않을 겁니다. 설치 버튼을 눌러서 과감하게 설치하고나면 한글 설정이 완료됩니다.\r\n\r\n![한글 설정을 할 수 있는 확장 프로그램이다.](https://drive.google.com/uc?export=view&id=13NkfcEaui6tTI582W-mcl54C8yCWiz37)\r\n\r\n## 기본적인 사용법\r\n한글 설정도 마쳤으니 이제는 **vscode의 간단한 사용법**에 대해서 알아봅시다. 우리가 당장 프로그래밍을 하기 위해 필요한 것들을 우선 살펴보는 게 좋겠습니다. 간단하게 설정에 들어가서 설정을 하는 방법이나 쉽게 HTML 코딩을 하는 방법에 대해서 알아봅시다.\r\n\r\n### 작업 폴더 설정하기\r\n![폴더 작업을 하지 않은 상태의 모습.](https://drive.google.com/uc?export=view&id=14qKIZeE3JoHREbtDhZ4qclHh3Gt1ML1E)\r\n\r\n여러분이 vscode를 설치하고 사용하려고 보면 파일을 건드릴 수가 없습니다. 정확히는 건드릴 파일이 없죠. 왜냐면 **작업 폴더 설정**을 하지 않았기 때문입니다. 그래서 우리가 사용하던 작업 폴더를 지정해줄 필요가 있습니다.\r\n\r\n폴더 설정 방법에는 여러가지가 있습니다. 첫번째 방법은 아래의 이미지처럼 **작업 폴더를 vscode의 파일 탐색기에 드래그**해서 vscode에서 사용할 수 있게 여는 겁니다.\r\n\r\n![폴더를 드래그해서 폴더 설정하기.](https://drive.google.com/uc?export=view&id=1jbSeig8jOhpMlox_D2ZeBKX8HzoO51XU)\r\n\r\n두번째는 **폴더 열기** 버튼을 눌러서 직접 작업 폴더를 찾아 적용시키는 겁니다.\r\n\r\n<P>세번째 방법은 작업 폴더에서 터미널<Gray>(cmd나 파워쉘 같은)</Gray>을 열고 <Code>code .</Code>를 쳐서 vscode를 작업 폴더에서 여는겁니다. 아래의 이미지 처럼요. <Strong>code</Strong> 는 vscode를 의미하는 것이고 그 뒤의 <Strong>.</Strong>은 현재 폴더를 의미합니다. 즉 작업 폴더에서 vscode를 열겠다. 라는 의미인 것이죠.</P>\r\n\r\n![터미널을 이용해서 열기.](https://drive.google.com/uc?export=view&id=1RipMDzJJTWPwbz8uBi-GAXRZNaUGsSaV)\r\n\r\n저는 세번째 방법을 더 좋아하고 자주 이용합니다. 굳이 설정이랄 것도 없고 항상 저렇게 열기 때문에 따로 설정해줄 필요가 없거든요. 아무튼 이렇게 설정을 마치고나면 본격적인 코딩이 가능해집니다.\r\n\r\n![폴더 설정을 마친 모습이다.](https://drive.google.com/uc?export=view&id=1WjzUIAH-SNsOW5070fLPlA8BaHoCAHj8)\r\n\r\n### 파일 탐색기 다루기\r\n![vscode의 파일 탐색기의 모습이다.](https://drive.google.com/uc?export=view&id=1vqy6tSdU9D1qochvDOUjkmuVMvrDHppc)\r\n\r\nvscode를 켜면 왼쪽에 보이는 아이콘 메뉴들 중에서 파일 모양처럼 생긴게 **파일 탐색기** 부분입니다. 여러분의 프로젝트 폴더의 내부 파일들이 보이고 이를 직접적으로 조작할 수 있는 부분이죠. 파일 탐색기에서 파일을 만들면 실제로 디스크에도 파일이 생기는 겁니다.\r\n\r\n파일을 어떻게 만들고, 폴더를 어떻게 만드는지 알아봅시다. 아주 간단합니다.\r\n\r\n<P>프로젝트 폴더 내에 파일이나 폴더가 아무것도 없을 때에는 <Bold>탐색기에 커서를 대고 있거나 탐색기의 부분이 활성화되어 있을 때에 생기는 아이콘들을 이용</Bold>해서 파일을 만들 수 있고 <Bold>그냥 허공에 우클릭을 하면 나타나는 메뉴를 통해서</Bold> 파일이나 폴더를 만들 수 있습니다.</P>\r\n\r\n![탐색기가 활성화되면 상단에 아이콘이 뜬다.](https://drive.google.com/uc?export=view&id=1DmvEClbdnP4u6mDlHVePjbTR-2PFrbAy)\r\n![탐색기를 우클릭하면 메뉴가 뜬다.](https://drive.google.com/uc?export=view&id=191Hzu8b3x0jdFrC83hI0z6P1SCki31n2)\r\n\r\n<P>이렇게 아이콘을 누르거나 메뉴를 이용해서 폴더나 파일을 만든 후에는 <Bold>이름을 입력</Bold>해주면 됩니다. 파일 이름을 입력하지 않으면 파일의 생성은 취소됩니다. 파일 이름을 입력해줍시다.</P>\r\n\r\n<P>특정 폴더의 안에서 파일이나 또 다른 폴더를 만들기 위해서는 <Bold>탐색기에서 해당 폴더를 클릭한 상태</Bold>에서 탐색기 상단의 아이콘을 누르거나 폴더를 우클릭해서 새 폴더 혹은 새 파일 메뉴를 클릭하면 되겠습니다.</P>\r\n\r\n<P>파일의 이름을 바꾸려면 파일을 클릭한 상태에서 <Kbd>F2</Kbd>를 누르면 됩니다. 윈도우에서 파일 이름 바꿀 때에 사용하는 단축키와 같습니다. 여기까지가 아주 기본적인 파일 탐색기 이용 방법입니다. 하다보면 적응 될 겁니다. 사용해봅시다!</P>\r\n\r\n### 설정 이용하기\r\n<P>vscode는 가볍지만 어떤 설정을 하느냐에 따라서 천차만별의 기능을 갖게 됩니다. 설정을 통해서 여러분의 개성을 표현할 수도 있습니다. 설정창으로 들어가는 방법에는 <Strong>좌측 하단의 톱니모양 아이콘을 클릭</Strong>하고 설정을 누르는 방법과 <Kbd>CTRL + ,</Kbd>을 누르는 방법 등등이 있는데 단축키를 이용해서 들어가는 게 가장 빠릅니다.</P>\r\n\r\n![설정창에 들어간 모습이다.](https://drive.google.com/uc?export=view&id=1B1HUOwzG1GmjWFjIKlpaO-klpvV9GK4K)\r\n\r\n이 설정창에서 많은 것들을 바꿀 수가 있습니다. 확장 프로그램에 대한 설정도 여기서 바꿀 수 있습니다. 만일 여러분이 코딩에 좀 익숙하다면 직접 **JSON파일**을 건드려서 설정을 할 수도 있습니다.\r\n\r\n![json파일을 직접 건드리는 방법도 있다.](https://drive.google.com/uc?export=view&id=1CXez0KjgaB0MsD4fkiAtrQABZzu6c-9L)\r\n\r\n설정에서 폰트 정도는 바꿔주는 게 여러분의 정신건강에 좋을 수 있습니다. 폰트 중에서도 모든 글자의 폭이 같은 폰트를 사용하면 더 좋습니다. 현재 제가 사용하는 폰트는 **Cascadia Code**라는 폰트 입니다.\r\n\r\n### Emmet 사용하기\r\nHTML 코딩을 할 때에는 **Emmet**의 기능을 이용하는 게 정말 편리합니다. 하나 하나 태그를 치는 것보다는 태그의 이름을 치고 **탭을 눌러 자동으로 완성**하는 게 상당한 편의성을 제공해줍니다. Emmet에 대한 디테일한 사용법은 나중에 따로 올려보겠습니다. 이번 글에서는 간단하게만 알아봅시다.\r\n\r\n```text\r\n!\r\n```\r\n\r\n비어있는 html 파일에서 **느낌표**만 치고 **탭**을 누르면 아래와 같은 기본 골격이 만들어집니다. 여기서 조금만 수정하면 되겠죠.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n```text\r\ndiv\r\n```\r\n\r\n```html\r\n<div></div>\r\n```\r\n\r\n**div**를 치고 **탭**을 누르면 `div`태그가 완성됩니다. 홀로 닫는 태그의 경우에는 닫는 태그가 없어도 되기 때문에 홀로 닫는 태그가 만들어집니다.\r\n\r\n```text\r\ndiv>p\r\n```\r\n\r\n```html\r\n<div>\r\n  <p></p>\r\n</div>\r\n```\r\n\r\n이런식으로 하면 **부모태그와 자식태그** 관계의 태그를 완성할 수 있습니다. **>**를 이용해서 상위, 하위 구조를 만들어낼 수 있는 겁니다. 중요한건 **탭**을 누르는 겁니다.\r\n\r\n```text\r\nh2{제목}+p{문단}\r\n```\r\n\r\n```html\r\n<h2>제목</h2>\r\n<p>문단</p>\r\n```\r\n\r\n태그 이름뒤에 **중괄호**를 붙이고 중괄호의 **안에 내용**을 입력하고 **탭**을 누르면 여는 태그와 닫는 태그의 안에 내용이 들어가게 됩니다. **+**를 이용하면 **형제 관계**에 있는 태그를 완성할 수 있습니다.\r\n\r\n이렇게 간단하게만 알아봐도 Emmet의 기능은 짱짱하다는 것을 알 수 있습니다. 이처럼 Emmet을 사용하면 아주 편하게 HTML 코딩이 가능합니다.\r\n\r\n<Line />\r\n\r\n이번 글에서는 vscode에 대해서 알아보는 시간을 가져봤습니다. vscode를 설치하고, 실행하고 설정을 건드리는 방법이나 Emmet을 사용하는 방법에 대해서 살펴봤죠. vscode도 지금은 낯설겠지만 계속 만져보다보면 익숙해질 것이라고 생각합니다.\r\n\r\n다음 글에서는 **설치하면 좋은 확장 프로그램**에 대해서 다뤄보도록 하겠습니다. 이번 글은 여기까지입니다. 다음 글에서 봅시다.\r\n","date":{"year":"2021","month":"09","yearMonth":"2021-09"}}},"__N_SSG":true}