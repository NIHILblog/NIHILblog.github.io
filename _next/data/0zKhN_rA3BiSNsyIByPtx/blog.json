{"pageProps":{"posts":[{"frontMatter":{"title":"웹 개발을 위한 HTML 가이드 9편 - 공간 할당 태그(div, span)","description":"이전 글까지는 HTML에 대한 기초적인 정보에 대해서 알아봤다면 이번 글부터는 본격적으로 태그들에 대해서 알아보는 시간을 갖도록 할 겁니다. 이번 글에서는 공간을 할당하는 태그인 div 태그와 span 태그에 대해서 알아볼 예정입니다. 공간을 할당하는 태그에는 두가지가 있습니다. 위에서 이미 언급이 된 div 태그와 span 태그입니다. 이 두가지 태그는 가장 많이 사용되는 태그라고 생각하는데, 말 그대로 공간을 할당하기 위한 태그입니다. 이 두가지의 태그는 가장 일반적이고 기초적인 태그들이기 때문에 처음으로 배워볼 태그로 결정했습니다.","coverImage":"https://i.postimg.cc/bNNyC1Zj/HTML-9.png","categories":["가이드","HTML"],"tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","div","span"],"createdAt":1624553880000,"updatedAt":1624557600000,"display":true,"notice":false},"filePath":"2021-06-25-01-div-and-span-tag.mdx","fullPath":"/blog/post/2021-06-25-01-div-and-span-tag","content":"\r\nimport {\r\n  A, Bold, Char, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage\r\n} from '@/components/PostComponents';\r\n\r\n<HtmlGuideMessage/>\r\n\r\n이전 글까지는 HTML에 대한 기초적인 정보에 대해서 알아봤다면 이번 글부터는 본격적으로 태그들에 대해서 알아보는 시간을 갖도록 할 겁니다. 이번 글에서는 공간을 할당하는 태그인 `div`태그와 `span`태그에 대해서 알아볼 예정입니다.\r\n\r\n# 공간을 할당하는 태그\r\n<P><Bold>공간을 할당하는 태그에는 <Strong>두가지</Strong></Bold>가 있습니다. 위에서 이미 언급이 된 <Code>div</Code>태그와 <Code>span</Code>태그입니다. 이 두가지 태그는 가장 많이 사용되는 태그라고 생각하는데, <Strong>말 그대로 공간을 할당하기 위한 태그</Strong>입니다. 이 두가지의 태그는 가장 일반적이고 기초적인 태그들이기 때문에 처음으로 배워볼 태그로 결정했습니다.</P>\r\n\r\n사실 간간히 이 태그들을 언급하기는 했습니다. 블럭 태그와 인라인 태그를 설명할 때에도 언급을 했었죠. 이를 기억한다면 좋은 거고 그렇지 않다면 [태그의 유형](/blog/post/2021-05-08-01-html-block-inline-tag) 포스트를 읽고 진행하는 것을 추천드립니다.\r\n\r\n여러 개발자들이 공간을 할당하는 태그를 사용하는 주된 목적은 **레이아웃을 구성하는 것**에 있습니다. 레이아웃을 구성한다는 것은 **페이지의 구조를 구성한다는 것**입니다. 어떤 항목을 어디에 둘지에 대한 것이죠. HTML에서는 `div`태그를 통해서 레이아웃을 나눕니다. 경우에 따라서 `span`태그를 이용하기도 합니다. 그럼 이제 각각의 태그를 살펴보도록 합시다.\r\n\r\n## div 태그\r\n나누다, 분할하다 라는 의미를 가진 **Division**의 약자인 `div`태그는 대표적인 **블럭 태그**이며 많은 사람들이 특정 공간을 할당할 때에 자주 사용하는 태그입니다. 말 그대로 공간을 할당하는 태그이기 때문에 그것 외에는 별다른 기능은 없습니다. 딱히 의미를 가지는 태그는 아니기 때문에 `div`태그는 시맨틱 태그가 아니라는 의미가 되겠죠.\r\n\r\n```html\r\n<div>\r\n  <!-- 여기에 내용 -->\r\n</div>\r\n```\r\n\r\n`div`태그는 **CSS**와 함께 사용할 때에 빛을 발합니다. 어떤 의미를 지닌 것은 아니기 때문에 `id`속성이나 `class`속성을 통해서 이름을 붙여줍니다. 어떤 `div`태그는 이미지를 담기 위해 사용될 수 있고 어떤 `div`태그는 텍스트를 담기 위해 사용될 수 있기 때문입니다.\r\n\r\n```html\r\n<div id=\"number-box\">\r\n  <!-- 여기에 내용 -->\r\n</div>\r\n```\r\n\r\n이런 식으로 말입니다. 위의 `div`태그의 용도는 숫자를 담아두기 위한 용도일 겁니다. 이름에 그렇게 표시되어 있기 때문이죠. 어떻게 사용될 지는 누가 코드를 작성하느냐에 따라 다르기 때문에 다양한 방법으로 사용되는 태그입니다.\r\n\r\n## span 태그\r\n범위라는 의미를 가진 단어인 <Bold>span</Bold>과 이름이 같은 `span`태그는 대표적인 인라인 태그입니다. `div`태그와 마찬가지로 별다른 의미를 갖고 있지는 않으며, 그렇기 때문에 시맨틱 태그가 아닙니다.\r\n\r\n`span`태그는 주로 `p`태그 내에서 중요한 정보는 아니지만 굵게 하고 싶거나, 다른 색상으로 강조를 하고 싶을 때에 사용합니다. 중요한 내용이라면 `em`태그나 `strong`태그를 사용하면 되는데 중요한 내용은 아니지만 기울이고 싶거나 색깔을 바꾸고 싶다면 그 때에 `span`태그를 사용하면 되겠습니다. 물론 **CSS**를 활용해야하겠죠!\r\n\r\n```html\r\n<p>span 태그는 <span class=\"red\">이런식</span>으로 사용한다.</p>\r\n```\r\n\r\n다음 파트에서 `p`태그를 배우게 될테니 지금은 몰라도 좋습니다. `em`태그나 `strong`태그도 마찬가지입니다. 지금의 내용을 기억해뒀다가 나중에 다음 파트들에서 생각만 나도 성공입니다.\r\n\r\n<Line />\r\n\r\n이번 글에서는 `div`태그와 `span`태그에 대해서 알아봤습니다. 한 번 오늘 배운 이 두가지의 태그를 만지면서 연습해보면 좋을 것 같습니다. 이번 글은 여기까지 입니다. 다음 글부터는 **텍스트 관련된 태그**를 알아보게 됩니다. 텍스트와 관련된 태그는 상당히 많아서 여러 포스트로 나눌 예정입니다. 그럼 다음 글에서 봅시다."},{"frontMatter":{"title":"웹 개발을 위한 HTML 가이드 8편 - 주석","description":"우리는 살아가면서 아주 다양한 메모를 합니다. 메모의 목적은 잊어버리지 않기 위함이죠. 잊을만할때 메모를 보면 다시 명확하게 떠오르기도 합니다. 프로그래밍을 하는 도중에도 우리는 메모를 할 수 있습니다. 이를 주석이라고 표현합니다. 영어로는 Comment라고 합니다. 주석은 파일 내에 적혀 있지만 실질적인 프로그래밍의 내용에는 들어가지 않는 구문을 말합니다. 즉 영향을 주지 않는 코드를 말하는 겁니다. 주석을 적는 행위를 보고 주석을 단다고 하기도 합니다.","coverImage":"https://i.postimg.cc/VsnywZSS/HTML-8.png","categories":["가이드","HTML"],"tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","주석"],"createdAt":1624103280000,"updatedAt":1624103280000,"display":true,"notice":false},"filePath":"2021-06-19-01-comment.mdx","fullPath":"/blog/post/2021-06-19-01-comment","content":"\r\nimport {\r\n  A, Bold, Char, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage\r\n} from '@/components/PostComponents';\r\n\r\n<HtmlGuideMessage />\r\n\r\n<P>우리는 살아가면서 아주 다양한 메모를 합니다. 메모의 목적은 잊어버리지 않기 위함이죠. 잊을만할때 메모를 보면 다시 명확하게 떠오르기도 합니다. <Bold>프로그래밍을 하는 도중에도 우리는 메모를 할 수 있습니다.</Bold> 이를 <Strong>주석</Strong>이라고 하고, 영어로는 <Strong>Comment</Strong>라고 합니다.</P>\r\n\r\n웹 개발을 위한 HTML 가이드 8편은 주석에 대해 다룹니다. 사실 주석에 대해선 별 게 없지만 프로그래밍에 첫걸음을 한 우리는 왜 주석을 쓰는지 알아야 합니다. 천천히 알아보도록 합시다.\r\n\r\n<P><Mark>주석은 파일 내에 적혀 있지만 실질적인 프로그래밍의 내용에는 들어가지 않는 구문을 말합니다.</Mark> 즉 영향을 주지 않는 코드를 말하는 겁니다. 주석을 적는 행위를 보고 주석을 단다고 하기도 합니다.</P>\r\n\r\n<P>프로그래밍을 하다가 나중에 수정을 해야 하는 부분을 체크해두고 잠을 청하거나 다른 일을 하는 때도 언젠가는 겪을 수 있겠죠? 그럴 때에 주석을 달아서 메모를 해두거나 프로그래밍을 하다보면 복잡하게 진행될 때가 있는데 특정 구간을 찾기 위해서 주석을 중간 중간 달아두기도 합니다. 혹은 협업을 해야 할 때에 가이드라인 같은 것을 적는 용도로도 주석을 이용할 수 있죠.</P>\r\n\r\n주석은 다양한 프로그래밍 언어가 지원해주는 기능입니다. 없는 언어는 제가 지금까지는 못봤습니다. 아무튼 HTML에서의 주석은 다음과 같이 표현합니다.\r\n\r\n```html\r\n<!-- 주석은 이렇게 생겼습니다. -->\r\n\r\n<!--\r\n  주석은 여러줄을 감쌀 수도 있습니다.\r\n-->\r\n```\r\n\r\n<P>누가 HTML 아니랄까봐 태그처럼 생겼습니다. <Bold>HTML 공부를 할 때에는 주석을 이용해서 각 코드의 의미와 기능을 적으면서 공부를 하는 걸 추천합니다!</Bold> 이번 글은 여기까지 입니다. 다른 글에서는 정말로 본격적으로 태그를 하나 하나 배울 겁니다. 다음 글에서는 <Code>div</Code> 태그와 <Code>span</Code> 태그에 대해서 알아봅시다.</P>"},{"frontMatter":{"title":"웹 개발을 위한 HTML 가이드 7편 - 시맨틱 태그","description":"이번 글은 웹 개발을 위한 HTML 가이드 7편입니다. 이번 글에서는 시맨틱 태그에 대해 다룹니다. 태그의 이름은 아니고 태그의 분류 같은 겁니다. 지금까지 HTML이 발전하면서 다양한 태그가 생겨났습니다. 실질적인 의미와 기능이 일맥상통하는 태그가 있는가 하면 그렇지 않은 태그도 있습니다. 전자의 경우를 시맨틱 태그라고 하고 후자의 경우를 논 시맨틱 태그라고 합니다. 시맨틱은 영어 단어 Semantic 입니다. 이 단어는 의미론적인, 의미의 라는 의미를 갖고 있습니다. 시맨틱 태그는 의미를 가지는 태그들의 총칭입니다. 하지만 이번 글에서 그 리스트 하나 하나를 알아보는 건 아닙니다. 이것이 왜 중요하고 왜 시맨틱 태그를 사용해야 하는지에 대해서 다뤄보도록 할 겁니다.","coverImage":"https://i.postimg.cc/8cFYwWRQ/HTML-7.png","categories":["가이드","HTML"],"tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","시맨틱 태그"],"createdAt":1623903960000,"updatedAt":1623913800000,"display":true,"notice":false},"filePath":"2021-06-17-01-semantic-tags.mdx","fullPath":"/blog/post/2021-06-17-01-semantic-tags","content":"\r\nimport {\r\n  A, Bold, Char, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage\r\n} from '@/components/PostComponents';\r\n\r\n<HtmlGuideMessage />\r\n\r\n# 시맨틱 태그\r\n이번 글은 웹 개발을 위한 HTML 가이드 7편입니다. 이번 글에서는 시맨틱 태그에 대해 다룹니다. 태그의 이름은 아니고 태그의 분류 같은 겁니다. 지금까지 HTML이 발전하면서 다양한 태그가 생겨났습니다. HTML이 나온지 얼마 안됐을 때부터 HTML 4버전 까지만 해도 태그들이 가지는 의미는 별로 없었습니다. 어떤식으로 표현을 해도 브라우저 상에선 다 같은 것들이었죠.\r\n\r\n그래서 현재 HTML에는 <Mark>실질적인 의미와 기능이 일맥상통하는 태그가 있는가 하면 그렇지 않은 태그도 있습니다. 전자의 경우를 <Strong>시맨틱 태그</Strong>라고 하고 후자의 경우를 <Strong>논 시맨틱 태그</Strong></Mark>라고 합니다.\r\n\r\n시맨틱은 영어 단어 <Strong>Semantic</Strong> 입니다. 이 단어는 <Strong>의미론적인, 의미의</Strong>라는 의미를 갖고 있습니다. 시맨틱 태그는 의미를 가지는 태그들의 총칭입니다. 하지만 이번 글에서 그 리스트 하나 하나를 알아보는 건 아닙니다. 이것이 왜 중요하고 왜 시맨틱 태그를 사용해야 하는지에 대해서 다뤄보도록 할 겁니다.\r\n\r\n## 시맨틱 태그의 중요성\r\n`div` 태그는 공간을 할당하는 태그입니다. 특별한 의미를 갖고 있지 않습니다. `div` 태그 레이아웃을 할당하는데에도 사용하고 텍스트로도 사용합니다. 어떻게 쓰냐에 따라서 달라지기 때문에 그 기능이 명확하지도 않습니다. 그리고 이런 명확하지 않은 특징은 검색엔진이나 브라우저에게도 똑같이 전달됩니다. 과거에는 아래와 같은 방식으로 웹을 구성했습니다.\r\n\r\n```html\r\n<div id=\"header\">헤더</div>\r\n<div id=\"footer\">푸터</div>\r\n```\r\n\r\n위의 코드처럼 개발자들이 알아볼 수 있게 `id` 속성이나 `class` 속성으로 구분을 해도 브라우저나 검색엔진에겐 그냥 `div` 태그일 뿐입니다.\r\n\r\n하지만 HTML 5버전이 나타나면서 여러가지가 바뀌었습니다. 태그 자체가 의미를 가지고 브라우저나 검색 엔진이 그 의미에 맞게끔 처리를 하게 되었습니다. 위의 코드를 요즘 사용되는 방식으로 바꾸자면 아래와 같습니다.\r\n\r\n```html\r\n<header>헤더</header>\r\n<footer>푸터</footer>\r\n```\r\n\r\n시맨틱 태그들은 브라우저도 검색엔진도 그 의미를 파악할 수 있습니다. 아직은 배우지 않았지만 `img` 태그는 <Strong>image</Strong>의 약자이고 말 그대로 이미지와 관련된 태그입니다. 의미가 명확하죠. `p` 태그는 <Strong>Paragraph</Strong>의 약자입니다. 문단이라는 의미죠. `p` 태그는 텍스트 문단을 만드는 태그 입니다.\r\n\r\n시맨틱 태그를 사용하면 지저분하게 `id` 속성이나 `class` 속성을 많이 사용할 필요가 줄어들게 됩니다. 물론 여전히 많은 곳에서 `id` 속성과 `class` 속성을 사용해야 할 겁니다. 요지는 레이아웃을 잡을 때에 사용할 필요가 사라진다는 것이죠.\r\n\r\n이러한 시맨틱 태그는 HTML 5로 넘어오면서 생겨난 개념입니다. 웹 표준 상에서도 이러한 시맨틱 태그를 사용하는 것을 적극적으로 추천하고 있기도 합니다. 그렇기 때문에 시맨틱 태그는 사용하는 것이 좋은 것이고 되도록이면 시맨틱 태그의 활용도를 늘리는 게 중요합니다.\r\n\r\n<Line />\r\n\r\n앞으로 우리는 다양한 태그들을 배울 겁니다. 그 중에는 논 시맨틱 태그도 있고 시맨틱 태그도 있습니다. 어떤 태그를 어떤 상황에 사용해야 하는지는 앞으로 스스로 알게 될테니 걱정하지 않아도 됩니다.\r\n\r\n이번 글은 간단하게 시맨틱 태그에 대해서 알아봤습니다. <Mark>시맨틱 태그를 사용하는 것은 웹 페이지에 도움을 주며 검색엔진에서 페이지가 검색될 가능성을 높여주기도 하기 때문에 사용하면 좋다는 점</Mark>을 다시 한 번 말씀 드립니다. 이번 글은 여기서 마치도록 하고 다음 글에서는 <Strong>주석</Strong>에 대해서 알아봅시다."},{"frontMatter":{"title":"웹 개발을 위한 HTML 가이드 6편 - HTML의 기본적인 구조","description":"이전 글들을 통해서 HTML의 기본적인 사전 지식에 대해 알아봤습니다. 우리는 HTML이 무엇인가에 대해서 알았고 어떻게 생긴 것인지 알았고 문법을 알아봤습니다. 무엇을 할 수 있는지 알았으며 태그의 특성에 대해서도 알아봤습니다. 개발환경도 갖췄으니 이제는 정말로 본격적인 코딩을 시작할 순간입니다. 이번 글에서 아주 간단한 페이지를 하나 만들어보는 것으로 우리는 웹을 이루는 가장 기본적인 구조에 대해서 알아보는 용기 있는 발걸음을 해보려고 합니다. 혹 아직 기초적인 지식이 없다면 이 가이드의 첫 글부터 보고 오시면 좋겠습니다. 그럼 웹 개발을 위한 HTML 가이드 6편 시작합니다.","coverImage":"https://i.postimg.cc/kDrvcngB/HTML-6.png","categories":["가이드","HTML"],"tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","HTML의 기본구조"],"createdAt":1622825580000,"updatedAt":1622942400000,"display":true,"notice":false},"filePath":"2021-06-05-01-html-basic-structure.mdx","fullPath":"/blog/post/2021-06-05-01-html-basic-structure","content":"\r\nimport {\r\n  A, Bold, Char, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage\r\n} from '@/components/PostComponents';\r\n\r\n<HtmlGuideMessage />\r\n\r\n이전 글들을 통해서 HTML의 기본적인 사전 지식에 대해 알아봤습니다. 우리는 **HTML이 무엇인가**에 대해서 알았고 어떻게 생긴 것인지 알았고 **문법**을 알아봤습니다. **무엇을 할 수 있는지** 알았으며 **태그의 특성**에 대해서도 알아봤습니다. **개발환경**도 갖췄으니 이제는 정말로 **본격적인 코딩**을 시작할 순간입니다.\r\n\r\n<P>이번 글에서 아주 간단한 페이지를 하나 만들어보는 것으로 우리는 <Mark>웹을 이루는 가장 <Strong>기본적인 구조</Strong>에 대해서 알아보는 용기 있는 발걸음</Mark>을 해보려고 합니다. 혹 아직 기초적인 지식이 없다면 이 가이드의 첫 글부터 보고 오시면 좋겠습니다. 그럼 웹 개발을 위한 HTML 가이드 6편 시작합니다.</P>\r\n\r\n# 기본적인 구조\r\n```html\r\n<!DOCTYPE html>\r\n<!-- 이 문서가 HTML5 문서임을 알리는 코드입니다. -->\r\n<html lang=\"ko\">\r\n<!-- 모든 HTML 문서는 html 태그로 감싸야 합니다. -->\r\n<head>\r\n  <!-- head 태그 안에는 페이지들의 메타데이터들이 들어갑니다. -->\r\n  <!-- 메타 데이터에 대해서는 나중에 알게 됩니다. -->\r\n  <title>Document</title>\r\n  <!-- title 태그는 말 그대로 페이지의 제목을 나타냅니다. -->\r\n</head>\r\n<body>\r\n  <!-- 여기에 가시적인 컨텐츠 내용이 들어갑니다. -->\r\n</body>\r\n</html>\r\n```\r\n\r\n![위의 코드대로 작성한 웹 페이지의 모습이다. 컨텐츠가 없기 때문에 아무것도 안보이지만 제목은 보인다.](https://i.postimg.cc/66r8g1DR/2021-0606-008.png)\r\n\r\n웹 페이지들은 **HTML의 태그**로 이루어져 있습니다. 그리고 하나의 페이지에는 아주 기본적인 태그들이 **반드시** 들어갑니다. 위의 코드에 없는 태그들은 반드시 필요한 태그는 아니기 때문에 없어도 됩니다. 어디까지나 필수 조건에 대한 것입니다. 모든 페이지를 이렇게만 만들면 아무것도 없겠죠. 따라서 어차피 다양한 태그를 사용하게 됩니다.\r\n\r\n이번 글에서는 기본적인 구조를 알아보는 것이니 다른 소리는 잘라내고, 다시 본론으로 돌아와서 위의 태그들에 주석으로 작성해둔 내용을 보면 대강 어떤 기능을 하는지 알 수 있습니다. 이렇게만 보면 이해하기가 어렵죠. 그러니 차근 차근 하나 하나 살펴보도록 합시다.\r\n\r\n메모장을 켜고 순서대로 작성해보도록 합시다.\r\n\r\n## DOCTYPE\r\n```html\r\n<!DOCTYPE html>\r\n<!-- 이 문서가 HTML5 문서임을 알리는 코드입니다. -->\r\n```\r\n\r\n이 코드는 이 문서가 **HTML 5**로 만들어졌다는 것을 선언하는 코드입니다. **독타입**이라고 부릅니다. 즉, 이 코드가 있으면 브라우저는 이 문서가 HTML 문서이고 어떤 버전인지를 알 수 있습니다. 우리가 배우려는 것은 HTML 중에서도 5버전에 해당합니다. 5버전의 선언문은 위와 같습니다.\r\n\r\n**가장 중요한 것은 이 코드는 항상 문서의 가장 첫줄에 있어야한다는 것입니다. 절대적으로 지켜져야 합니다.**\r\n\r\n## html 태그\r\n```html\r\n<html lang=\"ko\">\r\n  <!-- 모든 HTML 문서는 html 태그로 감싸야 합니다. -->\r\n</html>\r\n```\r\n\r\n`html` 태그는 최상위의 부모 태그가 됩니다. 모든 태그들은 이 태그로 감싸야 합니다. `html` 태그에는 `lang`이라는 속성이 있고, 속성 값으로는 국가코드를 적어주면 되겠습니다. `ko`는 한국을 의미하죠. 실제로 해외 사이트에 들어가보면 저 부분에 `en`이나 `ja` 같은 코드들이 들어가 있는 것을 볼 수 있을 겁니다.\r\n\r\n<Message color={'g'}>\r\n  <p>크롬이나 웨일 브라우저 같은 최신식 브라우저들을 통해서 웹 페이지의 구성요소를 검사할 수 있는 기능을 사용하면 어떤 웹 페이지가 어떤 코드로 이루어져 있는지 알 수 있습니다. 크롬이나 웨일 브라우저를 기준으로 <Strong>F12</Strong>를 누르면 개발자 콘솔이 뜹니다.</p>\r\n</Message>\r\n\r\n이 국가 코드들은 **ISO 639-1**에 해당하는 약속된 문자열입니다. 우리는 한국인이고 한국어로 된 웹 페이지들을 만들 가능성이 높기 때문에 그냥 `ko`를 적어주면 되겠습니다.\r\n\r\nHTML 문서에 반드시 필요한 네가지의 태그 중 하나로 이 문서가 HTML 문서라는 것을 알려주는 태그가 바로 `html` 태그 입니다.\r\n\r\n## head 태그\r\n```html\r\n<head>\r\n  <!-- head 태그 안에는 페이지들의 메타데이터들이 들어갑니다. -->\r\n  <!-- 메타 데이터에 대해서는 나중에 알게 됩니다. -->\r\n</head>\r\n```\r\n\r\n`head` 태그에는 웹 페이지의 **메타데이터**들이 들어갑니다. 메타데이터라는 것은 웹 페이지의 정보들을 말합니다. 눈에는 보이지 않지만 **브라우저**나 **검색 엔진**들은 이 메타데이터를 읽어서 적용합니다.\r\n\r\n쉽게 말하면 웹 페이지의 컨텐츠에 **직접적인 영향을 주지 않는** 것들이 들어가는 태그라고 이해하면 되겠습니다.\r\n\r\n## title 태그\r\n```html\r\n<title>Document</title>\r\n<!-- title 태그는 말 그대로 페이지의 제목을 나타냅니다. -->\r\n```\r\n\r\n페이지의 제목을 설정할 때에 사용하는 태그입니다. `head` 태그의 안에 들어가고 `title` 태그를 작성하지 않으면 **제목이 없는 페이지가 되어버립니다.** 검색이 잘 되지 않을 뿐더러 구분도 어렵겠죠. 때문에 중요한 태그 중의 하나라고 할 수 있습니다.\r\n\r\n## body 태그\r\n```html\r\n<body>\r\n  <!-- 여기에 가시적인 컨텐츠 내용이 들어갑니다. -->\r\n</body>\r\n```\r\n\r\n실질적인 컨텐츠가 들어가는 부분입니다. `body` 태그의 안에 우리가 작성할 거의 모든 태그들이 들어갑니다. 화면에 보여야 하는 정보들은 전부 이 안에 들어간다고 보면 됩니다. 앞으로 배울 태그들은 거의 다 이 안에 들어갈겁니다.\r\n\r\n<Line />\r\n\r\n여기까지가 기본적인 구조에 해당되는 부분입니다. 여기까지 작성했으면 저장을 합시다. **다른 이름으로 저장**을 이용해서 파일 형식은 **모든 파일**로 설정하고, 파일 이름은 <Bold>basic.html</Bold> 이라고 하겠습니다. 사실 아무거나 해도 됩니다. 인코딩은 UTF-8로 설정해두고 저장을 합시다. 그리고 실행하면 포스트 상단에서 봤던 텅 빈 페이지가 보일 겁니다.\r\n\r\n축하합니다. 이제 여러분은 웹 페이지를 만들 수 있습니다! 이것들이 웹 페이지의 가장 기본적인 정수입니다.\r\n\r\n**웹 표준**이나 **SEO**를 충족하기 위해선 더 많은 내용들이 들어가지만 지금은 몰라도 됩니다. 추후에 알게 될 내용들이기 때문이죠. 그런데도 지금 언급하는 이유는 이름이라도 언급해두면 그런게 있다 정도는 알 수 있기 때문입니다.\r\n\r\n자, 그렇다면 이제 다음 글로 넘어가도록 합시다. 물론, 이 부분이 잘 이해되지 않는다면 **여러 번 읽어보고 이해하고 넘어가는 게** 좋습니다. 이번 글에서 배운 내용은 앞으로 다시는 언급되지 않고 기본적으로 알고 있는 것으로 간주합니다. 웹 페이지를 만든다고 하면 이 기본적인 구조를 적용한 상태로 시작하는 겁니다.\r\n\r\n앞으로 배우는 거의 모든 태그들은 `body` 태그의 안에 들어간다는 점 다시 한 번 기억하시면 되겠습니다."},{"frontMatter":{"title":"웹 개발을 위한 HTML 가이드 5편 - 개발환경 구축하기","description":"우리는 저번 글들을 통해서 HTML에 대해 알게되었고 문법을 알아보았습니다. 태그라는 것은 무엇이며 태그의 특징은 무엇이고, 태그끼리의 관계는 또 어떤지도 알아봤습니다. 기본적인 사전 지식은 다 알아본 셈이고, 이게부터는 코딩을 본격적으로 시작해야 할 때가 왔죠. 하지만 코딩을 본격적으로 시작하기에 앞서 알고 넘어가야 할 것이 있습니다. 그게 무엇인가 하면 이번 글의 주제인 개발환경입니다. 개발환경은 개발자가 개발을 하기 위해 갖춰야 하는 기본적인 조건입니다. 프로젝트들이 모여있는 폴더부터 시작해서 편집기까지 모두를 아울러 부르는 말이 개발환경입니다.","coverImage":"https://i.postimg.cc/9QrMyKQ8/HTML-5.png","categories":["가이드","HTML"],"tags":["가이드","HTML","웹 개발","프로그래밍","코딩","웹 코딩","웹 프로그래밍","HTML 공부하기","HTML 초보","개발환경"],"createdAt":1622592540000,"updatedAt":1622688600000,"display":true,"notice":false},"filePath":"2021-06-02-01-development-environment.mdx","fullPath":"/blog/post/2021-06-02-01-development-environment","content":"\r\nimport {\r\n  A, Bold, Char, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark, HtmlGuideMessage\r\n} from '@/components/PostComponents';\r\n\r\n<HtmlGuideMessage/>\r\n\r\n우리는 저번 글들을 통해서 HTML에 대해 알게되었고 문법을 알아보았습니다. 태그라는 것은 무엇이며 태그의 특징은 무엇이고, 태그끼리의 관계는 또 어떤지도 알아봤습니다. 기본적인 사전 지식은 다 알아본 셈이고, 이게부터는 코딩을 본격적으로 시작해야 할 때가 왔죠.\r\n\r\n<P>하지만 코딩을 본격적으로 시작하기에 앞서 알고 넘어가야 할 것이 있습니다. 그게 무엇인가 하면 이번 글의 주제인 <Strong>개발환경</Strong>입니다. <Mark>개발환경은 개발자가 개발을 하기 위해 갖춰야 하는 기본적인 조건입니다.</Mark> 프로젝트들이 모여있는 폴더부터 시작해서 편집기까지 모두를 아울러 부르는 말이 개발환경입니다.</P>\r\n\r\n바로 본론으로 넘어가보도록 합시다. 웹 개발을 위한 HTML 가이드 5편 시작합니다.\r\n\r\n# 개발환경 구축하기\r\n개발환경을 구축하기 전에 기본적으로 해야하는 설정들이 있습니다. 일단은 그 설정들을 먼저 살펴보도록 합시다. 그 후에는 우리가 개발을 할 때에 사용할 폴더를 만들겁니다. 마지막으로 메모장을 준비해주면 우리의 첫번째 개발환경은 완성된 겁니다.\r\n\r\n왜 메모장을 사용하느냐에 대해서는 저는 이렇게 답합니다. 편한 것이 왜 편한지 알려면 불편함을 먼저 경험해야 합니다. 우리는 불편한 방식을 먼저 사용함으로써 편한 것이 왜 편한 것인지를 깨닫는 과정을 겪어볼 겁니다. 이건 중요한 것일 수도 있습니다.\r\n\r\n최종적으로 사용할 편집기는 **VS Code**지만 메모장부터 건드려보도록 합시다. **VS Code**에 대한 이야기는 나중에 다른 글을 통해서 하게 될 것 같습니다.\r\n\r\n## 개발을 위한 폴더설정\r\n아, 이 블로그의 모든 글은 윈도우를 기반으로 설명합니다. 제가 맥을 다룰 수 없기 때문에 맥 관련으론 설명할 수 없는 점 양해 부탁드립니다. 우리가 우선적으로 해야 하는 설정은 파일의 확장자가 보이게끔 폴더 설정을 건드리는 겁니다.\r\n\r\n![폴더 및 검색 옵션 변경을 클릭한다](https://i.postimg.cc/PqhBpkpf/K-20210326-133216.png)\r\n\r\n윈도우 탐색기를 열어봅시다. 상단의 메뉴바에서 파일을 클릭하고 **폴더 및 검색 옵션 변경**을 클릭합니다.\r\n\r\n![보기 탭을 클릭한다](https://i.postimg.cc/mDgJjNy0/K-20210326-133219.png)\r\n\r\n![스크롤을 내려서 숨김 파일 폴더 및 드라이브 표시를 체크하고, 알려진 파일 형식의 파일 확장명 숨기기의 체크를 해제한다](https://i.postimg.cc/FKZw0n3y/K-20210326-133229.png)\r\n\r\n그 다음에는 **보기** 탭을 클릭하고 스크롤을 내려봅시다. 그리고 이미지에서처럼 **숨김 파일 폴더 및 드라이브 표시**를 체크하고, **알려진 파일 형식의 파일 확장명 숨기기**의 체크를 해제합니다. 이렇게 하면 숨겨진 파일들은 투명하게 보이게 되고, 파일의 확장자들도 보이게 됩니다. 이렇게 하면 기본적인 폴더 설정은 끝난겁니다.\r\n\r\n이 부분은 개인의 기호에 따라 다르긴 하지만 코드를 작성하는 개발자들은 파일의 확장자가 보이는 게 더 편할겁니다.\r\n\r\n## 개발폴더 만들기\r\n이제는 개발폴더를 만들어야겠습니다. 원하는 경로에 폴더 하나를 만듭니다. **웬만하면 경로에 한글이 없는 것이 개발할 때에 정신건강에 좋습니다.** 폴더의 경로에 한글이 들어가면 혹시라도 오류가 날 수 있기 때문에 영어만 있는 경로를 추천합니다.\r\n\r\n우리가 만든 이 폴더는 우리의 전용 개발폴더가 될 겁니다. 이 안에 우리의 다양한 프로젝트를 넣어두면 되는 것이죠. 앞으로도 사용할 폴더이기 때문에 잘 기억해두도록 합시다. 저같은 경우는 아래와 같은 식으로 분류를 해두고 프로젝트들을 관리하고 있습니다.\r\n\r\n![개발폴더는 자유롭게 관리하면 된다.](https://i.postimg.cc/g23XL37n/2021-0602-001.png)\r\n\r\n우리가 만든 폴더는 컨테이너 같은 겁니다. 이 폴더의 안에 각각의 프로젝트 폴더가 생기겠죠. 저는 WebTuto라는 이름의 폴더를 이번 HTML 가이드의 폴더로 결정했습니다. 여러분은 원하는 이름으로 아무거나 만들어주시면 됩니다. 단, 위에서 말한 것처럼 한글은 배제하고 폴더 이름을 정하는 것이 좋습니다.\r\n\r\n## 메모장을 사용할 때의 주의사항\r\n오래 사용할 것은 아니지만 적어도 파일 하나 정도는 메모장으로 만들어볼 겁니다. 이번 글에서는 쓰지 않지만요. 지금은 간단하게 메모장으로 파일을 저장할 때에 주의 사항에 대해서 이야기할까 합니다.\r\n\r\n메모장은 txt 파일을 관리하는 것에 특화되어있기 때문에 저장을 하면 기본적으로 txt 파일로 저장이 됩니다. 우리가 만들 파일은 html 파일이기 때문에 파일 형식은 모든 파일로 설정합니다. 인코딩은 중요한데 **UTF-8**로 설정하면 됩니다.\r\n\r\nHTML 파일의 확장자는 html입니다. CSS나 자바스크립트도 메모장으로 코딩할 수 있습니다. 아무튼 아직은 파일을 만들 것은 아니지만 아래의 이미지처럼 설정해두고 저장하면 되겠습니다.\r\n\r\n![인코딩과 파일 형식 설정하기](https://i.postimg.cc/gc5x8GVK/K-20210326-140544.png)\r\n\r\n<Line />\r\n\r\n<P>이번 글에서는 개발환경에 대해서 알아봤습니다. 다시 개발환경에 대해 설명하자면 <Mark>파일을 모아놓는 폴더부터 시작해서 편집기까지 모두를 아울러 부르는 말입니다.</Mark> 어떤 프로그래밍 언어를 배우더라도 개발환경은 갖추고 시작합니다. HTML은 개발환경 갖추기가 아주 간단한 편에 속한다는 것만 알아두면 좋겠습니다.</P>\r\n\r\n처음에는 메모장을 사용하다가 다른 편집기를 사용할건데 다른 설정은 그대로 두면 되고 편집기만 바꾸면 됩니다. 그럼 개발폴더도 만들었고 메모장도 준비했으니 코딩을 할 준비가 확실히 되었습니다. 그럼 다음 글에서는 **HTML의 기본적인 구조**에 대해서 알아보도록 합시다."}],"notices":[{"frontMatter":{"title":"블로그 이름 변경","description":"2021년 7월 14일부로 이 블로그의 이름이 니힐 블로그에서 니힐로그로 변경되었습니다. 이름을 바꾼 이유는 예전에 만들어놓은 티스토리 블로그의 이름과 똑같아서 문제가 생길 것 같아서 바꿨습니다. 이참에 그 블로그도 완전히 정리를 해서 문제가 없게 해야겠습니다. 이름을 변경하면서 여러가지 부분을 수정하기도 했고 지금 블로그에 쓰이는 로고들도 살짝 교체했습니다. 문제는 썸네일인데 썸네일은 하나 하나 바꾸는 게 힘들어서 그냥 두기로 했습니다. 이 공지부터 새로운 이름이 적용된 썸네일을 이용할 생각입니다.","coverImage":"https://i.postimg.cc/HW5FXZVg/image.png","createdAt":1626205980000,"updatedAt":1626205980000,"display":true,"notice":true},"filePath":"2021-07-14-01-blog-name-change.mdx","fullPath":"/blog/notice/2021-07-14-01-blog-name-change","content":"\r\nimport {\r\n  A, Bold, Char, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike, Line, Mark\r\n} from '@/components/PostComponents';\r\n\r\n**2021년 7월 14일**부로 이 블로그의 이름이 **니힐 블로그**에서 **니힐로그**로 변경되었습니다. 이름을 바꾼 이유는 예전에 만들어놓은 티스토리 블로그의 이름과 똑같아서 문제가 생길 것 같아서 바꿨습니다. 이참에 그 블로그도 완전히 정리를 해서 문제가 없게 해야겠습니다.\r\n\r\n이름을 변경하면서 여러가지 부분을 수정하기도 했고 지금 블로그에 쓰이는 로고들도 살짝 교체했습니다. 문제는 썸네일인데 썸네일은 하나 하나 바꾸는 게 힘들어서 그냥 두기로 했습니다. 이 공지부터 새로운 이름이 적용된 썸네일을 이용할 생각입니다.\r\n\r\n코로나가 극성이고 한여름이라 상당히 더운 하루하루라서 포스팅은 쉬고 있고 이런 저런 코드만 만지고 있었습니다. 블로그의 코드도 만졌고 다른 프로젝트들도 진행하고 있었는데 이게 점점 더워져서 화딱지가 나려고 하는군요. 그래도 아무것도 안하고 있는 건 아니고 잘 살아가고 있는 것 같아 뿌듯하네요. 이제부터 천천히 포스트를 하나 하나 작성해 나가야겠습니다."},{"frontMatter":{"title":"블로그를 본격적으로 시작합니다.","description":"Next.js로 직접 블로그로 만들겠다고 이런 저런 정보를 찾아서 백지부터 시작해서 작업을 진행한 지 2주 정도 흘렀습니다. 이제는 블로그가 모양을 갖추어서 슬슬 본격적으로 포스팅을 해도 상관 없을 것 같다고 판단하고, 블로그를 제대로 시작하려합니다. 이 블로그는 프로그래밍을 중점으로 컨텐츠를 채워나갈 것이고 그 컨텐츠들은 연습이나 복습차원에서 진행하는 프로그래밍 언어 가이드가 될 것 같습니다.","coverImage":"https://i.postimg.cc/CKwFg19k/image.png","createdAt":1619932140000,"updatedAt":1619932140000,"display":true,"notice":true},"filePath":"2021-05-02-01-blog-begins.mdx","fullPath":"/blog/notice/2021-05-02-01-blog-begins","content":"\r\nimport {\r\n  A, Bold, Char, Details, Dl, H, Message, NoteBottom, NoteTop, P,\r\n  Quote, Score, Youtube, Ul, Ol, Em, Gray, Code, Kbd, Image,\r\n  Q, Strong, Spoiler, Strike\r\n} from '@/components/PostComponents';\r\n\r\n**Next.js**로 직접 블로그로 만들겠다고 이런 저런 정보를 찾아서 백지부터 시작해서 작업을 진행한 지 2주 정도 흘렀습니다. 이제는 블로그가 모양을 갖추어서 슬슬 본격적으로 포스팅을 해도 상관 없을 것 같다고 판단하고, 블로그를 제대로 시작하려합니다. 이 블로그는 프로그래밍을 중점으로 컨텐츠를 채워나갈 것이고 그 컨텐츠들은 연습이나 복습차원에서 진행하는 프로그래밍 언어 가이드가 될 것 같습니다.\r\n\r\n물론, 프로그래밍이 아니더라도 일본어 컨텐츠나 게임에 관련된 컨텐츠들도 다룰 예정입니다. 사람이 항상 공부만 하고 있을 수는 없는 노릇이죠. 아무튼 처음으로 직접 블로그의 곳곳을 구현해봤는데 정말 감회가 새로운 작업이었고 이 블로그에는 많은 애착이 갈 것 같습니다. 이번 작업을 하면서 새로이 알게 된 것들도 있고 확실히 재밌는 작업이었습니다. 이제부터 천천히 포스트를 작성할 예정이고, 더 구현해야 하는 기능들도 있지만, 천천히 살펴보면 될 듯 합니다.\r\n\r\n이번에 블로그를 만들면서 마크다운 문법으로 포스트를 작성할 수 있도록 만들어놓았기 때문에 포스트 작성이 상당히 편리해진만큼, 앞으로 다양한 컨텐츠를 가지고 포스트를 작성해보도록 하고, 약 다섯 번은 운영했었던 블로그를 또 다시 이렇게 운영하게 될 줄은 몰랐지만, 활기차게 새로운 시작을 해보려고 합니다.\r\n\r\n누가 보게 될 지는 모르지만 그거랑 상관없이 포스트는 천천히 작성해야겠습니다."}]},"__N_SSG":true}