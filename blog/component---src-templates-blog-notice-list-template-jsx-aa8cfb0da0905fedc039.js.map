{"version":3,"sources":["webpack://nihil-blog/./src/components/Paginator.jsx","webpack://nihil-blog/./src/templates/BlogNoticeListTemplate.jsx"],"names":["numList","Path","currentPage","numPages","type","isFirst","isLast","prevPage","toString","nextPage","numberArray","Array","from","length","_","index","className","to","rel","map","number","includes","key","data","pageContext","props","siteData","pageName","pageDescription","pageKeywords","pageUrl","pageType","id","allMdx","nodes","post","slug","frontmatter","title","excerpt","dateTime","createdAt","createString"],"mappings":"+IAGMA,EAAU,EACb,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAsD9B,IAnDkB,SAAC,GAAsC,IACnDC,EADeC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,KAIxCH,EADW,WAATG,EACK,gBAEA,SAGT,IAAMC,EAA0B,IAAhBH,EACVI,EAASJ,IAAgBC,EACzBI,EAAWL,EAAc,GAAM,EAAOD,EAA3B,OAAwCA,GAAQC,EAAc,GAAGM,WAC5EC,EAAQ,GAAMR,GAAQC,EAAc,GAAGM,WAEvCE,EAAcC,MAAMC,KAAK,CAAEC,OAAQV,IAAa,SAACW,EAAGC,GAAJ,OAAcA,EAAQ,KAE5E,OACE,wBAEKV,GAEG,qBAAM,aAAGW,UAAU,qCADnB,QAAC,KAAD,CAAMC,GAAOhB,EAAL,IAAce,UAAU,YAAYE,IAAI,SAAO,aAAGF,UAAU,8BAIvEX,GAEG,qBAAM,aAAGW,UAAU,8BADnB,QAAC,KAAD,CAAMC,GAAIV,EAAUS,UAAU,YAAYE,IAAI,SAAO,aAAGF,UAAU,uBAItEhB,EAAQmB,KAAI,SAACC,GAAD,OACVV,EAAYW,SAASnB,EAAckB,KACjC,QAAC,KAAD,CAAME,IAAG,GAAKrB,GAAOC,EAAckB,GAAUJ,UAAU,qBAAqBC,GAAE,GAAKhB,GAAOC,EAAckB,IACrGlB,EAAckB,MAMpBd,GAEG,qBAAM,aAAGU,UAAU,+BADnB,QAAC,KAAD,CAAMC,GAAIR,EAAUO,UAAU,YAAYE,IAAI,SAAO,aAAGF,UAAU,wBAIrEV,GAEG,qBAAM,aAAGU,UAAU,sCADnB,QAAC,KAAD,CAAMC,GAAE,GAAKhB,EAAOE,EAAYa,UAAU,YAAYE,IAAI,SAAO,aAAGF,UAAU,kC,+FCiC1F,UA/E+B,SAAC,GAA4B,IAA1BO,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,YAC9BtB,EAA2BsB,EAA3BtB,YACFuB,EAAQ,CACZvB,cACAC,SAHiCqB,EAAdrB,SAInBC,KAAM,UAGFsB,EAAW,CACfC,SAAS,UAAWzB,EAAZ,QACR0B,gBAAiB,GACjBC,aAAc,GACdC,QAAQ,gBAAiB5B,EACzB6B,SAAU,WAGZ,OACE,yBACE,QAAC,IAAcL,GACb,eAAKM,GAAG,mBACN,mBAAShB,UAAU,cACjB,QAAC,IAAcS,KAEjB,mBAASO,GAAG,kBACTT,EAAKU,OAAOC,MAAMf,KAAI,SAACgB,GAAD,OACrB,eAAKnB,UAAU,YAAYM,IAAKa,EAAKH,KACnC,cAAIhB,UAAU,eACZ,QAAC,KAAD,CAAMC,GAAE,IAAMkB,EAAKC,OAAQ,aAAGpB,UAAU,gBAAxC,IAA0DmB,EAAKE,YAAYC,SAE7E,eAAKtB,UAAU,iBACb,aAAGA,UAAU,iBACX,gBAAMA,UAAU,cAAY,aAAGA,UAAU,yBAAzC,UACA,oBACA,gBAAMA,UAAU,oBAAoBmB,EAAKI,WAE3C,aAAGvB,UAAU,iBACX,gBAAMA,UAAU,cAAY,aAAGA,UAAU,iBAAzC,WACA,gBAAMA,UAAU,YAAYwB,SAAUL,EAAKE,YAAYI,WACpDN,EAAKE,YAAYK,sBAO9B,mBAAS1B,UAAU,cACjB,QAAC,IAAcS","file":"component---src-templates-blog-notice-list-template-jsx-aa8cfb0da0905fedc039.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nconst numList = [\r\n  -4, -3, -2, -1, 0, 1, 2, 3, 4,\r\n];\r\n\r\nconst Paginator = ({ currentPage, numPages, type, }) => {\r\n  let Path;\r\n\r\n  if (type === 'notice') {\r\n    Path = '/notice/page/';\r\n  } else {\r\n    Path = '/page/';\r\n  }\r\n\r\n  const isFirst = currentPage === 1;\r\n  const isLast = currentPage === numPages;\r\n  const prevPage = currentPage - 1 === 1 ? `${Path}1` : `${Path}${(currentPage - 1).toString()}`;\r\n  const nextPage = `${Path}${(currentPage + 1).toString()}`;\r\n\r\n  const numberArray = Array.from({ length: numPages, }, (_, index) => index + 1);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !isFirst\r\n          ? <Link to={`${Path}1`} className='page-link' rel='prev'><i className='fas fa-angle-double-left' /></Link>\r\n          : <span><i className='fas fa-angle-double-left false' /></span>\r\n      }\r\n      {\r\n        !isFirst\r\n          ? <Link to={prevPage} className='page-link' rel='prev'><i className='fas fa-angle-left' /></Link>\r\n          : <span><i className='fas fa-angle-left false' /></span>\r\n      }\r\n      {\r\n        numList.map((number) => (\r\n          numberArray.includes(currentPage + number) && (\r\n            <Link key={`${Path}${currentPage + number}`} className='page-link link-num' to={`${Path}${currentPage + number}`}>\r\n              {currentPage + number}\r\n            </Link>\r\n          )\r\n        ))\r\n      }\r\n      {\r\n        !isLast\r\n          ? <Link to={nextPage} className='page-link' rel='next'><i className='fas fa-angle-right' /></Link>\r\n          : <span><i className='fas fa-angle-right false' /></span>\r\n      }\r\n      {\r\n        !isLast\r\n          ? <Link to={`${Path}${numPages}`} className='page-link' rel='next'><i className='fas fa-angle-double-right' /></Link>\r\n          : <span><i className='fas fa-angle-double-right false' /></span>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Paginator;","import Paginator from '@components/Paginator';\r\nimport AppLayout from '@layouts/AppLayout';\r\nimport { graphql, Link } from 'gatsby';\r\nimport React from 'react';\r\n\r\nconst BlogNoticeListTemplate = ({ data, pageContext, }) => {\r\n  const { currentPage, numPages, } = pageContext;\r\n  const props = {\r\n    currentPage,\r\n    numPages,\r\n    type: 'notice',\r\n  };\r\n\r\n  const siteData = {\r\n    pageName: `공지 목록 (${currentPage} 페이지)`,\r\n    pageDescription: '',\r\n    pageKeywords: '',\r\n    pageUrl: `/notice/page/${currentPage}`,\r\n    pageType: 'website',\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppLayout {...siteData}>\r\n        <div id='post-list-page'>\r\n          <section className='Paginator'>\r\n            <Paginator {...props} />\r\n          </section>\r\n          <section id='blog-post-list'>\r\n            {data.allMdx.nodes.map((post) => (\r\n              <div className='list-item' key={post.id}>\r\n                <h3 className='list-title'>\r\n                  <Link to={`/${post.slug}`}><i className='fas fa-bell' /> {post.frontmatter.title}</Link>\r\n                </h3>\r\n                <div className='list-content'>\r\n                  <p className='content-info'>\r\n                    <span className='info-name'><i className='fas fa-align-justify' /> 미리보기</span>\r\n                    <br />\r\n                    <span className='list-description'>{post.excerpt}</span>\r\n                  </p>\r\n                  <p className='content-info'>\r\n                    <span className='info-name'><i className='far fa-clock' /> 작성 날짜</span>\r\n                    <time className='info-time' dateTime={post.frontmatter.createdAt}>\r\n                      {post.frontmatter.createString}\r\n                    </time>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </section>\r\n          <section className='Paginator'>\r\n            <Paginator {...props} />\r\n          </section>\r\n        </div>\r\n      </AppLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query NOTICE_LIST_QUERY($skip: Int! = 0) {\r\n    allMdx(\r\n      filter: {frontmatter: {notice: {in: true, nin: false}, display: {eq: true}}}\r\n      sort: {fields: frontmatter___createdAt, order: DESC}\r\n      limit: 5\r\n      skip: $skip\r\n    ) {\r\n      totalCount\r\n      nodes {\r\n        id\r\n        slug\r\n        excerpt(pruneLength: 250, truncate: true)\r\n        frontmatter {\r\n          createdAt\r\n          createString: createdAt(formatString: \"YYYY년 MM월 DD일 HH시 mm분\")\r\n          title\r\n          updatedAt\r\n          updateString: updatedAt(formatString: \"YYYY년 MM월 DD일 HH시 mm분\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default BlogNoticeListTemplate;"],"sourceRoot":""}